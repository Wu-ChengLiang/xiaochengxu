{"version":3,"file":"index.js","sources":["../../../../src/pages/booking/confirm/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { View, Text, Image, ScrollView } from '@tarojs/components'\nimport Taro, { useRouter } from '@tarojs/taro'\nimport { orderService, CreateOrderParams } from '@/services/order'\nimport { storeService } from '@/services/store'\nimport { therapistService } from '@/services/therapist'\nimport { walletService } from '@/services/wallet.service'\nimport { paymentService } from '@/services/payment.service'\nimport { voucherService } from '@/services/voucher.service'\nimport { calculateDiscountPrice } from '@/types/voucher'\nimport { getCurrentUserInfo, requireLogin } from '@/utils/user'\nimport './index.scss'\n\ninterface CartItem {\n  id?: string  // 唯一标识符（可选，向后兼容）\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistId?: string\n  therapistName: string\n  therapistAvatar?: string\n}\n\ninterface OrderConfirmPageParams {\n  // 模式1：新预约\n  therapistId?: string\n  storeId?: string\n  items?: string // JSON string of CartItem[]\n  from?: string  // 来源标识，如 'symptom'\n\n  // 模式2：已有订单\n  orderNo?: string  // 订单号\n}\n\ninterface ExistingOrder {\n  orderNo: string\n  amount: number  // 分为单位\n  title: string\n  paymentMethod: 'wechat' | 'balance'\n  paymentStatus: string\n  extraData?: {\n    therapistName?: string\n    therapistAvatar?: string\n    serviceName?: string\n    appointmentDate?: string\n    startTime?: string\n    duration?: number\n    storeId?: string\n    storeName?: string\n    storeAddress?: string\n  }\n}\n\nconst OrderConfirmPage: React.FC = () => {\n  const router = useRouter()\n  const params = router.params as unknown as OrderConfirmPageParams\n\n  // ✅ 判断模式：新预约 vs 已有订单\n  const isExistingOrderMode = !!params.orderNo\n  const isNewAppointmentMode = !isExistingOrderMode\n\n  const [cartItems, setCartItems] = useState<CartItem[]>([])\n  const [therapistInfo, setTherapistInfo] = useState<any>(null)\n  const [storeInfo, setStoreInfo] = useState<any>(null)\n  const [existingOrder, setExistingOrder] = useState<ExistingOrder | null>(null)  // ✅ 新增：已有订单\n  const [loading, setLoading] = useState(true)\n  const [countdown, setCountdown] = useState(180) // 3分钟倒计时\n  const [paymentMethod, setPaymentMethod] = useState<'wechat' | 'balance'>('wechat')\n  const [userBalance, setUserBalance] = useState(0) // 用户余额\n  const [balanceLoading, setBalanceLoading] = useState(false)\n  const [userDiscountRate, setUserDiscountRate] = useState<number | null>(null) // 用户折扣率\n  const [hasVoucher, setHasVoucher] = useState(false) // 是否有优惠券\n  const timerRef = useRef<any>(null)\n\n  useEffect(() => {\n    // ✅ 在支付前检查登录状态\n    const initializePage = async () => {\n      try {\n        // 先检查用户登录状态\n        const isLoggedIn = await requireLogin()\n        if (!isLoggedIn) {\n          return\n        }\n\n        // ✅ 区分模式初始化\n        if (isExistingOrderMode) {\n          // 模式2：已有订单 - 加载订单详情\n          fetchExistingOrder()\n        } else {\n          // 模式1：新预约 - 解析购物车数据\n          const items = JSON.parse(decodeURIComponent(params.items || '[]'))\n          setCartItems(items)\n          fetchTherapistAndStoreInfo()\n        }\n\n        // 两个模式都需要获取用户余额和折扣\n        fetchUserBalance()\n        fetchUserDiscount()\n      } catch (error) {\n        Taro.showToast({\n          title: '数据加载失败',\n          icon: 'none'\n        })\n        setTimeout(() => Taro.navigateBack(), 1500)\n      }\n    }\n\n    initializePage()\n  }, [params])\n\n  // 倒计时逻辑（仅新预约模式需要）\n  useEffect(() => {\n    // ✅ 已有订单模式不需要倒计时\n    if (!loading && isNewAppointmentMode && cartItems.length > 0) {\n      timerRef.current = setInterval(() => {\n        setCountdown((prev) => {\n          if (prev <= 1) {\n            clearInterval(timerRef.current)\n            Taro.showModal({\n              title: '支付超时了呦',\n              content: '快快重新下单吧~',\n              showCancel: false,\n              success: () => {\n                Taro.navigateBack()\n              }\n            })\n            return 0\n          }\n          return prev - 1\n        })\n      }, 1000)\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n      }\n    }\n  }, [loading, cartItems, isNewAppointmentMode])\n\n  // 获取用户折扣信息\n  const fetchUserDiscount = async () => {\n    try {\n      const userInfo = getCurrentUserInfo()\n      if (userInfo && userInfo.discountRate) {\n        setUserDiscountRate(userInfo.discountRate)\n        // 检查是否有优惠券\n        const vouchers = await voucherService.getMyVouchers()\n        setHasVoucher(vouchers.length > 0)\n      }\n    } catch (error) {\n      console.error('获取用户折扣信息失败:', error)\n    }\n  }\n\n  // 获取用户余额\n  const fetchUserBalance = async () => {\n    try {\n      setBalanceLoading(true)\n      const balance = await walletService.getBalance()  // 返回分为单位\n      setUserBalance(balance / 100)  // ✅ 转换为元存储\n\n      // 如果余额充足，默认选择余额支付\n      // ✅ 两个都是元，直接比较\n      const totalPrice = getTotalPrice()  // 元\n      if (balance / 100 >= totalPrice) { // balance(元) >= totalPrice(元)\n        setPaymentMethod('balance')\n      }\n    } catch (error) {\n      console.error('获取余额失败:', error)\n      setUserBalance(0)\n    } finally {\n      setBalanceLoading(false)\n    }\n  }\n\n  // ✅ 新增：获取已有订单详情\n  const fetchExistingOrder = async () => {\n    try {\n      setLoading(true)\n      const order = await orderService.getOrderDetail(params.orderNo!)\n      setExistingOrder(order)\n\n      // 获取门店信息（如果订单中有storeId）\n      if (order.extraData?.storeId) {\n        try {\n          const storeRes = await storeService.getStoreDetail(order.extraData.storeId)\n          setStoreInfo(storeRes.data)\n        } catch (error) {\n          console.error('获取门店信息失败:', error)\n        }\n      }\n\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n      Taro.showToast({\n        title: '获取订单信息失败',\n        icon: 'none'\n      })\n      setTimeout(() => Taro.navigateBack(), 1500)\n    }\n  }\n\n  const fetchTherapistAndStoreInfo = async () => {\n    try {\n      setLoading(true)\n\n      // 获取推拿师信息（仅在有therapistId时获取）\n      if (params.therapistId) {\n        const therapistRes = await therapistService.getTherapistDetail(params.therapistId)\n        setTherapistInfo(therapistRes.data)\n      }\n\n      // 获取门店信息\n      const storeRes = await storeService.getStoreDetail(params.storeId!)\n      const storeData = storeRes.data\n\n      setStoreInfo(storeData)\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n      Taro.showToast({\n        title: '获取信息失败',\n        icon: 'none'\n      })\n    }\n  }\n\n  const formatCountdown = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n  }\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr)\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    return `${month.toString().padStart(2, '0')}月${day.toString().padStart(2, '0')}日`\n  }\n\n  const calculateEndTime = (time: string, duration: number) => {\n    const [hour, minute] = time.split(':').map(Number)\n    const endMinute = minute + duration\n    const endHour = hour + Math.floor(endMinute / 60)\n    const finalMinute = endMinute % 60\n    return `${endHour}:${finalMinute.toString().padStart(2, '0')}`\n  }\n\n  const getTotalPrice = () => {\n    // ✅ 已有订单模式：直接使用订单金额（转为元）\n    if (isExistingOrderMode && existingOrder) {\n      return existingOrder.amount / 100  // 订单金额是分，转为元\n    }\n\n    // 新预约模式：计算购物车总价\n    const originalTotal = cartItems.reduce((sum, item) => sum + item.price, 0)\n    // 如果有折扣率，计算折后价\n    if (userDiscountRate && userDiscountRate < 1) {\n      const discountInfo = calculateDiscountPrice(originalTotal, userDiscountRate)\n      return discountInfo.finalPrice\n    }\n    // 否则使用原价或已有的折扣价\n    return cartItems.reduce((sum, item) => sum + (item.discountPrice || item.price), 0)\n  }\n\n  // 获取原价（用于展示划线价）\n  const getOriginalPrice = () => {\n    // ✅ 已有订单模式：与总价相同（不显示划线价）\n    if (isExistingOrderMode && existingOrder) {\n      return existingOrder.amount / 100\n    }\n\n    // 新预约模式：计算原价\n    return cartItems.reduce((sum, item) => sum + item.price, 0)\n  }\n\n  // 获取节省金额\n  const getSavedAmount = () => {\n    const originalTotal = getOriginalPrice()\n    const finalTotal = getTotalPrice()\n    return originalTotal - finalTotal\n  }\n\n  // 获取折扣描述\n  const getDiscountDisplay = () => {\n    if (userDiscountRate && userDiscountRate < 1) {\n      const percentage = Math.round(userDiscountRate * 100)\n      return `${percentage}折`\n    }\n    return ''\n  }\n\n  // 检查余额是否充足\n  const isBalanceSufficient = () => {\n    const totalPrice = getTotalPrice()  // 元\n    return userBalance >= totalPrice   // 两个都是元，直接比较\n  }\n\n  // 处理支付方式切换\n  const handlePaymentMethodChange = (method: 'wechat' | 'balance') => {\n    if (method === 'balance' && !isBalanceSufficient()) {\n      Taro.showToast({\n        title: '余额不足，请充值或使用其他支付方式',\n        icon: 'none',\n        duration: 2000\n      })\n      return\n    }\n    setPaymentMethod(method)\n  }\n\n  const handlePayment = async () => {\n    // 余额支付前再次检查余额\n    if (paymentMethod === 'balance' && !isBalanceSufficient()) {\n      Taro.showToast({\n        title: '余额不足，请充值或使用其他支付方式',\n        icon: 'none',\n        duration: 2000\n      })\n      return\n    }\n\n    try {\n      // ✅ 区分两个模式\n      if (isExistingOrderMode) {\n        // 模式2：已有订单 - 直接支付\n        await handleExistingOrderPayment()\n      } else {\n        // 模式1：新预约 - 创建订单后支付\n        await handleNewAppointmentPayment()\n      }\n    } catch (error) {\n      console.error('❌ 支付流程错误:', error)\n      Taro.hideLoading()\n\n      const errorMessage = error.message || error.errMsg || '支付失败'\n      Taro.showModal({\n        title: '支付失败',\n        content: errorMessage,\n        showCancel: false,\n        confirmText: '知道了'\n      })\n    }\n  }\n\n  // ✅ 新增：处理已有订单的支付\n  const handleExistingOrderPayment = async () => {\n    if (!existingOrder) {\n      throw new Error('订单信息丢失')\n    }\n\n    Taro.showLoading({\n      title: '准备支付...'\n    })\n\n    try {\n      const orderNo = existingOrder.orderNo\n      const amount = existingOrder.amount  // 分为单位\n\n      // 根据支付方式处理\n      if (paymentMethod === 'wechat') {\n        // 获取微信支付参数\n        console.log('💳 获取微信支付参数，订单号:', orderNo)\n        const paymentParams = await orderService.getPaymentParams(orderNo)\n\n        console.log('💳 支付参数获取成功:', paymentParams)\n\n        if (!paymentParams) {\n          throw new Error('获取支付参数失败')\n        }\n\n        Taro.hideLoading()\n\n        // 调用统一支付接口\n        const paymentSuccess = await paymentService.pay({\n          orderNo: orderNo,\n          amount: amount,\n          paymentMethod: 'wechat',\n          title: existingOrder.title,\n          wxPayParams: paymentParams\n        } as any)\n\n        if (paymentSuccess) {\n          // 支付成功，跳转确认页\n          setTimeout(() => {\n            Taro.redirectTo({\n              url: `/pages/booking/success/index?orderNo=${orderNo}`\n            })\n          }, 1500)\n        }\n      } else {\n        // 余额支付 - 直接调用支付接口\n        console.log('💰 余额支付，订单号:', orderNo)\n\n        const paymentSuccess = await paymentService.pay({\n          orderNo: orderNo,\n          amount: amount,\n          paymentMethod: 'balance',\n          title: existingOrder.title\n        } as any)\n\n        Taro.hideLoading()\n\n        if (paymentSuccess) {\n          // 支付成功，更新余额并跳转确认页\n          await fetchUserBalance()\n\n          setTimeout(() => {\n            Taro.redirectTo({\n              url: `/pages/booking/success/index?orderNo=${orderNo}`\n            })\n          }, 1500)\n        }\n      }\n    } catch (error) {\n      Taro.hideLoading()\n      throw error\n    }\n  }\n\n  // ✅ 改造：处理新预约的支付（现有逻辑）\n  const handleNewAppointmentPayment = async () => {\n    // 症状调理模式下推拿师信息在cartItems中，不需要therapistInfo\n    const isSymptomMode = params.from === 'symptom'\n    const needTherapistInfo = !isSymptomMode && !therapistInfo\n\n    if (cartItems.length === 0 || needTherapistInfo || !storeInfo) {\n      throw new Error('订单信息不完整')\n    }\n\n    Taro.showLoading({\n      title: '创建订单...'\n    })\n\n    // 使用第一个购物项的信息（如果有多个服务，可以后续优化）\n    const firstItem = cartItems[0]\n\n    const orderParams: CreateOrderParams = {\n      therapistId: firstItem.therapistId || params.therapistId || 'symptom-mode',\n      storeId: params.storeId!,\n      serviceId: firstItem.serviceId,\n      serviceName: firstItem.serviceName,\n      duration: firstItem.duration,\n      price: firstItem.price,\n      discountPrice: firstItem.discountPrice,\n      appointmentDate: firstItem.date,\n      appointmentTime: firstItem.time,\n      therapistName: firstItem.therapistName,\n      therapistAvatar: firstItem.therapistAvatar || (therapistInfo?.avatar),\n      paymentMethod: paymentMethod  // ✅ 新增：传递用户选择的支付方式\n    }\n\n    // 创建订单\n    console.log('📝 创建订单，支付方式:', paymentMethod)\n    const result = await orderService.createAppointmentOrder(orderParams)\n    const order = result.order\n\n    Taro.hideLoading()\n\n    if (!order || !order.orderNo) {\n      throw new Error('订单创建失败，未返回订单号')\n    }\n\n    // 微信支付需要检查wxPayParams\n    if (paymentMethod === 'wechat') {\n      if (!order.wxPayParams) {\n        throw new Error('微信支付参数缺失，请检查用户登录状态或尝试余额支付')\n      }\n    }\n\n    // 调用统一支付接口\n    const paymentSuccess = await paymentService.pay({\n      orderNo: order.orderNo,\n      amount: (order.totalAmount || getTotalPrice()) * 100,\n      paymentMethod: paymentMethod,\n      title: `${firstItem.serviceName} - ${firstItem.therapistName}`,\n      wxPayParams: order.wxPayParams\n    } as any)\n\n    if (paymentSuccess) {\n      // 支付成功后更新余额显示\n      if (paymentMethod === 'balance') {\n        await fetchUserBalance()\n      }\n\n      setTimeout(() => {\n        Taro.redirectTo({\n          url: `/pages/booking/success/index?orderNo=${order.orderNo}`\n        })\n      }, 1500)\n    }\n  }\n\n  if (loading) {\n    return (\n      <View className=\"order-confirm-page\">\n        <View className=\"loading\">加载中...</View>\n      </View>\n    )\n  }\n\n  return (\n    <ScrollView className=\"order-confirm-page\" scrollY>\n      {/* 门店信息 */}\n      <View className=\"store-section\">\n        <Text className=\"store-name\">{storeInfo?.name}</Text>\n        <Text className=\"store-distance\">📍 {storeInfo?.distance}km</Text>\n      </View>\n\n      {/* 预约信息 */}\n      <View className=\"booking-info\">\n        {isExistingOrderMode && existingOrder ? (\n          // ✅ 已有订单显示方式\n          <View className=\"booking-item\">\n            {existingOrder.extraData?.therapistAvatar && (\n              <Image\n                className=\"therapist-avatar\"\n                src={existingOrder.extraData.therapistAvatar}\n              />\n            )}\n            <View className=\"booking-details\">\n              <View className=\"therapist-name\">{existingOrder.extraData?.therapistName || '推拿师'}</View>\n              <View className=\"service-time\">\n                {existingOrder.extraData?.appointmentDate && existingOrder.extraData?.startTime && (\n                  <>\n                    {formatDate(existingOrder.extraData.appointmentDate)} {existingOrder.extraData.startTime}\n                    {existingOrder.extraData.duration && (\n                      <> 至 {calculateEndTime(existingOrder.extraData.startTime, existingOrder.extraData.duration)}</>\n                    )}\n                  </>\n                )}\n              </View>\n              <View className=\"service-name\">{existingOrder.extraData?.serviceName || existingOrder.title}</View>\n            </View>\n            <View className=\"service-price\">¥{(existingOrder.amount / 100).toFixed(2)}</View>\n          </View>\n        ) : (\n          // 新预约显示方式\n          cartItems.map((item, index) => (\n            <View key={index} className=\"booking-item\">\n              <Image\n                className=\"therapist-avatar\"\n                src={item.therapistAvatar || therapistInfo?.avatar}\n              />\n              <View className=\"booking-details\">\n                <View className=\"therapist-name\">{item.therapistName}</View>\n                <View className=\"service-time\">\n                  {formatDate(item.date)} {item.time} 至 {calculateEndTime(item.time, item.duration)}\n                </View>\n                <View className=\"service-name\">{item.serviceName}</View>\n              </View>\n              <View className=\"service-price\">¥{item.discountPrice || item.price}</View>\n            </View>\n          ))\n        )}\n      </View>\n\n      {/* 退单说明 */}\n      <View className=\"refund-policy\">\n        <Text className=\"policy-title\">退单说明</Text>\n        <View className=\"policy-list\">\n          <View className=\"policy-item\">\n            • 下单15分钟内或距订单开始时间&gt;6小时退单，退100%\n          </View>\n          <View className=\"policy-item\">\n            • 距订单开始前&lt;6小时退单，退实付金额90%\n          </View>\n          <View className=\"policy-item\">\n            • 订单时间开始后退单，退实付金额80%\n          </View>\n        </View>\n      </View>\n\n      {/* 客户备注 */}\n      <View className=\"customer-note\">\n        <Text className=\"note-title\">客户备注</Text>\n        <Text className=\"note-hint\">您对茶水、房间、按摩服等是否有特殊需求，我们将提前为您做好准备</Text>\n      </View>\n\n      {/* 支付方式 */}\n      <View className=\"payment-section\">\n        <Text className=\"section-title\">支付方式</Text>\n        <View className=\"payment-methods\">\n          {/* 余额支付 */}\n          <View\n            className={`payment-method ${paymentMethod === 'balance' ? 'active' : ''} ${!isBalanceSufficient() ? 'disabled' : ''}`}\n            onClick={() => handlePaymentMethodChange('balance')}\n          >\n            <View className=\"method-info\">\n              <Text className=\"method-icon\">💰</Text>\n              <Text className=\"method-name\">余额支付</Text>\n              <Text className=\"balance-amount\">\n                {balanceLoading ? '加载中...' : `¥${userBalance.toFixed(2)}`}\n                {!isBalanceSufficient() && !balanceLoading && (\n                  <Text className=\"insufficient\"> (余额不足)</Text>\n                )}\n              </Text>\n            </View>\n            <View className={`check-icon ${paymentMethod === 'balance' ? 'checked' : ''}`} />\n          </View>\n\n          {/* 微信支付 */}\n          <View\n            className={`payment-method ${paymentMethod === 'wechat' ? 'active' : ''}`}\n            onClick={() => handlePaymentMethodChange('wechat')}\n          >\n            <View className=\"method-info\">\n              <Text className=\"method-icon\">💚</Text>\n              <Text className=\"method-name\">微信支付</Text>\n            </View>\n            <View className={`check-icon ${paymentMethod === 'wechat' ? 'checked' : ''}`} />\n          </View>\n        </View>\n      </View>\n\n      {/* 底部支付栏 */}\n      <View className=\"payment-bar\">\n        <View className=\"price-info\">\n          {userDiscountRate && userDiscountRate < 1 && getSavedAmount() > 0 ? (\n            <View className=\"price-with-discount\">\n              <View className=\"discount-info\">\n                <Text className=\"discount-tag\">{getDiscountDisplay()}</Text>\n                <Text className=\"saved-amount\">已优惠 ¥{getSavedAmount()}</Text>\n              </View>\n              <View className=\"price-display\">\n                <Text className=\"original-price\">¥{getOriginalPrice()}</Text>\n                <Text className=\"total-price\">¥{getTotalPrice()}</Text>\n              </View>\n            </View>\n          ) : (\n            <Text className=\"total-price\">¥{getTotalPrice()}</Text>\n          )}\n          {/* ✅ 仅新预约模式显示倒计时 */}\n          {isNewAppointmentMode && (\n            <Text className=\"countdown\">支付倒计时: {formatCountdown(countdown)}</Text>\n          )}\n        </View>\n        <View className=\"pay-button\" onClick={handlePayment}>\n          去支付\n        </View>\n      </View>\n    </ScrollView>\n  )\n}\n\nexport default OrderConfirmPage"],"names":["OrderConfirmPage","router","useRouter","params","isExistingOrderMode","orderNo","isNewAppointmentMode","cartItems","setCartItems","useState","therapistInfo","setTherapistInfo","storeInfo","setStoreInfo","existingOrder","setExistingOrder","loading","setLoading","countdown","setCountdown","paymentMethod","setPaymentMethod","userBalance","setUserBalance","balanceLoading","setBalanceLoading","userDiscountRate","setUserDiscountRate","hasVoucher","setHasVoucher","timerRef","useRef","useEffect","initializePage","isLoggedIn","requireLogin","items","JSON","parse","decodeURIComponent","error","Taro","showToast","title","icon","setTimeout","navigateBack","length","current","setInterval","prev","clearInterval","showModal","content","showCancel","success","fetchUserDiscount","userInfo","getCurrentUserInfo","discountRate","vouchers","voucherService","getMyVouchers","fetchUserBalance","balance","walletService","getBalance","totalPrice","getTotalPrice","fetchExistingOrder","order","orderService","getOrderDetail","extraData","storeId","storeRes","storeService","getStoreDetail","data","fetchTherapistAndStoreInfo","therapistId","therapistRes","therapistService","getTherapistDetail","storeData","formatCountdown","seconds","mins","Math","floor","secs","toString","padStart","formatDate","dateStr","date","Date","month","getMonth","day","getDate","calculateEndTime","time","duration","hour","minute","split","map","Number","endMinute","endHour","finalMinute","amount","originalTotal","reduce","sum","item","price","discountInfo","calculateDiscountPrice","finalPrice","discountPrice","getOriginalPrice","getSavedAmount","finalTotal","getDiscountDisplay","percentage","round","isBalanceSufficient","handlePaymentMethodChange","method","handlePayment","handleExistingOrderPayment","handleNewAppointmentPayment","hideLoading","errorMessage","message","errMsg","confirmText","Error","showLoading","log","paymentParams","getPaymentParams","paymentSuccess","paymentService","pay","wxPayParams","redirectTo","url","isSymptomMode","from","needTherapistInfo","firstItem","orderParams","serviceId","serviceName","appointmentDate","appointmentTime","therapistName","therapistAvatar","avatar","result","createAppointmentOrder","totalAmount","jsx","View","jsxs","ScrollView","Text","name","distance","Image","startTime","Fragment","toFixed","index"],"mappings":"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"}