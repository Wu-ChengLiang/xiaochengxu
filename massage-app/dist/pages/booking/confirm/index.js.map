{"version":3,"file":"index.js","sources":["../../../../src/services/payment.service.ts","../../../../src/pages/booking/confirm/index.tsx"],"sourcesContent":["/**\n * 支付服务\n * 支持模拟支付和余额支付（个人小程序可用）\n */\nimport Taro from '@tarojs/taro'\nimport { post } from '@/utils/request'\n\ninterface PaymentConfig {\n  useMockPayment: boolean\n  enableBalancePayment: boolean\n  enableWechatPayment: boolean\n}\n\ninterface PaymentOptions {\n  orderNo: string\n  amount: number\n  paymentMethod: 'wechat' | 'balance' | 'mock'\n  title?: string\n}\n\nclass PaymentService {\n  private config: PaymentConfig = {\n    // 个人小程序默认配置\n    useMockPayment: true,\n    enableBalancePayment: true,\n    enableWechatPayment: false\n  }\n\n  /**\n   * 统一支付入口\n   */\n  async pay(options: PaymentOptions): Promise<boolean> {\n    const { paymentMethod } = options\n\n    // 开发环境或个人小程序使用模拟支付\n    if (this.config.useMockPayment && paymentMethod === 'wechat') {\n      return this.mockWechatPayment(options)\n    }\n\n    // 余额支付\n    if (paymentMethod === 'balance') {\n      return this.payWithBalance(options)\n    }\n\n    // 真实微信支付（需要企业认证）\n    if (paymentMethod === 'wechat' && this.config.enableWechatPayment) {\n      return this.payWithWechat(options)\n    }\n\n    throw new Error('不支持的支付方式')\n  }\n\n  /**\n   * 模拟微信支付（个人小程序测试用）\n   */\n  private async mockWechatPayment(options: PaymentOptions): Promise<boolean> {\n    try {\n      // 显示模拟支付界面\n      const { confirm } = await Taro.showModal({\n        title: '模拟支付',\n        content: `订单金额：¥${(options.amount / 100).toFixed(2)}\\n${options.title || ''}`,\n        confirmText: '确认支付',\n        cancelText: '取消支付',\n        confirmColor: '#07c160'\n      })\n\n      if (confirm) {\n        // 显示加载动画\n        Taro.showLoading({ title: '支付中...' })\n\n        // 模拟网络延迟\n        await this.delay(1500)\n\n        // 调用后端更新订单状态\n        await post('/orders/mock-pay', {\n          orderNo: options.orderNo,\n          paymentStatus: 'paid'\n        })\n\n        Taro.hideLoading()\n        Taro.showToast({\n          title: '支付成功',\n          icon: 'success'\n        })\n\n        return true\n      } else {\n        console.log('用户取消模拟支付')\n        return false\n      }\n    } catch (error) {\n      Taro.hideLoading()\n      Taro.showToast({\n        title: '支付失败',\n        icon: 'none'\n      })\n      throw error\n    }\n  }\n\n  /**\n   * 余额支付\n   */\n  private async payWithBalance(options: PaymentOptions): Promise<boolean> {\n    try {\n      Taro.showLoading({ title: '支付中...' })\n\n      console.log('💰 余额支付请求参数:', {\n        orderNo: options.orderNo,\n        paymentMethod: 'balance'\n      })\n\n      // 调用余额支付接口\n      const response = await post('/orders/pay', {\n        orderNo: options.orderNo,\n        paymentMethod: 'balance'\n      })\n\n      console.log('💰 余额支付响应:', response)\n\n      Taro.hideLoading()\n\n      if (response.code === 0) {\n        // 显示新余额\n        Taro.showToast({\n          title: `支付成功\\n余额：¥${(response.data.balance / 100).toFixed(2)}`,\n          icon: 'success',\n          duration: 2000\n        })\n        return true\n      } else {\n        throw new Error(response.message || '余额不足')\n      }\n    } catch (error: any) {\n      console.error('💰 余额支付失败:', error)\n      console.error('💰 错误详情:', error.response || error.message)\n      Taro.hideLoading()\n      Taro.showToast({\n        title: error.message || '支付失败',\n        icon: 'none'\n      })\n      return false\n    }\n  }\n\n  /**\n   * 真实微信支付（需要企业认证）\n   */\n  private async payWithWechat(options: PaymentOptions): Promise<boolean> {\n    try {\n      // 获取支付参数\n      const { data } = await post('/orders/wechat-pay-params', {\n        orderNo: options.orderNo\n      })\n\n      const { wxPayParams } = data\n\n      // 调起微信支付\n      await Taro.requestPayment({\n        timeStamp: wxPayParams.timeStamp,\n        nonceStr: wxPayParams.nonceStr,\n        package: wxPayParams.package,\n        signType: wxPayParams.signType as any,\n        paySign: wxPayParams.paySign\n      })\n\n      Taro.showToast({\n        title: '支付成功',\n        icon: 'success'\n      })\n\n      return true\n    } catch (error: any) {\n      if (error.errMsg === 'requestPayment:fail cancel') {\n        console.log('用户取消支付')\n        return false\n      }\n\n      Taro.showToast({\n        title: '支付失败',\n        icon: 'none'\n      })\n      throw error\n    }\n  }\n\n  /**\n   * 检查支付环境\n   */\n  async checkPaymentEnvironment(): Promise<{\n    canUseWechatPay: boolean\n    canUseBalance: boolean\n    canUseMockPay: boolean\n    message: string\n  }> {\n    // 获取小程序账号信息\n    const accountInfo = Taro.getAccountInfoSync()\n    const { miniProgram } = accountInfo\n\n    // 个人小程序的AppID通常以wx开头的个人类型\n    const isPersonalApp = !this.config.enableWechatPayment\n\n    return {\n      canUseWechatPay: !isPersonalApp && this.config.enableWechatPayment,\n      canUseBalance: this.config.enableBalancePayment,\n      canUseMockPay: this.config.useMockPayment,\n      message: isPersonalApp\n        ? '当前为个人小程序，使用模拟支付和余额支付'\n        : '企业小程序，支持完整支付功能'\n    }\n  }\n\n  /**\n   * 生成充值码（线下充值）\n   */\n  async generateRechargeCode(amount: number): Promise<{\n    code: string\n    qrcode: string\n    expireTime: string\n  }> {\n    const response = await post('/recharge/generate-code', { amount })\n    return response.data\n  }\n\n  /**\n   * 辅助方法：延迟\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n}\n\n// 导出单例\nexport const paymentService = new PaymentService()\n\n// 导出支付方式枚举\nexport enum PaymentMethod {\n  WECHAT = 'wechat',\n  BALANCE = 'balance',\n  MOCK = 'mock'\n}","import React, { useState, useEffect, useRef } from 'react'\nimport { View, Text, Image, ScrollView } from '@tarojs/components'\nimport Taro, { useRouter } from '@tarojs/taro'\nimport { orderService, CreateOrderParams } from '@/services/order'\nimport { storeService } from '@/services/store'\nimport { therapistService } from '@/services/therapist'\nimport { walletService } from '@/services/wallet.service'\nimport { paymentService } from '@/services/payment.service'\nimport './index.scss'\n\ninterface CartItem {\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistId?: string\n  therapistName: string\n  therapistAvatar?: string\n}\n\ninterface OrderConfirmPageParams {\n  therapistId?: string\n  storeId: string\n  items: string // JSON string of CartItem[]\n  from?: string  // 来源标识，如 'symptom'\n}\n\nconst OrderConfirmPage: React.FC = () => {\n  const router = useRouter()\n  const params = router.params as unknown as OrderConfirmPageParams\n  \n  const [cartItems, setCartItems] = useState<CartItem[]>([])\n  const [therapistInfo, setTherapistInfo] = useState<any>(null)\n  const [storeInfo, setStoreInfo] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [countdown, setCountdown] = useState(180) // 3分钟倒计时\n  const [paymentMethod, setPaymentMethod] = useState<'wechat' | 'balance'>('wechat')\n  const [userBalance, setUserBalance] = useState(0) // 用户余额\n  const [balanceLoading, setBalanceLoading] = useState(false)\n  const timerRef = useRef<any>(null)\n\n  useEffect(() => {\n    // 解析传递的数据\n    try {\n      const items = JSON.parse(decodeURIComponent(params.items || '[]'))\n      setCartItems(items)\n\n      // 获取推拿师和门店信息\n      fetchTherapistAndStoreInfo()\n      // 获取用户余额\n      fetchUserBalance()\n    } catch (error) {\n      Taro.showToast({\n        title: '数据解析失败',\n        icon: 'none'\n      })\n      setTimeout(() => Taro.navigateBack(), 1500)\n    }\n  }, [params])\n\n  // 倒计时逻辑\n  useEffect(() => {\n    if (!loading && cartItems.length > 0) {\n      timerRef.current = setInterval(() => {\n        setCountdown((prev) => {\n          if (prev <= 1) {\n            clearInterval(timerRef.current)\n            Taro.showModal({\n              title: '支付超时了呦',\n              content: '快快重新下单吧~',\n              showCancel: false,\n              success: () => {\n                Taro.navigateBack()\n              }\n            })\n            return 0\n          }\n          return prev - 1\n        })\n      }, 1000)\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n      }\n    }\n  }, [loading, cartItems])\n\n  // 获取用户余额\n  const fetchUserBalance = async () => {\n    try {\n      setBalanceLoading(true)\n      const balance = await walletService.getBalance()\n      setUserBalance(balance)\n\n      // 如果余额充足，默认选择余额支付\n      const totalPrice = getTotalPrice()\n      if (balance >= totalPrice / 100) { // 转换为元比较\n        setPaymentMethod('balance')\n      }\n    } catch (error) {\n      console.error('获取余额失败:', error)\n      setUserBalance(0)\n    } finally {\n      setBalanceLoading(false)\n    }\n  }\n\n  const fetchTherapistAndStoreInfo = async () => {\n    try {\n      setLoading(true)\n\n      // 获取推拿师信息（仅在有therapistId时获取）\n      if (params.therapistId) {\n        const therapistRes = await therapistService.getTherapistDetail(params.therapistId)\n        setTherapistInfo(therapistRes.data)\n      }\n\n      // 获取门店信息\n      const storeRes = await storeService.getStoreDetail(params.storeId)\n      const storeData = storeRes.data\n\n      setStoreInfo(storeData)\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n      Taro.showToast({\n        title: '获取信息失败',\n        icon: 'none'\n      })\n    }\n  }\n\n  const formatCountdown = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n  }\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr)\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    return `${month.toString().padStart(2, '0')}月${day.toString().padStart(2, '0')}日`\n  }\n\n  const calculateEndTime = (time: string, duration: number) => {\n    const [hour, minute] = time.split(':').map(Number)\n    const endMinute = minute + duration\n    const endHour = hour + Math.floor(endMinute / 60)\n    const finalMinute = endMinute % 60\n    return `${endHour}:${finalMinute.toString().padStart(2, '0')}`\n  }\n\n  const getTotalPrice = () => {\n    return cartItems.reduce((sum, item) => sum + (item.discountPrice || item.price), 0)\n  }\n\n  // 检查余额是否充足\n  const isBalanceSufficient = () => {\n    const totalPrice = getTotalPrice()\n    return userBalance >= totalPrice / 100 // 转换为元比较\n  }\n\n  // 处理支付方式切换\n  const handlePaymentMethodChange = (method: 'wechat' | 'balance') => {\n    if (method === 'balance' && !isBalanceSufficient()) {\n      Taro.showToast({\n        title: '余额不足，请充值或使用其他支付方式',\n        icon: 'none',\n        duration: 2000\n      })\n      return\n    }\n    setPaymentMethod(method)\n  }\n\n  const handlePayment = async () => {\n    // 症状调理模式下推拿师信息在cartItems中，不需要therapistInfo\n    const isSymptomMode = params.from === 'symptom'\n    const needTherapistInfo = !isSymptomMode && !therapistInfo\n\n    if (cartItems.length === 0 || needTherapistInfo || !storeInfo) {\n      Taro.showToast({\n        title: '订单信息不完整',\n        icon: 'none'\n      })\n      return\n    }\n\n    // 余额支付前再次检查余额\n    if (paymentMethod === 'balance' && !isBalanceSufficient()) {\n      Taro.showToast({\n        title: '余额不足，请充值或使用其他支付方式',\n        icon: 'none',\n        duration: 2000\n      })\n      return\n    }\n\n    try {\n      Taro.showLoading({\n        title: '创建订单...'\n      })\n\n      // 使用第一个购物项的信息（如果有多个服务，可以后续优化）\n      const firstItem = cartItems[0]\n\n      // 调试日志 - 查看购物车项目数据\n      console.log('🛒 购物车第一个项目:', firstItem)\n      console.log('🛒 firstItem.therapistId:', firstItem.therapistId)\n      console.log('🛒 params.therapistId:', params.therapistId)\n      console.log('🛒 params.from:', params.from)\n\n      const orderParams: CreateOrderParams = {\n        therapistId: firstItem.therapistId || params.therapistId || 'symptom-mode', // 优先使用购物车中的技师ID\n        storeId: params.storeId,\n        serviceId: firstItem.serviceId,\n        serviceName: firstItem.serviceName,\n        duration: firstItem.duration,\n        price: firstItem.price,\n        discountPrice: firstItem.discountPrice,\n        appointmentDate: firstItem.date,\n        appointmentTime: firstItem.time,\n        therapistName: firstItem.therapistName,\n        therapistAvatar: firstItem.therapistAvatar || (therapistInfo?.avatar)\n      }\n\n      // 调试日志 - 查看最终的订单参数\n      console.log('📦 最终的订单参数:', orderParams)\n      console.log('📦 therapistId将要传递的值:', orderParams.therapistId)\n\n      // 创建订单\n      const result = await orderService.createAppointmentOrder(orderParams)\n      const order = result.order\n\n      console.log('✅ 订单创建成功:', result)\n      console.log('✅ 订单号:', order.orderNo)\n\n      Taro.hideLoading()\n\n      // 根据支付方式调用不同的支付方法\n      const paymentSuccess = await paymentService.pay({\n        orderNo: order.orderNo,\n        amount: order.totalAmount ? order.totalAmount * 100 : getTotalPrice() * 100, // 转换为分\n        paymentMethod: paymentMethod,\n        title: `${firstItem.serviceName} - ${firstItem.therapistName}`\n      })\n\n      if (paymentSuccess) {\n        // 支付成功后更新余额显示\n        if (paymentMethod === 'balance') {\n          await fetchUserBalance()\n        }\n\n        setTimeout(() => {\n          Taro.redirectTo({\n            url: `/pages/booking/success/index?orderNo=${order.orderNo}`\n          })\n        }, 1500)\n      } else {\n        // 生产环境调用真实支付\n        Taro.requestPayment({\n          ...paymentParams,\n          success: async () => {\n            // 更新订单状态为已支付\n            await orderService.updateOrderStatus(order.orderNo, 'paid')\n            \n            Taro.showToast({\n              title: '支付成功',\n              icon: 'success',\n              duration: 1500\n            })\n            \n            setTimeout(() => {\n              Taro.redirectTo({\n                url: `/pages/booking/success/index?orderNo=${order.orderNo}`\n              })\n            }, 1500)\n          },\n          fail: (err) => {\n            console.error('支付失败:', err)\n            if (err.errMsg !== 'requestPayment:fail cancel') {\n              // 如果是缺少total_fee的错误，给出更明确的提示\n              if (err.errMsg && err.errMsg.includes('total_fee')) {\n                Taro.showToast({\n                  title: '支付参数错误：缺少金额信息',\n                  icon: 'none',\n                  duration: 2500\n                })\n              } else {\n                Taro.showToast({\n                  title: '支付失败',\n                  icon: 'none'\n                })\n              }\n            }\n          }\n        })\n      }\n    } catch (error) {\n      Taro.hideLoading()\n      Taro.showToast({\n        title: error.message || '订单创建失败',\n        icon: 'none'\n      })\n    }\n  }\n\n  if (loading) {\n    return (\n      <View className=\"order-confirm-page\">\n        <View className=\"loading\">加载中...</View>\n      </View>\n    )\n  }\n\n  return (\n    <ScrollView className=\"order-confirm-page\" scrollY>\n      {/* 门店信息 */}\n      <View className=\"store-section\">\n        <Text className=\"store-name\">{storeInfo?.name}</Text>\n        <Text className=\"store-distance\">📍 {storeInfo?.distance}km</Text>\n      </View>\n\n      {/* 预约信息 */}\n      <View className=\"booking-info\">\n        {cartItems.map((item, index) => (\n          <View key={index} className=\"booking-item\">\n            <Image \n              className=\"therapist-avatar\" \n              src={item.therapistAvatar || therapistInfo?.avatar} \n            />\n            <View className=\"booking-details\">\n              <View className=\"therapist-name\">{item.therapistName}</View>\n              <View className=\"service-time\">\n                {formatDate(item.date)} {item.time} 至 {calculateEndTime(item.time, item.duration)}\n              </View>\n              <View className=\"service-name\">{item.serviceName}</View>\n            </View>\n            <View className=\"service-price\">¥{item.discountPrice || item.price}</View>\n          </View>\n        ))}\n      </View>\n\n      {/* 退单说明 */}\n      <View className=\"refund-policy\">\n        <Text className=\"policy-title\">退单说明</Text>\n        <View className=\"policy-list\">\n          <View className=\"policy-item\">\n            • 下单15分钟内或距订单开始时间&gt;6小时退单，退100%\n          </View>\n          <View className=\"policy-item\">\n            • 距订单开始前&lt;6小时退单，退实付金额90%\n          </View>\n          <View className=\"policy-item\">\n            • 订单时间开始后退单，退实付金额80%\n          </View>\n        </View>\n      </View>\n\n      {/* 客户备注 */}\n      <View className=\"customer-note\">\n        <Text className=\"note-title\">客户备注</Text>\n        <Text className=\"note-hint\">您对茶水、房间、按摩服等是否有特殊需求，我们将提前为您做好准备</Text>\n      </View>\n\n      {/* 支付方式 */}\n      <View className=\"payment-section\">\n        <Text className=\"section-title\">支付方式</Text>\n        <View className=\"payment-methods\">\n          {/* 余额支付 */}\n          <View\n            className={`payment-method ${paymentMethod === 'balance' ? 'active' : ''} ${!isBalanceSufficient() ? 'disabled' : ''}`}\n            onClick={() => handlePaymentMethodChange('balance')}\n          >\n            <View className=\"method-info\">\n              <Text className=\"method-icon\">💰</Text>\n              <Text className=\"method-name\">余额支付</Text>\n              <Text className=\"balance-amount\">\n                {balanceLoading ? '加载中...' : `¥${userBalance.toFixed(2)}`}\n                {!isBalanceSufficient() && !balanceLoading && (\n                  <Text className=\"insufficient\"> (余额不足)</Text>\n                )}\n              </Text>\n            </View>\n            <View className={`check-icon ${paymentMethod === 'balance' ? 'checked' : ''}`} />\n          </View>\n\n          {/* 微信支付 */}\n          <View\n            className={`payment-method ${paymentMethod === 'wechat' ? 'active' : ''}`}\n            onClick={() => handlePaymentMethodChange('wechat')}\n          >\n            <View className=\"method-info\">\n              <Text className=\"method-icon\">💚</Text>\n              <Text className=\"method-name\">微信支付</Text>\n            </View>\n            <View className={`check-icon ${paymentMethod === 'wechat' ? 'checked' : ''}`} />\n          </View>\n        </View>\n      </View>\n\n      {/* 底部支付栏 */}\n      <View className=\"payment-bar\">\n        <View className=\"price-info\">\n          <Text className=\"total-price\">¥ {getTotalPrice()}</Text>\n          <Text className=\"countdown\">支付倒计时: {formatCountdown(countdown)}</Text>\n        </View>\n        <View className=\"pay-button\" onClick={handlePayment}>\n          去支付\n        </View>\n      </View>\n    </ScrollView>\n  )\n}\n\nexport default OrderConfirmPage"],"names":["PaymentService","constructor","config","useMockPayment","enableBalancePayment","enableWechatPayment","pay","options","paymentMethod","mockWechatPayment","payWithBalance","payWithWechat","Error","confirm","Taro","showModal","title","content","amount","toFixed","confirmText","cancelText","confirmColor","showLoading","delay","post","orderNo","paymentStatus","hideLoading","showToast","icon","console","log","error","response","code","data","balance","duration","message","wxPayParams","requestPayment","timeStamp","nonceStr","package","signType","paySign","errMsg","checkPaymentEnvironment","getAccountInfoSync","isPersonalApp","canUseWechatPay","canUseBalance","canUseMockPay","generateRechargeCode","ms","Promise","resolve","setTimeout","paymentService","OrderConfirmPage","router","useRouter","params","cartItems","setCartItems","useState","therapistInfo","setTherapistInfo","storeInfo","setStoreInfo","loading","setLoading","countdown","setCountdown","setPaymentMethod","userBalance","setUserBalance","balanceLoading","setBalanceLoading","timerRef","useRef","useEffect","items","JSON","parse","decodeURIComponent","navigateBack","length","current","setInterval","prev","clearInterval","showCancel","success","fetchUserBalance","walletService","getBalance","totalPrice","getTotalPrice","fetchTherapistAndStoreInfo","therapistId","therapistRes","therapistService","getTherapistDetail","storeRes","storeService","getStoreDetail","storeId","storeData","formatCountdown","seconds","mins","Math","floor","secs","toString","padStart","formatDate","dateStr","date","Date","month","getMonth","day","getDate","calculateEndTime","time","hour","minute","split","map","Number","endMinute","endHour","finalMinute","reduce","sum","item","discountPrice","price","isBalanceSufficient","handlePaymentMethodChange","method","handlePayment","isSymptomMode","from","needTherapistInfo","firstItem","orderParams","serviceId","serviceName","appointmentDate","appointmentTime","therapistName","therapistAvatar","avatar","result","orderService","createAppointmentOrder","order","paymentSuccess","totalAmount","redirectTo","url","paymentParams","updateOrderStatus","fail","err","includes","jsx","View","jsxs","ScrollView","Text","name","distance","index","Image"],"mappings":"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"}