{"version":3,"file":"index.js","sources":["../../../../src/pages/appointment/therapist/components/TherapistInfo/index.tsx","../../../../src/pages/appointment/therapist/components/StoreInfo/index.tsx","../../../../src/pages/appointment/therapist/components/BookingSelector/index.tsx","../../../../src/pages/appointment/therapist/components/ShoppingCart/index.tsx","../../../../src/pages/appointment/therapist/index.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { View, Text, Image } from '@tarojs/components'\nimport type { Therapist } from '@/types'\nimport './index.scss'\n\ninterface TherapistInfoProps {\n  therapist: Therapist\n}\n\nconst TherapistInfo: React.FC<TherapistInfoProps> = ({ therapist }) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  \n  // 模拟扩展的推拿师信息（实际应该从 therapist 对象获取）\n  const therapistDetail = {\n    level: 'LV4',\n    rating: therapist.rating || 5,\n    salesCount: therapist.serviceCount || 10109,\n    description: '毕业于成都中医药大学针灸推拿专业。高级康复师 从业18年，专研身体疼痛、运动康复、产后康复、体态调理、经络疏通、美容养生等',\n    ...therapist\n  }\n\n  const toggleExpanded = () => {\n    setIsExpanded(!isExpanded)\n  }\n\n  return (\n    <View className=\"therapist-info\">\n      <View className=\"therapist-header\">\n        <View className=\"avatar-wrapper\">\n          <Image\n            className=\"avatar\"\n            src={therapist.avatar}\n            mode=\"aspectFill\"\n          />\n        </View>\n        \n        <View className=\"basic-info\">\n          <View className=\"name-row\">\n            <Text className=\"name\">{therapist.name}</Text>\n            <View className=\"level\">{therapistDetail.level}</View>\n          </View>\n          \n          <View className=\"stats-row\">\n            <View className=\"rating\">\n              <Text className=\"rating-score\">{therapistDetail.rating}分</Text>\n            </View>\n            <View className=\"divider\">|</View>\n            <View className=\"sales\">\n              <Text className=\"sales-text\">销量{therapistDetail.salesCount}单</Text>\n            </View>\n          </View>\n        </View>\n      </View>\n      \n      <View className=\"description-section\">\n        <Text className={`description ${isExpanded ? 'expanded' : 'collapsed'}`}>\n          {therapistDetail.description}\n        </Text>\n        \n        <View className=\"expand-toggle\" onClick={toggleExpanded}>\n          <Text className=\"expand-text\">{isExpanded ? '收起' : '展开'}</Text>\n          <Text className={`expand-icon ${isExpanded ? 'up' : 'down'}`}>\n            {isExpanded ? '▲' : '▼'}\n          </Text>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default TherapistInfo","import React from 'react'\nimport Taro from '@tarojs/taro'\nimport { View, Text } from '@tarojs/components'\nimport type { Store } from '@/types'\nimport './index.scss'\n\ninterface StoreInfoProps {\n  store: Store\n}\n\nconst StoreInfo: React.FC<StoreInfoProps> = ({ store }) => {\n  const getStatusText = (status: Store['status']) => {\n    switch (status) {\n      case 'normal':\n        return '就近'\n      case 'busy':\n        return '繁忙'\n      case 'full':\n        return '爆满'\n      default:\n        return ''\n    }\n  }\n\n  const getStatusClass = (status: Store['status']) => {\n    switch (status) {\n      case 'normal':\n        return 'status-normal'\n      case 'busy':\n        return 'status-busy'\n      case 'full':\n        return 'status-full'\n      default:\n        return ''\n    }\n  }\n\n  const handleCallStore = () => {\n    if (store.phone) {\n      Taro.makePhoneCall({\n        phoneNumber: store.phone\n      })\n    }\n  }\n\n  const handleShowLocation = () => {\n    if (store.location) {\n      Taro.openLocation({\n        latitude: store.location.latitude,\n        longitude: store.location.longitude,\n        name: store.name,\n        address: store.address\n      })\n    }\n  }\n\n  return (\n    <View className=\"store-info\">\n      <View className=\"store-header\">\n        <View className=\"store-details\">\n          <View className=\"name-row\">\n            <Text className=\"store-name\">{store.name}</Text>\n            <Text className=\"distance\">{store.distance || 9.0}km</Text>\n          </View>\n          \n          <View className=\"hours-row\">\n            <Text className=\"business-hours\">\n              {store.businessHours ? `${store.businessHours.start}-${store.businessHours.end}` : '营业时间未知'}\n            </Text>\n            <View className={`status ${getStatusClass(store.status)}`}>\n              {getStatusText(store.status)}\n            </View>\n          </View>\n          \n          <Text className=\"address\">{store.address || '地址未知'} (电影院门口)</Text>\n        </View>\n        \n        <View className=\"action-buttons\">\n          <View className=\"action-btn\" onClick={handleCallStore}>\n            📞\n          </View>\n          <View className=\"action-btn\" onClick={handleShowLocation}>\n            📍\n          </View>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default StoreInfo","import React, { useState, useImperativeHandle, forwardRef } from 'react'\nimport { View, Text, ScrollView } from '@tarojs/components'\nimport './index.scss'\n\ninterface Service {\n  id: string\n  name: string\n  duration: number\n  price: number\n  discountPrice?: number\n}\n\ninterface TimeSlot {\n  time: string\n  available: boolean\n}\n\ninterface BookingSelectorProps {\n  services: Service[]\n  onServiceSelect: (service: Service) => void\n  onTimeSelect: (date: string, time: string) => void\n}\n\nexport interface BookingSelectorHandle {\n  clearSelectedTime: () => void\n}\n\nconst BookingSelector = forwardRef<BookingSelectorHandle, BookingSelectorProps>(({ \n  services, \n  onServiceSelect, \n  onTimeSelect \n}, ref) => {\n  const [selectedServiceId, setSelectedServiceId] = useState<string>('')\n  const [selectedDate, setSelectedDate] = useState<string>('')\n  const [selectedTime, setSelectedTime] = useState<string>('')\n  \n  // 暴露方法给父组件\n  useImperativeHandle(ref, () => ({\n    clearSelectedTime: () => {\n      setSelectedDate('')\n      setSelectedTime('')\n    }\n  }))\n\n  // 生成日期列表（今天+接下来4天）\n  const generateDateList = () => {\n    const dates = []\n    const today = new Date()\n    \n    for (let i = 0; i < 5; i++) {\n      const date = new Date(today)\n      date.setDate(today.getDate() + i)\n      \n      const month = date.getMonth() + 1\n      const day = date.getDate()\n      const weekDays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n      const weekDay = weekDays[date.getDay()]\n      \n      dates.push({\n        key: date.toISOString().split('T')[0],\n        display: i === 0 ? '今天' : `${month}月${day}日`,\n        weekDay: i === 0 ? '' : weekDay\n      })\n    }\n    \n    return dates\n  }\n\n  // 生成时间段列表（9:00-21:00，每小时一个时段）\n  const generateTimeSlots = (): TimeSlot[] => {\n    const slots: TimeSlot[] = []\n    \n    for (let hour = 9; hour <= 21; hour++) {\n      const time = `${hour.toString().padStart(2, '0')}:00`\n      // 模拟可用性（实际应该从后端获取）\n      const available = Math.random() > 0.3 // 70%的时段可用\n      \n      slots.push({\n        time,\n        available\n      })\n    }\n    \n    return slots\n  }\n\n  const handleServiceSelect = (service: Service) => {\n    setSelectedServiceId(service.id)\n    onServiceSelect(service)\n  }\n\n  const handleDateSelect = (dateKey: string) => {\n    setSelectedDate(dateKey)\n    // 重置时间选择\n    setSelectedTime('')\n  }\n\n  const handleTimeSelect = (time: string, available: boolean) => {\n    if (!available || !selectedDate) return\n    \n    setSelectedTime(time)\n    onTimeSelect(selectedDate, time)\n  }\n\n  const dateList = generateDateList()\n  const timeSlots = generateTimeSlots()\n\n  return (\n    <View className=\"booking-selector\">\n      {/* 服务选择 */}\n      <View className=\"service-section\">\n        <View className=\"section-title\">选择服务</View>\n        <ScrollView className=\"service-tabs\" scrollX>\n          {services.map(service => (\n            <View\n              key={service.id}\n              className={`service-tab ${selectedServiceId === service.id ? 'active' : ''}`}\n              onClick={() => handleServiceSelect(service)}\n            >\n              <Text className=\"service-name\">{service.name}</Text>\n              <View className=\"service-price\">\n                {service.discountPrice ? (\n                  <>\n                    <Text className=\"discount-price\">¥{service.discountPrice}</Text>\n                    <Text className=\"original-price\">¥{service.price}</Text>\n                  </>\n                ) : (\n                  <Text className=\"price\">¥{service.price}</Text>\n                )}\n              </View>\n              <Text className=\"service-duration\">{service.duration}分钟</Text>\n            </View>\n          ))}\n        </ScrollView>\n      </View>\n\n      {/* 日期时间选择 */}\n      {selectedServiceId && (\n        <View className=\"datetime-section\">\n          <View className=\"section-title\">选择时间</View>\n          \n          {/* 日期选择 */}\n          <ScrollView className=\"date-tabs\" scrollX>\n            {dateList.map(date => (\n              <View\n                key={date.key}\n                className={`date-tab ${selectedDate === date.key ? 'active' : ''}`}\n                onClick={() => handleDateSelect(date.key)}\n              >\n                <Text className=\"date-display\">{date.display}</Text>\n                {date.weekDay && <Text className=\"week-day\">{date.weekDay}</Text>}\n              </View>\n            ))}\n          </ScrollView>\n\n          {/* 时间段选择 */}\n          {selectedDate && (\n            <View className=\"time-grid\">\n              {timeSlots.map((slot, index) => (\n                <View\n                  key={index}\n                  className={`time-slot ${\n                    slot.available \n                      ? selectedTime === slot.time \n                        ? 'selected' \n                        : 'available'\n                      : 'disabled'\n                  }`}\n                  onClick={() => handleTimeSelect(slot.time, slot.available)}\n                >\n                  <Text className=\"time-text\">{slot.time}</Text>\n                </View>\n              ))}\n            </View>\n          )}\n        </View>\n      )}\n    </View>\n  )\n})\n\nBookingSelector.displayName = 'BookingSelector'\n\nexport default BookingSelector","import React from 'react'\nimport { View, Text } from '@tarojs/components'\nimport Taro from '@tarojs/taro'\nimport './index.scss'\n\ninterface CartItem {\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistName: string\n}\n\ninterface ShoppingCartProps {\n  items: CartItem[]\n  onCheckout: () => void\n}\n\nconst ShoppingCart: React.FC<ShoppingCartProps> = ({ items, onCheckout }) => {\n  if (items.length === 0) {\n    return null\n  }\n\n  // 计算总价\n  const totalOriginalPrice = items.reduce((sum, item) => sum + item.price, 0)\n  const totalDiscountPrice = items.reduce((sum, item) => sum + (item.discountPrice || item.price), 0)\n  const totalSavings = totalOriginalPrice - totalDiscountPrice\n\n  // 格式化日期显示\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr)\n    const today = new Date()\n    const isToday = date.toDateString() === today.toDateString()\n    \n    if (isToday) {\n      return '今天'\n    }\n    \n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    return `${month}月${day}日`\n  }\n\n  const handleCheckout = () => {\n    if (items.length === 0) {\n      Taro.showToast({\n        title: '请先选择服务',\n        icon: 'none'\n      })\n      return\n    }\n    \n    onCheckout()\n  }\n\n  return (\n    <View className=\"shopping-cart\">\n      <View className=\"cart-header\">\n        <View className=\"cart-info\">\n          <Text className=\"item-count\">已选 {items.length} 项服务</Text>\n          <View className=\"price-info\">\n            {totalSavings > 0 && (\n              <Text className=\"savings\">已省 ¥{totalSavings.toFixed(2)}</Text>\n            )}\n            <Text className=\"total-price\">¥{totalDiscountPrice.toFixed(2)}</Text>\n          </View>\n        </View>\n        \n        <View className=\"checkout-btn\" onClick={handleCheckout}>\n          立即预约\n        </View>\n      </View>\n\n      {/* 展开显示选中的服务详情 */}\n      <View className=\"cart-items\">\n        {items.map((item, index) => (\n          <View key={index} className=\"cart-item\">\n            <View className=\"item-info\">\n              <Text className=\"service-name\">{item.serviceName}</Text>\n              <Text className=\"service-details\">\n                {item.duration}分钟 · {item.therapistName} · {formatDate(item.date)} {item.time}\n              </Text>\n            </View>\n            <View className=\"item-price\">\n              {item.discountPrice ? (\n                <>\n                  <Text className=\"discount-price\">¥{item.discountPrice}</Text>\n                  <Text className=\"original-price\">¥{item.price}</Text>\n                </>\n              ) : (\n                <Text className=\"price\">¥{item.price}</Text>\n              )}\n            </View>\n          </View>\n        ))}\n      </View>\n    </View>\n  )\n}\n\nexport default ShoppingCart","import React, { useState, useEffect, useRef } from 'react'\nimport Taro, { useRouter } from '@tarojs/taro'\nimport { View, Text, ScrollView } from '@tarojs/components'\nimport { therapistService } from '@/services/therapist'\nimport { storeService } from '@/services/store'\nimport TherapistInfo from './components/TherapistInfo'\nimport StoreInfo from './components/StoreInfo'\nimport BookingSelector, { BookingSelectorHandle } from './components/BookingSelector'\nimport ShoppingCart from './components/ShoppingCart'\nimport type { Therapist, Store } from '@/types'\nimport './index.scss'\n\ninterface CartItem {\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistName: string\n  therapistAvatar?: string\n}\n\nconst TherapistBookingPage: React.FC = () => {\n  const router = useRouter()\n  const { therapistId, storeId, storeName } = router.params\n  \n  const [therapist, setTherapist] = useState<Therapist | null>(null)\n  const [store, setStore] = useState<Store | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n\n  // 预约选择状态\n  const [cartItems, setCartItems] = useState<CartItem[]>([])\n  const [selectedService, setSelectedService] = useState<any>(null)\n  \n  // 待处理操作状态（用于撤销功能）\n  const [sessionStartIndex, setSessionStartIndex] = useState<number>(-1) // 记录本次会话开始时的购物车长度\n  const [isAutoExpanded, setIsAutoExpanded] = useState(false) // 是否是自动展开的购物车\n  \n  // BookingSelector 组件引用\n  const bookingSelectorRef = useRef<BookingSelectorHandle>(null)\n\n  // Mock 服务数据\n  const mockServices = [\n    { id: '1', name: '肩颈调理', duration: 60, price: 128, discountPrice: 98 },\n    { id: '2', name: '全身推拿', duration: 90, price: 198, discountPrice: 158 },\n    { id: '3', name: '足底按摩', duration: 45, price: 88 },\n    { id: '4', name: '拔罐刮痧', duration: 30, price: 68, discountPrice: 58 },\n    { id: '5', name: '中医理疗', duration: 120, price: 298, discountPrice: 238 }\n  ]\n\n  useEffect(() => {\n    loadData()\n  }, [therapistId, storeId])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      setError('')\n\n      const [therapistRes, storeRes] = await Promise.all([\n        therapistService.getTherapistDetail(therapistId),\n        storeService.getStoreDetail(storeId)\n      ])\n\n      setTherapist(therapistRes.data)\n      setStore(storeRes.data)\n    } catch (err) {\n      console.error('Failed to load data:', err)\n      setError('加载数据失败，请重试')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleServiceSelect = (service: any) => {\n    setSelectedService(service)\n  }\n\n  const handleTimeSelect = (date: string, time: string) => {\n    if (!selectedService || !therapist) return\n\n    // 如果是新的会话，记录开始位置\n    if (sessionStartIndex === -1) {\n      setSessionStartIndex(cartItems.length)\n      setIsAutoExpanded(true)\n    }\n\n    const newItem: CartItem = {\n      serviceId: selectedService.id,\n      serviceName: selectedService.name,\n      duration: selectedService.duration,\n      price: selectedService.price,\n      discountPrice: selectedService.discountPrice,\n      date,\n      time,\n      therapistName: therapist.name,\n      therapistAvatar: therapist.avatar\n    }\n\n    // 检查是否已存在相同时间段的预约（在整个购物车中）\n    const existingIndex = cartItems.findIndex(\n      item => item.date === date && item.time === time\n    )\n\n    if (existingIndex >= 0) {\n      // 无论是否在当前会话中，都直接替换\n      const newItems = [...cartItems]\n      newItems[existingIndex] = newItem\n      setCartItems(newItems)\n      \n      Taro.showToast({\n        title: '已更新该时段预约',\n        icon: 'success'\n      })\n    } else {\n      // 添加新预约\n      setCartItems([...cartItems, newItem])\n      \n      Taro.showToast({\n        title: '已添加到购物车',\n        icon: 'success'\n      })\n    }\n  }\n\n  // 撤销操作（点击遮罩时）\n  const handleCartMaskClick = () => {\n    if (isAutoExpanded && sessionStartIndex >= 0) {\n      // 撤销本次会话中所有新增的项\n      const newItems = cartItems.slice(0, sessionStartIndex)\n      setCartItems(newItems)\n      \n      // 清除选中的时间\n      bookingSelectorRef.current?.clearSelectedTime()\n      \n      // 静默撤销，不显示提示\n    }\n    \n    // 重置会话状态\n    setSessionStartIndex(-1)\n    setIsAutoExpanded(false)\n  }\n\n  // 确认操作（点击\"继续预约\"时）\n  const handleCartContinue = () => {\n    // 确认操作，重置会话状态，允许继续添加\n    setSessionStartIndex(-1)\n    setIsAutoExpanded(false)\n  }\n\n  const handleCheckout = () => {\n    if (cartItems.length === 0) return\n\n    // 清除会话状态\n    setSessionStartIndex(-1)\n    setIsAutoExpanded(false)\n\n    // 导航到预约确认页面\n    const params = {\n      therapistId: therapistId!,\n      storeId: storeId!,\n      items: JSON.stringify(cartItems)\n    }\n    \n    Taro.navigateTo({\n      url: `/pages/booking/confirm/index?${Object.entries(params)\n        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n        .join('&')}`\n    })\n  }\n\n  if (loading) {\n    return (\n      <View className=\"therapist-booking-page\">\n        <View className=\"loading\">加载中...</View>\n      </View>\n    )\n  }\n\n  if (error || !therapist || !store) {\n    return (\n      <View className=\"therapist-booking-page\">\n        <View className=\"error\">{error || '数据加载失败'}</View>\n      </View>\n    )\n  }\n\n  return (\n    <View className=\"therapist-booking-page\">\n      <ScrollView className=\"main-content\" scrollY>\n        <TherapistInfo \n          therapist={therapist} \n          storeId={storeId as string}\n          storeName={storeName as string}\n        />\n        <StoreInfo store={store} />\n        <BookingSelector \n          ref={bookingSelectorRef}\n          services={mockServices}\n          onServiceSelect={handleServiceSelect}\n          onTimeSelect={handleTimeSelect}\n        />\n      </ScrollView>\n      <ShoppingCart \n        items={cartItems}\n        therapist={therapist}\n        onCheckout={handleCheckout}\n        onMaskClick={handleCartMaskClick}\n        onContinue={handleCartContinue}\n        hasPendingAction={isAutoExpanded && sessionStartIndex >= 0}\n      />\n    </View>\n  )\n}\n\nexport default TherapistBookingPage"],"names":["TherapistInfo","therapist","isExpanded","setIsExpanded","useState","therapistDetail","level","rating","salesCount","serviceCount","description","toggleExpanded","jsxs","View","jsx","Image","avatar","Text","name","StoreInfo","store","getStatusText","status","getStatusClass","handleCallStore","phone","Taro","makePhoneCall","phoneNumber","handleShowLocation","location","openLocation","latitude","longitude","address","distance","businessHours","start","end","BookingSelector","forwardRef","services","onServiceSelect","onTimeSelect","ref","selectedServiceId","setSelectedServiceId","selectedDate","setSelectedDate","selectedTime","setSelectedTime","useImperativeHandle","clearSelectedTime","generateDateList","dates","today","Date","i","date","setDate","getDate","month","getMonth","day","weekDays","weekDay","getDay","push","key","toISOString","split","display","generateTimeSlots","slots","hour","time","toString","padStart","available","Math","random","handleServiceSelect","service","id","handleDateSelect","dateKey","handleTimeSelect","dateList","timeSlots","ScrollView","map","discountPrice","Fragment","price","duration","slot","index","displayName","ShoppingCart","items","onCheckout","length","totalOriginalPrice","reduce","sum","item","totalDiscountPrice","totalSavings","formatDate","dateStr","isToday","toDateString","handleCheckout","showToast","title","icon","toFixed","serviceName","therapistName","TherapistBookingPage","router","useRouter","therapistId","storeId","storeName","params","setTherapist","setStore","loading","setLoading","error","setError","cartItems","setCartItems","selectedService","setSelectedService","sessionStartIndex","setSessionStartIndex","isAutoExpanded","setIsAutoExpanded","bookingSelectorRef","useRef","mockServices","useEffect","loadData","therapistRes","storeRes","Promise","all","therapistService","getTherapistDetail","storeService","getStoreDetail","data","err","newItem","serviceId","therapistAvatar","existingIndex","findIndex","newItems","handleCartMaskClick","slice","current","handleCartContinue","JSON","stringify","navigateTo","url","Object","entries","value","encodeURIComponent","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,MAAMA,gBAA8CA,CAAC,EAAEC,gBAAgB;AACrE,QAAM,CAACC,YAAYC,aAAa,IAAIC,cAAS,KAAK;AAGlD,QAAMC,kBAAkB;AAAA,IACtBC,OAAO;AAAA,IACPC,QAAQN,UAAUM,UAAU;AAAA,IAC5BC,YAAYP,UAAUQ,gBAAgB;AAAA,IACtCC,aAAa;AAAA,KACVT;AAGL,QAAMU,iBAAiBA,MAAM;AAC3BR,kBAAc,CAACD,UAAU;AAAA,EAAA;AAIzB,SAAAU,qBAAA,KAACC,KAAK,MAAA,EAAA,WAAU,kBACd,UAAA;AAAA,IAACD,qBAAAA,KAAAC,KAAAA,MAAA,EAAK,WAAU,oBACd,UAAA;AAAA,MAACC,qBAAAA,IAAAD,KAAAA,MAAA,EAAK,WAAU,kBACd,UAAAC,qBAAA;AAAA,QAACC,KAAA;AAAA,QAAA;AAAA,UACC,WAAU;AAAA,UACV,KAAKd,UAAUe;AAAAA,UACf,MAAK;AAAA,QAAA;AAAA,MAAA,GAET;AAAA,MAEAJ,qBAAAA,KAACC,KAAAA,MAAK,EAAA,WAAU,cACd,UAAA;AAAA,QAACD,qBAAAA,KAAAC,KAAAA,MAAA,EAAK,WAAU,YACd,UAAA;AAAA,UAAAC,qBAAA,IAACG,KAAK,MAAA,EAAA,WAAU,QAAQhB,UAAAA,UAAUiB,MAAK;AAAA,UACtCJ,qBAAA,IAAAD,KAAA,MAAA,EAAK,WAAU,SAASR,0BAAgBC,OAAM;AAAA,QAAA,GACjD;AAAA,QAEAM,qBAAAA,KAACC,KAAAA,MAAK,EAAA,WAAU,aACd,UAAA;AAAA,UAAAC,qBAAAA,IAACD,aAAK,WAAU,UACd,UAACD,qBAAA,KAAAK,WAAA,EAAK,WAAU,gBAAgBZ,UAAAA;AAAAA,YAAgBE,gBAAAA;AAAAA,YAAO;AAAA,UAAA,EAAA,CAAC,EAC1D,CAAA;AAAA,UACCO,qBAAA,IAAAD,KAAA,MAAA,EAAK,WAAU,WAAU,UAAC,KAAA;AAAA,mCAC1BA,KAAK,MAAA,EAAA,WAAU,SACd,UAACD,qBAAA,KAAAK,WAAA,EAAK,WAAU,cAAa,UAAA;AAAA,YAAA;AAAA,YAAGZ,gBAAgBG;AAAAA,YAAW;AAAA,UAAA,EAAA,CAAC,EAC9D,CAAA;AAAA,QAAA,GACF;AAAA,MAAA,GACF;AAAA,IAAA,GACF;AAAA,IAEAI,qBAAAA,KAACC,KAAAA,MAAK,EAAA,WAAU,uBACd,UAAA;AAAA,MAACC,qBAAAA,IAAAG,KAAAA,MAAA,EAAK,WAAW,eAAef,aAAa,aAAa,WAAW,IAClEG,0BAAgBK,YACnB,CAAA;AAAA,MAECE,qBAAA,KAAAC,KAAA,MAAA,EAAK,WAAU,iBAAgB,SAASF,gBACvC,UAAA;AAAA,QAAAG,yBAACG,KAAAA,MAAK,EAAA,WAAU,eAAef,UAAAA,aAAa,OAAO,MAAK;AAAA,QACxDY,qBAAAA,IAACG,KAAAA,MAAK,EAAA,WAAW,eAAef,aAAa,OAAO,MAAM,IACvDA,UAAa,aAAA,MAAM,IACtB,CAAA;AAAA,MAAA,GACF;AAAA,IAAA,GACF;AAAA,EACF,EAAA,CAAA;AAEJ;;AC1DA,MAAMiB,YAAsCA,CAAC,EAAEC,YAAY;AACnDC,QAAAA,gBAAgBA,CAACC,WAA4B;AACjD,YAAQA,QAAM;AAAA,MACZ,KAAK;AACI,eAAA;AAAA,MACT,KAAK;AACI,eAAA;AAAA,MACT,KAAK;AACI,eAAA;AAAA,MACT;AACS,eAAA;AAAA,IACX;AAAA,EAAA;AAGIC,QAAAA,iBAAiBA,CAACD,WAA4B;AAClD,YAAQA,QAAM;AAAA,MACZ,KAAK;AACI,eAAA;AAAA,MACT,KAAK;AACI,eAAA;AAAA,MACT,KAAK;AACI,eAAA;AAAA,MACT;AACS,eAAA;AAAA,IACX;AAAA,EAAA;AAGF,QAAME,kBAAkBA,MAAM;AAC5B,QAAIJ,MAAMK,OAAO;AACfC,WAAAA,KAAKC,cAAc;AAAA,QACjBC,aAAaR,MAAMK;AAAAA,MAAAA,CACpB;AAAA,IACH;AAAA,EAAA;AAGF,QAAMI,qBAAqBA,MAAM;AAC/B,QAAIT,MAAMU,UAAU;AAClBJ,WAAAA,KAAKK,aAAa;AAAA,QAChBC,UAAUZ,MAAMU,SAASE;AAAAA,QACzBC,WAAWb,MAAMU,SAASG;AAAAA,QAC1Bf,MAAME,MAAMF;AAAAA,QACZgB,SAASd,MAAMc;AAAAA,MAAAA,CAChB;AAAA,IACH;AAAA,EAAA;AAGF,kCACGrB,KAAAA,MAAK,EAAA,WAAU,cACd,UAACD,qBAAA,KAAAC,WAAA,EAAK,WAAU,gBACd,UAAA;AAAA,IAACD,qBAAAA,KAAAC,KAAAA,MAAA,EAAK,WAAU,iBACd,UAAA;AAAA,MAACD,qBAAAA,KAAAC,KAAAA,MAAA,EAAK,WAAU,YACd,UAAA;AAAA,QAAAC,qBAAA,IAACG,KAAK,MAAA,EAAA,WAAU,cAAcG,UAAAA,MAAMF,MAAK;AAAA,QACzCN,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,YAAYG,UAAAA;AAAAA,UAAAA,MAAMe,YAAY;AAAA,UAAI;AAAA,QAAA,GAAE;AAAA,MAAA,GACtD;AAAA,MAEAvB,qBAAAA,KAACC,KAAAA,MAAK,EAAA,WAAU,aACd,UAAA;AAAA,QAAAC,qBAAA,IAACG,KAAK,MAAA,EAAA,WAAU,kBACbG,UAAAA,MAAMgB,gBAAgB,GAAGhB,MAAMgB,cAAcC,KAAK,IAAIjB,MAAMgB,cAAcE,GAAG,KAAK,UACrF;AAAA,QACCxB,qBAAA,IAAAD,KAAA,MAAA,EAAK,WAAW,UAAUU,eAAeH,MAAME,MAAM,CAAC,IACpDD,UAAAA,cAAcD,MAAME,MAAM,EAC7B,CAAA;AAAA,MAAA,GACF;AAAA,MAEAV,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,WAAWG,UAAAA;AAAAA,QAAAA,MAAMc,WAAW;AAAA,QAAO;AAAA,MAAA,GAAQ;AAAA,IAAA,GAC7D;AAAA,IAEAtB,qBAAAA,KAACC,KAAAA,MAAK,EAAA,WAAU,kBACd,UAAA;AAAA,MAAAC,yBAACD,KAAAA,MAAK,EAAA,WAAU,cAAa,SAASW,iBAAgB,UAEtD,MAAA;AAAA,+BACCX,KAAAA,MAAK,EAAA,WAAU,cAAa,SAASgB,oBAAmB,UAEzD,MAAA;AAAA,IAAA,GACF;AAAA,EAAA,EACF,CAAA,EACF,CAAA;AAEJ;;AC7DA,MAAMU,kBAAkBC,gBAAwD,CAAC;AAAA,EAC/EC;AAAAA,EACAC;AAAAA,EACAC;AACF,GAAGC,QAAQ;AACT,QAAM,CAACC,mBAAmBC,oBAAoB,IAAI1C,cAAiB,EAAE;AACrE,QAAM,CAAC2C,cAAcC,eAAe,IAAI5C,cAAiB,EAAE;AAC3D,QAAM,CAAC6C,cAAcC,eAAe,IAAI9C,cAAiB,EAAE;AAG3D+C,OAAAA,oBAAoBP,KAAK,OAAO;AAAA,IAC9BQ,mBAAmBA,MAAM;AACvBJ,sBAAgB,EAAE;AAClBE,sBAAgB,EAAE;AAAA,IACpB;AAAA,EACA,EAAA;AAGF,QAAMG,mBAAmBA,MAAM;AAC7B,UAAMC,QAAQ,CAAA;AACRC,UAAAA,4BAAYC;AAElB,aAASC,IAAI,GAAGA,IAAI,GAAGA,KAAK;AACpBC,YAAAA,OAAO,IAAIF,KAAKD,KAAK;AAC3BG,WAAKC,QAAQJ,MAAMK,QAAQ,IAAIH,CAAC;AAE1BI,YAAAA,QAAQH,KAAKI,SAAAA,IAAa;AAC1BC,YAAAA,MAAML,KAAKE;AACXI,YAAAA,WAAW,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAC1D,YAAMC,UAAUD,SAASN,KAAKQ,OAAQ,CAAA;AAEtCZ,YAAMa,KAAK;AAAA,QACTC,KAAKV,KAAKW,YAAAA,EAAcC,MAAM,GAAG,EAAE,CAAC;AAAA,QACpCC,SAASd,MAAM,IAAI,OAAO,GAAGI,KAAK,IAAIE,GAAG;AAAA,QACzCE,SAASR,MAAM,IAAI,KAAKQ;AAAAA,MAAAA,CACzB;AAAA,IACH;AAEOX,WAAAA;AAAAA,EAAAA;AAIT,QAAMkB,oBAAoBA,MAAkB;AAC1C,UAAMC,QAAoB,CAAA;AAE1B,aAASC,OAAO,GAAGA,QAAQ,IAAIA,QAAQ;AAC/BC,YAAAA,OAAO,GAAGD,KAAKE,SAAAA,EAAWC,SAAS,GAAG,GAAG,CAAC;AAE1CC,YAAAA,YAAYC,KAAKC,OAAAA,IAAW;AAElCP,YAAMN,KAAK;AAAA,QACTQ;AAAAA,QACAG;AAAAA,MAAAA,CACD;AAAA,IACH;AAEOL,WAAAA;AAAAA,EAAAA;AAGHQ,QAAAA,sBAAsBA,CAACC,YAAqB;AAChDpC,yBAAqBoC,QAAQC,EAAE;AAC/BzC,oBAAgBwC,OAAO;AAAA,EAAA;AAGnBE,QAAAA,mBAAmBA,CAACC,YAAoB;AAC5CrC,oBAAgBqC,OAAO;AAEvBnC,oBAAgB,EAAE;AAAA,EAAA;AAGdoC,QAAAA,mBAAmBA,CAACX,MAAcG,cAAuB;AACzD,QAAA,CAACA,aAAa,CAAC/B;AAAc;AAEjCG,oBAAgByB,IAAI;AACpBhC,iBAAaI,cAAc4B,IAAI;AAAA,EAAA;AAGjC,QAAMY,WAAWlC;AACjB,QAAMmC,YAAYhB;AAGhB,SAAA5D,qBAAA,KAACC,KAAK,MAAA,EAAA,WAAU,oBAEd,UAAA;AAAA,IAACD,qBAAAA,KAAAC,KAAAA,MAAA,EAAK,WAAU,mBACd,UAAA;AAAA,MAACC,qBAAA,IAAAD,KAAA,MAAA,EAAK,WAAU,iBAAgB,UAAI,QAAA;AAAA,+BACnC4E,KAAAA,YAAW,EAAA,WAAU,gBAAe,SAAO,MACzChD,UAASiD,SAAAA;AAAAA,QAAI,CAAAR,YACZtE,qBAAA;AAAA,UAACC,KAAA;AAAA,UAAA;AAAA,YAEC,WAAW,eAAegC,sBAAsBqC,QAAQC,KAAK,WAAW,EAAE;AAAA,YAC1E,SAAS,MAAMF,oBAAoBC,OAAO;AAAA,YAE1C,UAAA;AAAA,cAAApE,qBAAA,IAACG,KAAK,MAAA,EAAA,WAAU,gBAAgBiE,UAAAA,QAAQhE,MAAK;AAAA,uCAC5CL,KAAK,MAAA,EAAA,WAAU,iBACbqE,UAAAA,QAAQS,gBAEL/E,qBAAAA,KAAAgF,KAAA,UAAA,EAAA,UAAA;AAAA,gBAAChF,qBAAAA,KAAAK,KAAAA,MAAA,EAAK,WAAU,kBAAiB,UAAA;AAAA,kBAAA;AAAA,kBAAEiE,QAAQS;AAAAA,gBAAAA,GAAc;AAAA,gBACzD/E,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,kBAAiB,UAAA;AAAA,kBAAA;AAAA,kBAAEiE,QAAQW;AAAAA,gBAAAA,GAAM;AAAA,cAAA,EACnD,CAAA,IAEAjF,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,SAAQ,UAAA;AAAA,gBAAA;AAAA,gBAAEiE,QAAQW;AAAAA,cAAAA,EAAAA,CAAM,EAE5C,CAAA;AAAA,cACAjF,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,oBAAoBiE,UAAAA;AAAAA,gBAAQY,QAAAA;AAAAA,gBAAS;AAAA,cAAA,GAAE;AAAA,YAAA;AAAA,UAAA;AAAA,UAflDZ,QAAQC;AAAAA,QAgBf;AAAA,MAAA,GAEJ;AAAA,IAAA,GACF;AAAA,IAGCtC,qBACCjC,qBAAA,KAACC,KAAK,MAAA,EAAA,WAAU,oBACd,UAAA;AAAA,MAACC,qBAAA,IAAAD,KAAA,MAAA,EAAK,WAAU,iBAAgB,UAAI,QAAA;AAAA,+BAGnC4E,KAAAA,YAAW,EAAA,WAAU,aAAY,SAAO,MACtCF,UAASG,SAAAA;AAAAA,QAAI,CAAAhC,SACZ9C,qBAAA;AAAA,UAACC,KAAA;AAAA,UAAA;AAAA,YAEC,WAAW,YAAYkC,iBAAiBW,KAAKU,MAAM,WAAW,EAAE;AAAA,YAChE,SAAS,MAAMgB,iBAAiB1B,KAAKU,GAAG;AAAA,YAExC,UAAA;AAAA,cAAAtD,qBAAA,IAACG,KAAK,MAAA,EAAA,WAAU,gBAAgByC,UAAAA,KAAKa,SAAQ;AAAA,cAC5Cb,KAAKO,WAAWnD,qBAAA,IAACG,aAAK,WAAU,YAAYyC,eAAKO,SAAQ;AAAA,YAAA;AAAA,UAAA;AAAA,UALrDP,KAAKU;AAAAA,QAMZ;AAAA,MAAA,GAEJ;AAAA,MAGCrB,gBACCjC,qBAAA,IAACD,WAAK,EAAA,WAAU,aACb2E,UAAUE,UAAAA;AAAAA,QAAI,CAACK,MAAMC,WACpBlF,qBAAA;AAAA,UAACD,KAAA;AAAA,UAAA;AAAA,YAEC,WAAW,aACTkF,KAAKjB,YACD7B,iBAAiB8C,KAAKpB,OACpB,aACA,cACF,UAAU;AAAA,YAEhB,SAAS,MAAMW,iBAAiBS,KAAKpB,MAAMoB,KAAKjB,SAAS;AAAA,YAEzD,UAAChE,qBAAAA,IAAAG,KAAAA,MAAA,EAAK,WAAU,aAAa8E,eAAKpB,MAAK;AAAA,UAAA;AAAA,UAVlCqB;AAAAA,QAWP;AAAA,MAAA,GAEJ;AAAA,IAAA,GAEJ;AAAA,EAEJ,EAAA,CAAA;AAEJ,CAAC;AAEDzD,gBAAgB0D,cAAc;;AChK9B,MAAMC,eAA4CA,CAAC,EAAEC,OAAOC,iBAAiB;AACvED,MAAAA,MAAME,WAAW,GAAG;AACf,WAAA;AAAA,EACT;AAGMC,QAAAA,qBAAqBH,MAAMI,OAAO,CAACC,KAAKC,SAASD,MAAMC,KAAKZ,OAAO,CAAC;AACpEa,QAAAA,qBAAqBP,MAAMI,OAAO,CAACC,KAAKC,SAASD,OAAOC,KAAKd,iBAAiBc,KAAKZ,QAAQ,CAAC;AAClG,QAAMc,eAAeL,qBAAqBI;AAGpCE,QAAAA,aAAaA,CAACC,YAAoB;AAChCnD,UAAAA,OAAO,IAAIF,KAAKqD,OAAO;AACvBtD,UAAAA,4BAAYC;AAClB,UAAMsD,UAAUpD,KAAKqD,aAAa,MAAMxD,MAAMwD,aAAa;AAE3D,QAAID,SAAS;AACJ,aAAA;AAAA,IACT;AAEMjD,UAAAA,QAAQH,KAAKI,SAAAA,IAAa;AAC1BC,UAAAA,MAAML,KAAKE;AACV,WAAA,GAAGC,KAAK,IAAIE,GAAG;AAAA,EAAA;AAGxB,QAAMiD,iBAAiBA,MAAM;AACvBb,QAAAA,MAAME,WAAW,GAAG;AACtB3E,WAAAA,KAAKuF,UAAU;AAAA,QACbC,OAAO;AAAA,QACPC,MAAM;AAAA,MAAA,CACP;AACD;AAAA,IACF;AAEW;EAAA;AAIX,SAAAvG,qBAAA,KAACC,KAAK,MAAA,EAAA,WAAU,iBACd,UAAA;AAAA,IAACD,qBAAAA,KAAAC,KAAAA,MAAA,EAAK,WAAU,eACd,UAAA;AAAA,MAACD,qBAAAA,KAAAC,KAAAA,MAAA,EAAK,WAAU,aACd,UAAA;AAAA,QAACD,qBAAAA,KAAAK,KAAAA,MAAA,EAAK,WAAU,cAAa,UAAA;AAAA,UAAA;AAAA,UAAIkF,MAAME;AAAAA,UAAO;AAAA,QAAA,GAAI;AAAA,QAClDzF,qBAAAA,KAACC,KAAAA,MAAK,EAAA,WAAU,cACb8F,UAAAA;AAAAA,UAAAA,eAAe,KACd/F,0BAACK,KAAAA,MAAK,EAAA,WAAU,WAAU,UAAA;AAAA,YAAA;AAAA,YAAK0F,aAAaS,QAAQ,CAAC;AAAA,UAAA,GAAE;AAAA,UAEzDxG,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,eAAc,UAAA;AAAA,YAAA;AAAA,YAAEyF,mBAAmBU,QAAQ,CAAC;AAAA,UAAA,GAAE;AAAA,QAAA,GAChE;AAAA,MAAA,GACF;AAAA,+BAECvG,KAAAA,MAAK,EAAA,WAAU,gBAAe,SAASmG,gBAAe,UAEvD,QAAA;AAAA,IAAA,GACF;AAAA,IAGClG,qBAAA,IAAAD,KAAA,MAAA,EAAK,WAAU,cACbsF,UAAMT,MAAAA;AAAAA,MAAI,CAACe,MAAMT,WACfpF,qBAAA,KAAAC,KAAA,MAAA,EAAiB,WAAU,aAC1B,UAAA;AAAA,QAACD,qBAAAA,KAAAC,KAAAA,MAAA,EAAK,WAAU,aACd,UAAA;AAAA,UAAAC,qBAAA,IAACG,KAAK,MAAA,EAAA,WAAU,gBAAgBwF,UAAAA,KAAKY,aAAY;AAAA,UACjDzG,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,mBACbwF,UAAAA;AAAAA,YAAKX,KAAAA;AAAAA,YAAS;AAAA,YAAMW,KAAKa;AAAAA,YAAc;AAAA,YAAIV,WAAWH,KAAK/C,IAAI;AAAA,YAAE;AAAA,YAAE+C,KAAK9B;AAAAA,UAAAA,GAC3E;AAAA,QAAA,GACF;AAAA,iCACC9D,KAAK,MAAA,EAAA,WAAU,cACb4F,UAAAA,KAAKd,gBAEF/E,qBAAAA,KAAAgF,KAAA,UAAA,EAAA,UAAA;AAAA,UAAChF,qBAAAA,KAAAK,KAAAA,MAAA,EAAK,WAAU,kBAAiB,UAAA;AAAA,YAAA;AAAA,YAAEwF,KAAKd;AAAAA,UAAAA,GAAc;AAAA,UACtD/E,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,kBAAiB,UAAA;AAAA,YAAA;AAAA,YAAEwF,KAAKZ;AAAAA,UAAAA,GAAM;AAAA,QAAA,EAChD,CAAA,IAEAjF,qBAAAA,KAACK,KAAAA,MAAK,EAAA,WAAU,SAAQ,UAAA;AAAA,UAAA;AAAA,UAAEwF,KAAKZ;AAAAA,QAAAA,EAAAA,CAAM,EAEzC,CAAA;AAAA,MAAA,EAAA,GAhBSG,MAiBX;AAAA,IAAA,GAEJ;AAAA,EACF,EAAA,CAAA;AAEJ;;AC7EA,MAAMuB,uBAAiCA,MAAM;AAC3C,QAAMC,SAASC,KAAAA,YAAAA;AACf,QAAM,EAAEC,aAAaC,SAASC,UAAAA,IAAcJ,OAAOK;AAEnD,QAAM,CAAC5H,WAAW6H,YAAY,IAAI1H,cAA2B,IAAI;AACjE,QAAM,CAACgB,OAAO2G,QAAQ,IAAI3H,cAAuB,IAAI;AACrD,QAAM,CAAC4H,SAASC,UAAU,IAAI7H,cAAS,IAAI;AAC3C,QAAM,CAAC8H,OAAOC,QAAQ,IAAI/H,cAAS,EAAE;AAGrC,QAAM,CAACgI,WAAWC,YAAY,IAAIjI,KAAAA,SAAqB,CAAE,CAAA;AACzD,QAAM,CAACkI,iBAAiBC,kBAAkB,IAAInI,cAAc,IAAI;AAGhE,QAAM,CAACoI,mBAAmBC,oBAAoB,IAAIrI,KAAAA,SAAiB,EAAE;AACrE,QAAM,CAACsI,gBAAgBC,iBAAiB,IAAIvI,cAAS,KAAK;AAGpDwI,QAAAA,qBAAqBC,YAA8B,IAAI;AAG7D,QAAMC,eAAe;AAAA,IACnB,EAAE3D,IAAI,KAAKjE,MAAM,QAAQ4E,UAAU,IAAID,OAAO,KAAKF,eAAe,GAAG;AAAA,IACrE,EAAER,IAAI,KAAKjE,MAAM,QAAQ4E,UAAU,IAAID,OAAO,KAAKF,eAAe,IAAI;AAAA,IACtE,EAAER,IAAI,KAAKjE,MAAM,QAAQ4E,UAAU,IAAID,OAAO,GAAG;AAAA,IACjD,EAAEV,IAAI,KAAKjE,MAAM,QAAQ4E,UAAU,IAAID,OAAO,IAAIF,eAAe,GAAG;AAAA,IACpE,EAAER,IAAI,KAAKjE,MAAM,QAAQ4E,UAAU,KAAKD,OAAO,KAAKF,eAAe,IAAI;AAAA,EAAA;AAGzEoD,OAAAA,UAAU,MAAM;AACL;EAAA,GACR,CAACrB,aAAaC,OAAO,CAAC;AAEzB,QAAMqB,WAAW,MAAY;AACvB,QAAA;AACFf,iBAAW,IAAI;AACfE,eAAS,EAAE;AAEX,YAAM,CAACc,cAAcC,QAAQ,IAAI,MAAMC,QAAQC;AAAAA,QAAI;AAAA,UACjDC,OAAAA,iBAAiBC,mBAAmB5B,WAAW;AAAA,UAC/C6B,OAAAA,aAAaC,eAAe7B,OAAO;AAAA,QAAC;AAAA,MAAA;AAGtCG,mBAAamB,aAAaQ,IAAI;AAC9B1B,eAASmB,SAASO,IAAI;AAAA,aACfC,KAAK;AACJxB,cAAAA,MAAM,wBAAwBwB,GAAG;AACzCvB,eAAS,YAAY;AAAA,IAAA,UACb;AACRF,iBAAW,KAAK;AAAA,IAClB;AAAA,EAAA;AAGIhD,QAAAA,sBAAsBA,CAACC,YAAiB;AAC5CqD,uBAAmBrD,OAAO;AAAA,EAAA;AAGtBI,QAAAA,mBAAmBA,CAAC5B,MAAciB,SAAiB;AACnD,QAAA,CAAC2D,mBAAmB,CAACrI;AAAW;AAGpC,QAAIuI,sBAAsB,IAAI;AAC5BC,2BAAqBL,UAAU/B,MAAM;AACrCsC,wBAAkB,IAAI;AAAA,IACxB;AAEA,UAAMgB,UAAoB;AAAA,MACxBC,WAAWtB,gBAAgBnD;AAAAA,MAC3BkC,aAAaiB,gBAAgBpH;AAAAA,MAC7B4E,UAAUwC,gBAAgBxC;AAAAA,MAC1BD,OAAOyC,gBAAgBzC;AAAAA,MACvBF,eAAe2C,gBAAgB3C;AAAAA,MAC/BjC;AAAAA,MACAiB;AAAAA,MACA2C,eAAerH,UAAUiB;AAAAA,MACzB2I,iBAAiB5J,UAAUe;AAAAA,IAAAA;AAI7B,UAAM8I,gBAAgB1B,UAAU2B;AAAAA,MAC9B,CAAAtD,SAAQA,KAAK/C,SAASA,QAAQ+C,KAAK9B,SAASA;AAAAA,IAAAA;AAG9C,QAAImF,iBAAiB,GAAG;AAEhBE,YAAAA,WAAW,CAAC,GAAG5B,SAAS;AAC9B4B,eAASF,aAAa,IAAIH;AAC1BtB,mBAAa2B,QAAQ;AAErBtI,WAAAA,KAAKuF,UAAU;AAAA,QACbC,OAAO;AAAA,QACPC,MAAM;AAAA,MAAA,CACP;AAAA,IAAA,OACI;AAELkB,mBAAa,CAAC,GAAGD,WAAWuB,OAAO,CAAC;AAEpCjI,WAAAA,KAAKuF,UAAU;AAAA,QACbC,OAAO;AAAA,QACPC,MAAM;AAAA,MAAA,CACP;AAAA,IACH;AAAA,EAAA;AAIF,QAAM8C,sBAAsBA,MAAM;;AAC5BvB,QAAAA,kBAAkBF,qBAAqB,GAAG;AAE5C,YAAMwB,WAAW5B,UAAU8B,MAAM,GAAG1B,iBAAiB;AACrDH,mBAAa2B,QAAQ;AAGrBpB,+BAAmBuB,YAAnBvB,mBAA4BxF;AAAAA,IAG9B;AAGAqF,yBAAqB,EAAE;AACvBE,sBAAkB,KAAK;AAAA,EAAA;AAIzB,QAAMyB,qBAAqBA,MAAM;AAE/B3B,yBAAqB,EAAE;AACvBE,sBAAkB,KAAK;AAAA,EAAA;AAGzB,QAAM3B,iBAAiBA,MAAM;AAC3B,QAAIoB,UAAU/B,WAAW;AAAG;AAG5BoC,yBAAqB,EAAE;AACvBE,sBAAkB,KAAK;AAGvB,UAAMd,SAAS;AAAA,MACbH;AAAAA,MACAC;AAAAA,MACAxB,OAAOkE,KAAKC,UAAUlC,SAAS;AAAA,IAAA;AAGjC1G,SAAAA,KAAK6I,WAAW;AAAA,MACdC,KAAK,gCAAgCC,OAAOC,QAAQ7C,MAAM,EACvDnC,IAAI,CAAC,CAACtB,KAAKuG,KAAK,MAAM,GAAGvG,GAAG,IAAIwG,mBAAmBD,KAAK,CAAC,EAAE,EAC3DE,KAAK,GAAG,CAAC;AAAA,IAAA,CACb;AAAA,EAAA;AAGH,MAAI7C,SAAS;AAET,WAAAlH,qBAAAA,IAACD,KAAAA,QAAK,WAAU,0BACd,mCAACA,KAAK,MAAA,EAAA,WAAU,WAAU,UAAA,SAAM,CAAA,EAClC,CAAA;AAAA,EAEJ;AAEA,MAAIqH,SAAS,CAACjI,aAAa,CAACmB,OAAO;AAE/B,WAAAN,qBAAAA,IAACD,KAAAA,MAAK,EAAA,WAAU,0BACd,UAAAC,yBAACD,KAAAA,QAAK,WAAU,SAASqH,UAAS,SAAA,SAAA,CAAS,EAC7C,CAAA;AAAA,EAEJ;AAGE,SAAAtH,qBAAA,KAACC,KAAK,MAAA,EAAA,WAAU,0BACd,UAAA;AAAA,IAAAD,qBAAA,KAAC6E,KAAW,YAAA,EAAA,WAAU,gBAAe,SAAO,MAC1C,UAAA;AAAA,MAAA3E,qBAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MAA+B;AAAA,MAEjCA,yBAAC,aAAU,OAAa;AAAA,MACxBA,qBAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,KAAK8H;AAAAA,UACL,UAAUE;AAAAA,UACV,iBAAiB7D;AAAAA,UACjB,cAAcK;AAAAA,QAAAA;AAAAA,MAAiB;AAAA,IAAA,GAEnC;AAAA,IACAxE,qBAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,OAAOsH;AAAAA,QACP;AAAA,QACA,YAAYpB;AAAAA,QACZ,aAAaiD;AAAAA,QACb,YAAYG;AAAAA,QACZ,kBAAkB1B,kBAAkBF,qBAAqB;AAAA,MAAA;AAAA,IAAE;AAAA,EAE/D,EAAA,CAAA;AAEJ;;;;;"}