{"version":3,"file":"index.js","sources":["../../../../src/pages/appointment/therapist/components/TherapistInfo/index.tsx","../../../../src/pages/appointment/therapist/components/StoreInfo/index.tsx","../../../../src/pages/appointment/therapist/components/BookingSelector/index.tsx","../../../../src/pages/appointment/therapist/index.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { View, Text, Image } from '@tarojs/components'\nimport { AtRate } from 'taro-ui'\nimport type { Therapist } from '@/types'\nimport type { ReviewStats, ReviewData } from '@/services/review'\nimport './index.scss'\n\ninterface TherapistInfoProps {\n  therapist: Therapist\n  stats?: ReviewStats | null\n  reviews?: ReviewData[]\n  reviewsLoading?: boolean\n}\n\nconst TherapistInfo: React.FC<TherapistInfoProps> = ({ therapist, stats, reviews = [], reviewsLoading = false }) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  // 从API获取推拿师信息，提供合理的默认值\n  // 优先使用评价统计中的数据\n  const therapistDetail = {\n    level: 'LV4', // 暂时保持固定，后续可从API获取\n    rating: stats?.averageRating || therapist.rating || 4.8,\n    serviceCount: therapist.serviceCount || 0, // 使用API返回的真实服务次数\n    reviewCount: stats?.totalCount || 0,\n    description: therapist.bio || '专业推拿师，经验丰富，擅长各类疼痛调理和康复治疗',\n    ...therapist\n  }\n\n  // 添加调试日志\n  console.log('🔍 TherapistInfo Debug:', {\n    therapistId: therapist.id,\n    serviceCount: therapist.serviceCount,\n    originalTherapist: therapist,\n    therapistDetail\n  })\n\n  const toggleExpanded = () => {\n    setIsExpanded(!isExpanded)\n  }\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr)\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    return `${month}月${day}日`\n  }\n\n  return (\n    <View className=\"therapist-info\">\n      <View className=\"therapist-header\">\n        <View className=\"avatar-wrapper\">\n          <Image\n            className=\"avatar\"\n            src={therapist.avatar}\n            mode=\"aspectFill\"\n          />\n        </View>\n        \n        <View className=\"basic-info\">\n          <View className=\"name-row\">\n            <Text className=\"name\">{therapist.name}</Text>\n            <View className=\"level\">{therapistDetail.level}</View>\n          </View>\n          \n        </View>\n      </View>\n      \n      <View className=\"description-section\">\n        <Text className={`description ${isExpanded ? 'expanded' : 'collapsed'}`}>\n          {therapistDetail.description}\n        </Text>\n\n        {/* 展开状态下显示评价内容 */}\n        {isExpanded && (\n          <View className=\"reviews-section\">\n            {/* 评价统计 */}\n            {stats && stats.totalCount > 0 && (\n              <View className=\"review-stats-compact\">\n                <View className=\"stats-header\">\n                  <Text className=\"stats-title\">用户评价</Text>\n                  <View className=\"rating-info\">\n                    <Text className=\"score\">{stats.averageRating.toFixed(1)}</Text>\n                    <AtRate value={stats.averageRating} size={12} />\n                    <Text className=\"count\">({stats.totalCount}条)</Text>\n                  </View>\n                </View>\n              </View>\n            )}\n\n            {/* 评价列表 */}\n            <View className=\"review-list-compact\">\n              {reviewsLoading ? (\n                <Text className=\"loading-text\">加载评价中...</Text>\n              ) : reviews.length === 0 ? (\n                <Text className=\"empty-text\">暂无评价</Text>\n              ) : (\n                reviews.slice(0, 3).map((review) => (\n                  <View key={review.reviewId} className=\"review-item-compact\">\n                    <View className=\"review-header-compact\">\n                      <View className=\"user-info-compact\">\n                        <Text className=\"user-name\">{review.userName || '匿名用户'}</Text>\n                        <AtRate value={review.rating} size={10} />\n                      </View>\n                      <Text className=\"review-date\">{formatDate(review.createdAt)}</Text>\n                    </View>\n                    <Text className=\"review-content-compact\">{review.content}</Text>\n                    {review.tags && review.tags.length > 0 && (\n                      <View className=\"review-tags-compact\">\n                        {review.tags.map((tag, index) => (\n                          <Text key={index} className=\"tag-compact\">{tag}</Text>\n                        ))}\n                      </View>\n                    )}\n                  </View>\n                ))\n              )}\n\n              {reviews.length > 3 && (\n                <Text className=\"more-reviews\">仅显示最近3条评价</Text>\n              )}\n            </View>\n          </View>\n        )}\n\n        <View className=\"expand-toggle\" onClick={toggleExpanded}>\n          <Text className=\"expand-text\">{isExpanded ? '收起' : '展开'}</Text>\n          <Text className={`expand-icon ${isExpanded ? 'up' : 'down'}`}>\n            {isExpanded ? '▲' : '▼'}\n          </Text>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default TherapistInfo","import React from 'react'\nimport Taro from '@tarojs/taro'\nimport { View, Text } from '@tarojs/components'\nimport type { Store } from '@/types'\nimport './index.scss'\n\ninterface StoreInfoProps {\n  store: Store\n}\n\nconst StoreInfo: React.FC<StoreInfoProps> = ({ store }) => {\n  const handleCallStore = () => {\n    if (store.phone) {\n      Taro.makePhoneCall({\n        phoneNumber: store.phone\n      })\n    }\n  }\n\n  const handleShowLocation = () => {\n    if (store.latitude && store.longitude) {\n      Taro.openLocation({\n        latitude: store.latitude,\n        longitude: store.longitude,\n        name: store.name,\n        address: store.address\n      })\n    }\n  }\n\n  return (\n    <View className=\"store-info\">\n      <View className=\"store-header\">\n        <View className=\"store-details\">\n          <View className=\"name-row\">\n            <Text className=\"store-name\">{store.name}</Text>\n            {store.distance !== undefined && store.distance !== null && (\n              <Text className=\"distance\">{store.distance}km</Text>\n            )}\n          </View>\n          \n          <View className=\"hours-row\">\n            <Text className=\"business-hours\">\n              {store.businessHours}\n            </Text>\n          </View>\n          \n          <Text className=\"address\">{store.address}</Text>\n        </View>\n        \n        <View className=\"action-buttons\">\n          <View className=\"action-btn\" onClick={handleCallStore}>\n            📞\n          </View>\n          <View className=\"action-btn\" onClick={handleShowLocation}>\n            📍\n          </View>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default StoreInfo","import React, { useState, useEffect, useImperativeHandle, forwardRef } from 'react'\nimport { View, Text, ScrollView } from '@tarojs/components'\nimport { therapistService } from '@/services/therapist'\nimport './index.scss'\n\ninterface Service {\n  id: string\n  name: string\n  duration: number\n  price: number\n  discountPrice?: number\n}\n\ninterface TimeSlot {\n  time: string\n  available: boolean\n  status?: 'available' | 'busy' | 'break'\n}\n\ninterface BookingSelectorProps {\n  services: Service[]\n  therapistId?: string\n  onServiceSelect: (service: Service) => void\n  onTimeSelect: (date: string, time: string) => void\n}\n\nexport interface BookingSelectorHandle {\n  clearSelectedTime: () => void\n}\n\nconst BookingSelector = forwardRef<BookingSelectorHandle, BookingSelectorProps>(({\n  services,\n  therapistId,\n  onServiceSelect,\n  onTimeSelect\n}, ref) => {\n  const [selectedServiceId, setSelectedServiceId] = useState<string>('')\n  const [selectedService, setSelectedService] = useState<Service | null>(null)\n  const [selectedDate, setSelectedDate] = useState<string>('')\n  const [selectedTime, setSelectedTime] = useState<string>('')\n  const [timeSlots, setTimeSlots] = useState<TimeSlot[][]>([])  // 存储从API获取的时间段\n  const [loadingSlots, setLoadingSlots] = useState(false)\n  const [slotsError, setSlotsError] = useState<string>('')  // 时段加载错误提示\n\n  // 暴露方法给父组件\n  useImperativeHandle(ref, () => ({\n    clearSelectedTime: () => {\n      setSelectedTime('')\n    }\n  }), [])\n\n  // 当选择日期和服务时，获取可用时段\n  useEffect(() => {\n    if (selectedDate && therapistId && selectedService) {\n      fetchAvailableSlots()\n    }\n  }, [selectedDate, selectedService, therapistId])\n\n  // 页面重新可见时刷新时间段数据\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden && selectedDate && therapistId && selectedService) {\n        console.log('页面重新可见，刷新时间段数据')\n        fetchAvailableSlots()\n      }\n    }\n\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange)\n  }, [selectedDate, therapistId, selectedService])\n\n  const fetchAvailableSlots = async () => {\n    if (!therapistId || !selectedDate || !selectedService) return\n\n    setLoadingSlots(true)\n    setSlotsError('')  // 清除之前的错误\n    try {\n      const result = await therapistService.getAvailableSlots(\n        therapistId,\n        selectedDate,\n        selectedService.duration\n      )\n\n      console.log('获取到的可用时段数据：', result)\n\n      // 如果API返回了有效的slots数据\n      if (result && result.slots && result.slots.length > 0) {\n        // 使用API返回的数据\n        const grid = []\n\n        // 创建一个映射，方便查找整点的可用性\n        const hourAvailability = new Map()\n        result.slots.forEach(slot => {\n          const hour = slot.time.split(':')[0]\n          hourAvailability.set(hour, { available: slot.available, status: slot.status })\n        })\n\n        for (let hour = 9; hour <= 21; hour++) {\n          const hourStr = hour.toString().padStart(2, '0')\n          const hourSlots = []\n\n          // 获取该小时的可用性（从整点数据推断）\n          const hourData = hourAvailability.get(hourStr) || { available: true, status: 'available' }\n\n          for (let minute = 0; minute < 60; minute += 10) {\n            const time = `${hourStr}:${minute.toString().padStart(2, '0')}`\n\n            // 如果是整点，直接使用API返回的数据\n            // 如果不是整点，使用该小时整点的可用性\n            const slot = result.slots.find(s => s.time === time)\n\n            if (slot) {\n              // 如果API返回了这个具体时间点的数据，使用它\n              hourSlots.push({\n                time,\n                available: slot.available,\n                status: slot.status\n              })\n            } else {\n              // 否则使用该小时整点的可用性\n              hourSlots.push({\n                time,\n                available: hourData.available,\n                status: hourData.status\n              })\n            }\n          }\n          grid.push(hourSlots)\n        }\n        setTimeSlots(grid)\n      } else {\n        // 如果API返回了有效响应但没有时段数据，说明该时段已满\n        console.log('该推拿师在选定时间无可用时段')\n        setSlotsError('该推拿师在此时间段已满，请选择其他时间或推拿师')\n        setTimeSlots([])\n      }\n    } catch (error: any) {\n      console.error('❌ 获取可用时段失败:', error)\n\n      // 处理不同的错误场景\n      if (error.code === 1003) {  // NOT_FOUND\n        setSlotsError('该推拿师不存在或不可用，请返回重新选择')\n      } else if (error.code === 1010) {  // USER_NOT_FOUND\n        setSlotsError('用户信息异常，请重新进入')\n      } else if (error.response?.status >= 500) {  // 服务器错误\n        setSlotsError('服务器异常，请稍后重试')\n      } else {\n        setSlotsError('加载可用时段失败，请检查网络后重试')\n      }\n\n      setTimeSlots([])\n    } finally {\n      setLoadingSlots(false)\n    }\n  }\n\n  // 生成日期列表（今天+接下来4天）\n  const generateDateList = () => {\n    const dates = []\n    const today = new Date()\n    \n    for (let i = 0; i < 5; i++) {\n      const date = new Date(today)\n      date.setDate(today.getDate() + i)\n      \n      const month = date.getMonth() + 1\n      const day = date.getDate()\n      const weekDays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n      const weekDay = weekDays[date.getDay()]\n      \n      dates.push({\n        key: date.toISOString().split('T')[0],\n        display: i === 0 ? '今天' : `${month}月${day}日`,\n        weekDay: i === 0 ? '' : weekDay\n      })\n    }\n    \n    return dates\n  }\n\n  // 生成时间网格数据（按小时分组）\n  const generateTimeGrid = () => {\n    // 如果有从API获取的数据，使用API数据\n    if (timeSlots.length > 0) {\n      const grid = timeSlots.map((hourSlots, index) => {\n        const hour = 9 + index\n        return {\n          hour: `${hour}:00`,\n          slots: hourSlots\n        }\n      })\n      return grid\n    }\n\n    // 否则返回默认的全部可用时段\n    const grid = []\n    for (let hour = 9; hour <= 21; hour++) {\n      const hourSlots = []\n      for (let minute = 0; minute < 60; minute += 10) {\n        const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`\n        hourSlots.push({\n          time,\n          available: true\n        })\n      }\n      grid.push({\n        hour: `${hour}:00`,\n        slots: hourSlots\n      })\n    }\n    return grid\n  }\n\n  // 判断某个时间槽是否被选中\n  const isTimeSlotSelected = (time: string) => {\n    if (!selectedTime || !selectedService) return false\n    \n    const startTime = selectedTime\n    const duration = selectedService.duration\n    \n    // 将时间转换为分钟数进行计算\n    const timeToMinutes = (timeStr: string) => {\n      const [hour, minute] = timeStr.split(':').map(Number)\n      return hour * 60 + minute\n    }\n    \n    const startMinutes = timeToMinutes(startTime)\n    const currentMinutes = timeToMinutes(time)\n    const endMinutes = startMinutes + duration\n    \n    return currentMinutes >= startMinutes && currentMinutes < endMinutes\n  }\n\n  const handleServiceSelect = (service: Service) => {\n    setSelectedServiceId(service.id)\n    setSelectedService(service)\n    onServiceSelect(service)\n    // 重置时间选择\n    setSelectedTime('')\n  }\n\n  const handleDateSelect = (dateKey: string) => {\n    setSelectedDate(dateKey)\n    // 重置时间选择和时间段数据\n    setSelectedTime('')\n    setTimeSlots([])  // 清空之前的时间段数据，触发重新获取\n  }\n\n  const handleTimeSelect = (time: string, available: boolean) => {\n    if (!available || !selectedDate || !selectedService) return\n    \n    // 检查选择的时间段是否足够\n    const timeToMinutes = (timeStr: string) => {\n      const [hour, minute] = timeStr.split(':').map(Number)\n      return hour * 60 + minute\n    }\n    \n    const startMinutes = timeToMinutes(time)\n    const endMinutes = startMinutes + selectedService.duration\n    \n    // 检查是否超过营业时间\n    if (endMinutes > 22 * 60) { // 22:00\n      return\n    }\n    \n    setSelectedTime(time)\n    onTimeSelect(selectedDate, time)\n    \n    // 自动弹出购物车\n    setTimeout(() => {\n      const cartBtn = document.querySelector('.checkout-btn:not(.disabled)')\n      if (cartBtn) {\n        (cartBtn as HTMLElement).click()\n      }\n    }, 300)\n  }\n\n  const dateList = generateDateList()\n  const timeGrid = generateTimeGrid()\n\n  return (\n    <View className=\"booking-selector\">\n      {/* 服务选择 */}\n      <View className=\"service-section\">\n        <View className=\"section-title\">选择服务</View>\n        <ScrollView className=\"service-tabs\" scrollX>\n          {services.map(service => (\n            <View\n              key={service.id}\n              className={`service-tab ${selectedServiceId === service.id ? 'active' : ''}`}\n              onClick={() => handleServiceSelect(service)}\n            >\n              <Text className=\"service-name\">{service.name}</Text>\n              <View className=\"service-info\">\n                <Text className=\"service-duration\">{service.duration}分钟</Text>\n                <Text className=\"price\">¥{service.discountPrice || service.price}</Text>\n              </View>\n            </View>\n          ))}\n        </ScrollView>\n      </View>\n\n      {/* 日期时间选择 */}\n      {selectedServiceId && (\n        <View className=\"datetime-section\">\n          {/* 日期选择 */}\n          <ScrollView className=\"date-tabs\" scrollX>\n            {dateList.map(date => (\n              <View\n                key={date.key}\n                className={`date-tab ${selectedDate === date.key ? 'active' : ''}`}\n                onClick={() => handleDateSelect(date.key)}\n              >\n                <Text className=\"date-display\">{date.display}</Text>\n                {date.weekDay && <Text className=\"week-day\">{date.weekDay}</Text>}\n              </View>\n            ))}\n          </ScrollView>\n\n          {/* 时间段选择 */}\n          {selectedDate && (\n            <>\n              {/* 错误提示 */}\n              {slotsError && (\n                <View className=\"error-message\">\n                  <Text>{slotsError}</Text>\n                </View>\n              )}\n\n              <ScrollView className=\"time-grid-container\" scrollY>\n                <View className=\"time-grid-wrapper\">\n                  {loadingSlots ? (\n                    <View className=\"loading-slots\">\n                      <Text>加载可用时段...</Text>\n                    </View>\n                  ) : slotsError ? (\n                    <View className=\"error-state\">\n                      <Text>暂无可用时段</Text>\n                      <Text className=\"error-hint\">请选择其他日期或推拿师</Text>\n                    </View>\n                  ) : (\n                    timeGrid.map((row, rowIndex) => (\n                    <View key={rowIndex} className=\"time-row\">\n                      <Text className=\"hour-label\">{row.hour}</Text>\n                      <View className=\"time-slots\">\n                        {row.slots.map((slot, slotIndex) => (\n                          <View\n                            key={slotIndex}\n                            className={`time-slot ${\n                              slot.available\n                                ? isTimeSlotSelected(slot.time)\n                                  ? 'selected'\n                                  : 'available'\n                                : 'disabled'\n                            }`}\n                            onClick={() => handleTimeSelect(slot.time, slot.available)}\n                          >\n                            <Text className=\"time-text\">:{slot.time.split(':')[1]}</Text>\n                          </View>\n                        ))}\n                      </View>\n                    </View>\n                  ))\n                  )}\n                </View>\n              </ScrollView>\n            </>\n          )}\n        </View>\n      )}\n    </View>\n  )\n})\n\nBookingSelector.displayName = 'BookingSelector'\n\nexport default BookingSelector","import React, { useState, useEffect, useRef } from 'react'\nimport Taro, { useRouter } from '@tarojs/taro'\nimport { View, Text, ScrollView } from '@tarojs/components'\nimport { therapistService } from '@/services/therapist'\nimport { storeService } from '@/services/store'\nimport { getLocationService } from '@/services/location'\nimport { reviewService, ReviewData, ReviewStats } from '@/services/review'\nimport { symptomService } from '@/services/symptom'\nimport TherapistInfo from './components/TherapistInfo'\nimport StoreInfo from './components/StoreInfo'\nimport BookingSelector, { BookingSelectorHandle } from './components/BookingSelector'\nimport ShoppingCart from './components/ShoppingCart'\nimport type { Therapist, Store } from '@/types'\nimport './index.scss'\n\ninterface CartItem {\n  id: string  // 唯一标识符：用于精确追踪\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistId?: string\n  therapistName: string\n  therapistAvatar?: string\n}\n\nconst TherapistBookingPage: React.FC = () => {\n  const router = useRouter()\n  const { therapistId, storeId } = router.params\n  \n  const [therapist, setTherapist] = useState<Therapist | null>(null)\n  const [store, setStore] = useState<Store | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n\n  // 评价相关状态\n  const [reviews, setReviews] = useState<ReviewData[]>([])\n  const [reviewStats, setReviewStats] = useState<ReviewStats | null>(null)\n  const [reviewsLoading, setReviewsLoading] = useState(false)\n\n  // 预约选择状态\n  const [cartItems, setCartItems] = useState<CartItem[]>([])\n  const [selectedService, setSelectedService] = useState<any>(null)\n\n  // BookingSelector 组件引用\n  const bookingSelectorRef = useRef<BookingSelectorHandle>(null)\n\n  // ✅ 从 API 获取的服务数据\n  const [services, setServices] = useState<any[]>([])\n  const [servicesLoading, setServicesLoading] = useState(false)\n\n  useEffect(() => {\n    loadData()\n  }, [therapistId, storeId])\n\n  // 加载评价数据\n  useEffect(() => {\n    if (therapistId) {\n      loadReviews()\n    }\n  }, [therapistId])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      setError('')\n\n      // 添加调试日志\n      console.log('TherapistBookingPage params:', { therapistId, storeId })\n\n      if (!therapistId || !storeId) {\n        console.error('Missing required params:', { therapistId, storeId })\n        setError('参数错误，请重新进入')\n        return\n      }\n\n      // ✅ 并行加载：推拿师、门店、位置和服务数据\n      const [therapistRes, storeData, userLocation, servicesResponse] = await Promise.all([\n        therapistService.getTherapistDetail(therapistId),\n        storeService.getStoreDetail(storeId),\n        getLocationService.getCurrentLocation(),\n        symptomService.getTherapistSymptomServices(therapistId) // ✅ 新增：从 API 获取服务\n      ])\n\n      console.log('Store data response:', storeData)\n      console.log('Therapist data response:', therapistRes)\n      console.log('✅ Services data response:', servicesResponse) // ✅ 调试日志\n\n      // 根据API返回的实际结构处理数据\n      const therapistData = therapistRes.data || therapistRes\n      const storeDataRaw = storeData?.data || storeData\n\n      // 计算门店距离\n      let storeDataFinal = { ...storeDataRaw }\n      if (storeDataRaw?.latitude && storeDataRaw?.longitude) {\n        const distance = getLocationService.calculateDistance(\n          userLocation.latitude,\n          userLocation.longitude,\n          storeDataRaw.latitude,\n          storeDataRaw.longitude\n        )\n        storeDataFinal = {\n          ...storeDataRaw,\n          distance\n        }\n      }\n\n      // ✅ 设置服务列表\n      const servicesList = servicesResponse.data || []\n      setServices(servicesList)\n      console.log(`✅ 加载了 ${servicesList.length} 个服务`)\n\n      setTherapist(therapistData)\n      setStore(storeDataFinal)\n\n      // 验证数据是否正确设置\n      console.log('Store state after setting:', storeDataFinal)\n      console.log('Therapist state after setting:', therapistData)\n    } catch (err) {\n      console.error('Failed to load data:', err)\n      setError('加载数据失败，请重试')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadReviews = async () => {\n    if (!therapistId) return\n\n    try {\n      setReviewsLoading(true)\n\n      // 并行获取评价列表和统计数据\n      const [reviewsResponse, statsResponse] = await Promise.all([\n        reviewService.getTherapistReviews(therapistId, 1, 10),\n        reviewService.getReviewStats(therapistId)\n      ])\n\n      setReviews(reviewsResponse.list || [])\n      setReviewStats(statsResponse)\n\n      // 如果有评价统计，更新技师的评分\n      if (statsResponse && therapist) {\n        setTherapist({\n          ...therapist,\n          rating: statsResponse.averageRating,\n          ratingCount: statsResponse.totalCount\n        })\n      }\n    } catch (error) {\n      console.error('加载评价数据失败:', error)\n      // 静默处理错误，不影响主要功能\n    } finally {\n      setReviewsLoading(false)\n    }\n  }\n\n  const handleServiceSelect = (service: any) => {\n    setSelectedService(service)\n  }\n\n  const handleTimeSelect = (date: string, time: string) => {\n    if (!selectedService || !therapist) return\n\n    // 生成唯一ID：基于日期+时间+时间戳\n    const itemId = `${date}_${time}_${Date.now()}`\n\n    const newItem: CartItem = {\n      id: itemId,\n      serviceId: selectedService.id,\n      serviceName: selectedService.name,\n      duration: selectedService.duration,\n      price: selectedService.price,\n      discountPrice: selectedService.discountPrice,\n      date,\n      time,\n      therapistId: therapist.id,\n      therapistName: therapist.name,\n      therapistAvatar: therapist.avatar\n    }\n\n    // 单选模式：直接替换购物车内容，只保留最新选择\n    setCartItems([newItem])\n\n    Taro.showToast({\n      title: '已选择预约时间',\n      icon: 'success'\n    })\n  }\n\n  // 撤销操作（点击遮罩时）\n  const handleCartMaskClick = () => {\n    // 清空购物车\n    setCartItems([])\n\n    // 清除选中的时间\n    bookingSelectorRef.current?.clearSelectedTime()\n  }\n\n  const handleCheckout = () => {\n    if (cartItems.length === 0) return\n\n    // 导航到预约确认页面\n    const params = {\n      therapistId: therapistId!,\n      storeId: storeId!,\n      items: JSON.stringify(cartItems)\n    }\n\n    Taro.navigateTo({\n      url: `/pages/booking/confirm/index?${Object.entries(params)\n        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n        .join('&')}`\n    })\n  }\n\n  if (loading) {\n    return (\n      <View className=\"therapist-booking-page\">\n        <View className=\"loading\">加载中...</View>\n      </View>\n    )\n  }\n\n  if (error || !therapist || !store) {\n    return (\n      <View className=\"therapist-booking-page\">\n        <View className=\"error\">{error || '数据加载失败'}</View>\n      </View>\n    )\n  }\n\n  return (\n    <View className=\"therapist-booking-page\">\n      <ScrollView className=\"main-content\" scrollY>\n        <TherapistInfo\n          therapist={therapist}\n          stats={reviewStats}\n          reviews={reviews}\n          reviewsLoading={reviewsLoading}\n        />\n        {store && <StoreInfo store={store} />}\n        <BookingSelector\n          ref={bookingSelectorRef}\n          services={services}\n          therapistId={therapistId}\n          onServiceSelect={handleServiceSelect}\n          onTimeSelect={handleTimeSelect}\n        />\n      </ScrollView>\n      <ShoppingCart\n        items={cartItems}\n        therapist={therapist}\n        onCheckout={handleCheckout}\n        onMaskClick={handleCartMaskClick}\n      />\n    </View>\n  )\n}\n\nexport default TherapistBookingPage"],"names":["TherapistInfo","therapist","stats","reviews","reviewsLoading","isExpanded","setIsExpanded","useState","therapistDetail","level","rating","averageRating","serviceCount","reviewCount","totalCount","description","bio","console","log","therapistId","id","originalTherapist","toggleExpanded","formatDate","dateStr","date","Date","month","getMonth","day","getDate","jsxs","View","jsx","Image","avatar","Text","name","toFixed","AtRate","length","slice","map","review","userName","createdAt","content","tags","tag","index","reviewId","StoreInfo","store","handleCallStore","phone","Taro","makePhoneCall","phoneNumber","handleShowLocation","latitude","longitude","openLocation","address","distance","undefined","businessHours","BookingSelector","forwardRef","services","onServiceSelect","onTimeSelect","ref","selectedServiceId","setSelectedServiceId","selectedService","setSelectedService","selectedDate","setSelectedDate","selectedTime","setSelectedTime","timeSlots","setTimeSlots","loadingSlots","setLoadingSlots","slotsError","setSlotsError","useImperativeHandle","clearSelectedTime","useEffect","handleVisibilityChange","document","hidden","addEventListener","removeEventListener","fetchAvailableSlots","result","therapistService","getAvailableSlots","duration","slots","grid","hourAvailability","Map","forEach","slot","hour","time","split","set","available","status","hourStr","toString","padStart","hourSlots","hourData","get","minute","find","s","push","error","code","response","generateDateList","dates","today","i","setDate","weekDays","weekDay","getDay","key","toISOString","display","generateTimeGrid","isTimeSlotSelected","startTime","timeToMinutes","timeStr","Number","startMinutes","currentMinutes","endMinutes","handleServiceSelect","service","handleDateSelect","dateKey","handleTimeSelect","setTimeout","cartBtn","querySelector","click","dateList","timeGrid","ScrollView","discountPrice","price","row","rowIndex","slotIndex","displayName","TherapistBookingPage","router","useRouter","storeId","params","setTherapist","setStore","loading","setLoading","setError","setReviews","reviewStats","setReviewStats","setReviewsLoading","cartItems","setCartItems","bookingSelectorRef","useRef","setServices","loadData","therapistRes","storeData","userLocation","servicesResponse","Promise","all","getTherapistDetail","storeService","getStoreDetail","getLocationService","getCurrentLocation","symptomService","getTherapistSymptomServices","therapistData","data","storeDataRaw","storeDataFinal","calculateDistance","servicesList","err","loadReviews","reviewsResponse","statsResponse","reviewService","getTherapistReviews","getReviewStats","list","ratingCount","itemId","now","newItem","serviceId","serviceName","therapistName","therapistAvatar","showToast","title","icon","handleCartMaskClick","current","handleCheckout","items","JSON","stringify","navigateTo","url","Object","entries","value","encodeURIComponent","join","ShoppingCart"],"mappings":"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"}