{"version":3,"file":"index.js","sources":["../../../src/services/location.ts","../../../src/components/StoreCard/index.tsx","../../../src/components/TherapistCard/index.tsx","../../../src/components/BottomSheet/index.tsx","../../../src/pages/appointment/index.tsx"],"sourcesContent":["import Taro from '@tarojs/taro'\n\nexport interface Location {\n  latitude: number\n  longitude: number\n}\n\nclass LocationService {\n  // 获取用户当前位置\n  async getCurrentLocation(): Promise<Location> {\n    try {\n      // 检查授权状态\n      const settingRes = await Taro.getSetting()\n      const authSetting = settingRes?.authSetting || {}\n\n      if (!authSetting['scope.userLocation']) {\n        // 请求授权\n        await Taro.authorize({\n          scope: 'scope.userLocation'\n        })\n      }\n      \n      // 获取位置，先尝试gcj02，失败则降级到wgs84\n      let res\n      try {\n        res = await Taro.getLocation({\n          type: 'gcj02', // 国内火星坐标系\n          isHighAccuracy: true\n        })\n      } catch (gcj02Error) {\n        console.warn('gcj02坐标系不支持，尝试wgs84:', gcj02Error)\n        // 降级到wgs84坐标系\n        res = await Taro.getLocation({\n          type: 'wgs84' // GPS原始坐标系\n        })\n      }\n\n      return {\n        latitude: res.latitude,\n        longitude: res.longitude\n      }\n    } catch (error) {\n      console.error('获取位置失败:', error)\n\n      // 如果用户拒绝授权或其他错误，使用默认位置（上海市中心）\n      const errorMsg = (error as any)?.errMsg || ''\n\n      // 只在用户明确拒绝授权时才显示弹窗\n      if (errorMsg.includes('auth deny') || errorMsg.includes('authorize:fail')) {\n        Taro.showModal({\n          title: '提示',\n          content: '需要获取您的位置信息来推荐附近门店',\n          confirmText: '去设置',\n          success: (res) => {\n            if (res.confirm) {\n              Taro.openSetting()\n            }\n          }\n        })\n      }\n\n      // 无论什么错误，都返回默认位置（上海市中心）\n      console.log('使用默认位置：上海市中心')\n      return {\n        latitude: 31.2304,\n        longitude: 121.4737\n      }\n    }\n  }\n  \n  // 计算两点之间的距离（单位：公里）\n  calculateDistance(\n    lat1: number,\n    lng1: number,\n    lat2: number,\n    lng2: number\n  ): number {\n    const rad = Math.PI / 180\n    const R = 6371 // 地球半径（公里）\n    \n    const dLat = (lat2 - lat1) * rad\n    const dLng = (lng2 - lng1) * rad\n    \n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * rad) * Math.cos(lat2 * rad) *\n      Math.sin(dLng / 2) * Math.sin(dLng / 2)\n      \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    \n    return Number((R * c).toFixed(1))\n  }\n  \n  // 格式化距离显示\n  formatDistance(distance: number): string {\n    if (distance < 1) {\n      return `${Math.round(distance * 1000)}m`\n    }\n    return `${distance}km`\n  }\n}\n\nexport const getLocationService = new LocationService()","import React from 'react'\nimport { View, Text, Image } from '@tarojs/components'\nimport BookingButton from '@/components/BookingButton'\nimport type { Store } from '@/types'\nimport './index.scss'\n\ninterface StoreCardProps {\n  store: Store\n  onClick?: () => void\n}\n\nconst StoreCard: React.FC<StoreCardProps> = ({ store, onClick }) => {\n  const getStatusText = (status: Store['status']) => {\n    switch (status) {\n      case 'normal':\n        return '就近'\n      case 'busy':\n        return '繁忙'\n      case 'full':\n        return '爆满'\n      default:\n        return ''\n    }\n  }\n\n  const getStatusClass = (status: Store['status']) => {\n    switch (status) {\n      case 'normal':\n        return 'status-normal'\n      case 'busy':\n        return 'status-busy'\n      case 'full':\n        return 'status-full'\n      default:\n        return ''\n    }\n  }\n\n  return (\n    <View className=\"store-card\" onClick={onClick}>\n      <View className=\"card-content\">\n        <View className=\"store-image-wrapper\">\n          <Image\n            className=\"store-image\"\n            src={store.images?.[0] || store.image || '/static/images/default-store.jpg'}\n            mode=\"aspectFill\"\n          />\n        </View>\n        \n        <View className=\"store-info\">\n          <Text className=\"store-name\">{store.name}</Text>\n          \n          <View className=\"business-hours\">\n            <Text className=\"hours-text\">\n              {store.businessHours}\n            </Text>\n            <Text className={`status ${getStatusClass(store.status)}`}>\n              {getStatusText(store.status)}\n            </Text>\n          </View>\n          \n          <View className=\"store-address\">\n            <Text className=\"address-text\" numberOfLines={1}>\n              {store.address}\n            </Text>\n          </View>\n          \n          <View className=\"store-footer\">\n            <View className=\"distance\">\n              <Text className=\"icon\">📍</Text>\n              <Text className=\"distance-text\">{store.distance}km</Text>\n            </View>\n            <BookingButton \n              size=\"small\"\n            />\n          </View>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default StoreCard","import React, { useState, useEffect } from 'react'\nimport { View, Text, Image } from '@tarojs/components'\nimport BookingButton from '@/components/BookingButton'\nimport { reviewService } from '@/services/review'\nimport type { Therapist } from '@/types'\nimport './index.scss'\n\ninterface TherapistCardProps {\n  therapist: Therapist\n  onClick?: () => void\n}\n\nconst TherapistCard: React.FC<TherapistCardProps> = ({ therapist, onClick }) => {\n  const [reviewStats, setReviewStats] = useState<{totalCount: number, averageRating: number} | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const loadReviewStats = async () => {\n      try {\n        const stats = await reviewService.getReviewStats(therapist.id)\n        setReviewStats(stats)\n      } catch (error) {\n        console.error('获取推拿师评价统计失败:', error)\n        setReviewStats(null)\n      } finally {\n        setLoading(false)\n      }\n    }\n    loadReviewStats()\n  }, [therapist.id])\n\n  // 决定显示什么评分信息\n  const getRatingDisplay = () => {\n    if (loading) return '...'\n    if (!reviewStats || reviewStats.totalCount === 0) return '待评价'\n    return `${reviewStats.averageRating}分`\n  }\n\n  return (\n    <View className=\"therapist-card\" onClick={onClick}>\n      <View className=\"card-content\">\n        <Image\n          className=\"therapist-avatar\"\n          src={therapist.avatar}\n          mode=\"aspectFill\"\n        />\n\n        <View className=\"therapist-info\">\n          <View className=\"info-header\">\n            <Text className=\"therapist-name\">{therapist.name}</Text>\n            <View className=\"distance\">\n              <Text className=\"icon\">📍</Text>\n              <Text className=\"distance-text\">{therapist.distance}km</Text>\n            </View>\n          </View>\n\n          <View className=\"expertise-tags\">\n            {therapist.expertise.map((tag, index) => (\n              <Text key={index} className=\"expertise-tag\">\n                {tag}\n              </Text>\n            ))}\n          </View>\n\n          <View className=\"therapist-footer\">\n            <View className=\"rating\">\n              <Text className=\"icon\">⭐</Text>\n              <Text className=\"rating-text\">{getRatingDisplay()}</Text>\n            </View>\n            <BookingButton\n              size=\"small\"\n            />\n          </View>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default TherapistCard","import React, { useState, useEffect } from 'react'\nimport { View, Text } from '@tarojs/components'\nimport { AtIcon } from 'taro-ui'\nimport './index.scss'\n\ninterface BottomSheetProps {\n  visible: boolean\n  title: string\n  onClose: () => void\n  children: React.ReactNode\n  height?: string  // 可自定义高度，默认 70%\n}\n\nconst BottomSheet: React.FC<BottomSheetProps> = ({\n  visible,\n  title,\n  onClose,\n  children,\n  height = '70%'\n}) => {\n  const [animating, setAnimating] = useState(false)\n  const [internalVisible, setInternalVisible] = useState(false)\n\n  useEffect(() => {\n    if (visible) {\n      setInternalVisible(true)\n      setTimeout(() => setAnimating(true), 50)\n    } else {\n      setAnimating(false)\n      setTimeout(() => setInternalVisible(false), 300)\n    }\n  }, [visible])\n\n  const handleMaskClick = () => {\n    onClose()\n  }\n\n  const handleContentClick = (e: any) => {\n    e.stopPropagation()\n  }\n\n  if (!internalVisible) return null\n\n  return (\n    <View className=\"bottom-sheet\" onClick={handleMaskClick}>\n      <View \n        className={`bottom-sheet-mask ${animating ? 'active' : ''}`}\n      />\n      <View \n        className={`bottom-sheet-content ${animating ? 'active' : ''}`}\n        style={{ height }}\n        onClick={handleContentClick}\n      >\n        {/* 头部 */}\n        <View className=\"sheet-header\">\n          <Text className=\"sheet-title\">{title}</Text>\n          <View className=\"close-btn\" onClick={onClose}>\n            <AtIcon value=\"close\" size=\"20\" color=\"#999\" />\n          </View>\n        </View>\n        \n        {/* 内容区域 */}\n        <View className=\"sheet-body\">\n          {children}\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default BottomSheet","import React, { useEffect, useState } from 'react'\nimport Taro from '@tarojs/taro'\nimport { View, Text, Image, Swiper, SwiperItem, Input } from '@tarojs/components'\nimport { AtButton } from 'taro-ui'\nimport { getLocationService } from '@/services/location'\nimport { storeService } from '@/services/store'\nimport { therapistService } from '@/services/therapist'\nimport StoreCard from '@/components/StoreCard'\nimport TherapistCard from '@/components/TherapistCard'\nimport BottomSheet from '@/components/BottomSheet'\nimport type { Store, Therapist } from '@/types'\nimport './index.scss'\n\n// 导入本地图片\nimport bannerGoodnight from '@/assets/images/banners/goodnight.jpg'\n\nconst Appointment: React.FC = () => {\n  const [loading, setLoading] = useState(true)\n  const [stores, setStores] = useState<Store[]>([])\n  const [allStores, setAllStores] = useState<Store[]>([])  // 所有门店数据\n  const [therapists, setTherapists] = useState<Therapist[]>([])\n  const [userLocation, setUserLocation] = useState({ latitude: 0, longitude: 0 })\n  const [locationStatus, setLocationStatus] = useState<'loading' | 'success' | 'error'>('loading')\n  const [locationText, setLocationText] = useState('正在获取位置...')\n  const [showStoreSheet, setShowStoreSheet] = useState(false)  // 控制门店弹出层\n  const [searchValue, setSearchValue] = useState('')  // 搜索框值\n\n  // 优惠活动数据（Mock）\n  const banners = [\n    {\n      id: 1,\n      image: bannerGoodnight,\n      title: '晚安好眠',\n      subtitle: '深度放松助眠服务',\n      link: ''\n    }\n  ]\n\n  useEffect(() => {\n    loadData()\n  }, [])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      setLocationStatus('loading')\n      setLocationText('正在获取位置...')\n      \n      // 获取用户位置\n      const location = await getLocationService.getCurrentLocation()\n      setUserLocation(location)\n      \n      // 判断是否是默认位置（上海市中心）\n      if (location.latitude === 31.2304 && location.longitude === 121.4737) {\n        setLocationStatus('error')\n        setLocationText('定位失败，使用默认位置')\n      } else {\n        setLocationStatus('success')\n        setLocationText('定位成功')\n        // 2秒后显示为具体位置（这里可以后续接入逆地理编码）\n        setTimeout(() => {\n          setLocationText('上海市')\n        }, 2000)\n      }\n      \n      // 获取附近门店（只显示最近的2家）\n      const nearbyStores = await storeService.getNearbyStores(\n        location.latitude, \n        location.longitude, \n        1, \n        2\n      )\n      setStores(nearbyStores.list)\n      \n      // 获取所有门店数据（用于更多门店）\n      const allStoresData = await storeService.getNearbyStores(\n        location.latitude, \n        location.longitude, \n        1, \n        20  // 获取更多数据\n      )\n      setAllStores(allStoresData.list)\n      \n      // 获取推荐推拿师（传递用户位置以计算距离）\n      const recommendedTherapists = await therapistService.getRecommendedTherapists(\n        1,\n        10,\n        location\n      )\n      setTherapists(recommendedTherapists.list)\n      \n    } catch (error) {\n      console.error('加载数据失败:', error)\n      setLocationStatus('error')\n      setLocationText('定位失败')\n      \n      Taro.showToast({\n        title: '加载失败，请重试',\n        icon: 'none'\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleStoreClick = (store: Store) => {\n    Taro.navigateTo({\n      url: `/pages/appointment/store/index?id=${store.id}`\n    })\n  }\n\n  const handleTherapistClick = (therapist: Therapist) => {\n    // 跳转到推拿师预约页面\n    Taro.navigateTo({\n      url: `/pages/appointment/therapist/index?therapistId=${therapist.id}&storeId=${therapist.storeId}`\n    })\n  }\n\n\n\n  const handleMoreStores = () => {\n    setShowStoreSheet(true)\n  }\n\n  const handleMoreSymptoms = () => {\n    Taro.showToast({\n      title: '功能开发中',\n      icon: 'none'\n    })\n  }\n\n  const handleBannerClick = (banner: any) => {\n    // 跳转到优惠专区页面\n    Taro.navigateTo({\n      url: '/pages/promotion/index'\n    })\n  }\n\n  return (\n    <View className=\"appointment-page\">\n      {/* 头部位置区域 */}\n      <View className=\"header\">\n        <View className=\"location\">\n          <Text className=\"icon\">\n            {locationStatus === 'loading' ? '📍' : locationStatus === 'success' ? '📍' : '⚠️'}\n          </Text>\n          <Text className={`text ${locationStatus}`}>{locationText}</Text>\n          {locationStatus === 'error' && (\n            <Text className=\"retry-btn\" onClick={loadData}>重试</Text>\n          )}\n        </View>\n      </View>\n      \n      {/* 优惠活动轮播 */}\n      <View className=\"banner-section\">\n        <Text className=\"section-title\">优惠预约</Text>\n        <Swiper\n          className=\"banner-swiper\"\n          autoplay\n          interval={3000}\n          indicatorDots\n          indicatorActiveColor=\"#D9455F\"\n        >\n          {banners.map((banner) => (\n            <SwiperItem key={banner.id}>\n              <View className=\"banner-item\" onClick={() => handleBannerClick(banner)}>\n                <Image className=\"banner-image\" src={banner.image} mode=\"aspectFill\" />\n              </View>\n            </SwiperItem>\n          ))}\n        </Swiper>\n      </View>\n      \n      {/* 门店预约 */}\n      <View className=\"stores-section\">\n        <View className=\"section-header\">\n          <Text className=\"section-title\">门店预约</Text>\n          <Text className=\"more-link\" onClick={handleMoreStores}>\n            更多门店 {'>>'}\n          </Text>\n        </View>\n        <View className=\"store-list\">\n          {stores.map((store) => (\n            <StoreCard \n              key={store.id} \n              store={store} \n              onClick={() => handleStoreClick(store)}\n            />\n          ))}\n        </View>\n      </View>\n      \n      {/* 推拿师预约 */}\n      <View className=\"therapists-section\">\n        <View className=\"section-header\">\n          <Text className=\"section-title\">推拿师预约</Text>\n          <Text className=\"more-link\" onClick={handleMoreSymptoms}>\n            更多症状 {'>>'}\n          </Text>\n        </View>\n        <View className=\"therapist-list\">\n          {therapists.map((therapist) => (\n            <TherapistCard \n              key={therapist.id} \n              therapist={therapist}\n              onClick={() => handleTherapistClick(therapist)}\n            />\n          ))}\n        </View>\n      </View>\n      \n      {/* 更多门店弹出层 */}\n      <BottomSheet\n        visible={showStoreSheet}\n        title=\"更多门店\"\n        onClose={() => setShowStoreSheet(false)}\n        height=\"80%\"\n      >\n        {/* 城市选择和搜索框 */}\n        <View className=\"store-sheet-header\">\n          <View className=\"city-selector\">\n            <Text className=\"city-name\">上海市</Text>\n            <Text className=\"city-arrow\">▼</Text>\n          </View>\n          <View className=\"search-box\">\n            <Text className=\"search-icon\">🔍</Text>\n            <Input \n              className=\"search-input\"\n              placeholder=\"搜索门店\"\n              value={searchValue}\n              onInput={(e) => setSearchValue(e.detail.value)}\n            />\n          </View>\n        </View>\n        \n        {/* 门店列表 */}\n        <View className=\"store-sheet-list\">\n          {allStores\n            .filter(store => \n              searchValue === '' || \n              store.name.includes(searchValue) || \n              store.address.includes(searchValue)\n            )\n            .map((store) => (\n              <StoreCard \n                key={store.id} \n                store={store} \n                onClick={() => {\n                  handleStoreClick(store)\n                  setShowStoreSheet(false)\n                }}\n              />\n            ))\n          }\n        </View>\n      </BottomSheet>\n    </View>\n  )\n}\n\nexport default Appointment"],"names":["LocationService","getCurrentLocation","settingRes","Taro","getSetting","authSetting","authorize","scope","res","getLocation","type","isHighAccuracy","gcj02Error","warn","latitude","longitude","error","errorMsg","errMsg","includes","showModal","title","content","confirmText","success","confirm","openSetting","console","log","calculateDistance","lat1","lng1","lat2","lng2","rad","Math","PI","R","dLat","dLng","a","sin","cos","c","atan2","sqrt","Number","toFixed","formatDistance","distance","round","getLocationService","StoreCard","store","onClick","getStatusText","status","getStatusClass","jsx","View","jsxs","Image","images","image","Text","name","businessHours","address","BookingButton","TherapistCard","therapist","reviewStats","setReviewStats","useState","loading","setLoading","useEffect","loadReviewStats","stats","reviewService","getReviewStats","id","getRatingDisplay","totalCount","averageRating","avatar","expertise","map","tag","index","BottomSheet","visible","onClose","children","height","animating","setAnimating","internalVisible","setInternalVisible","setTimeout","handleMaskClick","handleContentClick","e","stopPropagation","AtIcon","Appointment","stores","setStores","allStores","setAllStores","therapists","setTherapists","userLocation","setUserLocation","locationStatus","setLocationStatus","locationText","setLocationText","showStoreSheet","setShowStoreSheet","searchValue","setSearchValue","banners","bannerGoodnight","subtitle","link","loadData","location","nearbyStores","storeService","getNearbyStores","list","allStoresData","recommendedTherapists","therapistService","getRecommendedTherapists","showToast","icon","handleStoreClick","navigateTo","url","handleTherapistClick","storeId","handleMoreStores","handleMoreSymptoms","handleBannerClick","banner","Swiper","SwiperItem","Input","detail","value","filter"],"mappings":"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"}