{"version":3,"file":"index.js","sources":["../../../../src/components/SymptomCategoryTabs/index.tsx","../../../../src/components/SymptomServiceCard/index.tsx","../../../../src/components/SymptomServiceList/index.tsx","../../../../src/pages/appointment/symptom/components/ShoppingCart/index.tsx","../../../../src/mock/data/symptoms.ts","../../../../src/services/symptom.ts","../../../../src/pages/appointment/symptom/index.tsx"],"sourcesContent":["import { View, Text, ScrollView } from '@tarojs/components'\nimport classNames from 'classnames'\nimport './index.scss'\n\ninterface Category {\n  id: string\n  name: string\n}\n\ninterface SymptomCategoryTabsProps {\n  categories: Category[]\n  activeId: string\n  onChange: (id: string) => void\n  className?: string\n}\n\nconst SymptomCategoryTabs: React.FC<SymptomCategoryTabsProps> = ({\n  categories,\n  activeId,\n  onChange,\n  className\n}) => {\n  return (\n    <ScrollView \n      className={classNames('symptom-category-tabs', className)}\n      scrollY\n      showScrollbar={false}\n    >\n      {categories.map((category) => (\n        <View\n          key={category.id}\n          className={classNames('category-item', {\n            'active': category.id === activeId\n          })}\n          onClick={() => onChange(category.id)}\n        >\n          <Text className=\"category-name\">{category.name}</Text>\n        </View>\n      ))}\n    </ScrollView>\n  )\n}\n\nexport default SymptomCategoryTabs","import { View, Text } from '@tarojs/components'\nimport classNames from 'classnames'\nimport './index.scss'\n\ninterface SymptomServiceCardProps {\n  service: {\n    id: string\n    name: string\n    description: string\n    duration: number\n    price: number\n    discountPrice?: number\n    availability: 'available' | 'busy' | 'full'\n  }\n  onAdd: () => void\n  isInCart?: boolean\n  className?: string\n}\n\nconst SymptomServiceCard: React.FC<SymptomServiceCardProps> = ({\n  service,\n  onAdd,\n  isInCart = false,\n  className\n}) => {\n  const availabilityText = {\n    available: '空闲',\n    busy: '繁忙',\n    full: '爆满'\n  }\n\n  const availabilityClass = {\n    available: 'status-available',\n    busy: 'status-busy',\n    full: 'status-full'\n  }\n\n  return (\n    <View className={classNames('symptom-service-card', className)}>\n      <View className=\"service-header\">\n        <Text className=\"service-name\">{service.name}</Text>\n        <Text className={classNames('service-status', availabilityClass[service.availability])}>\n          {availabilityText[service.availability]}\n        </Text>\n      </View>\n      \n      <Text className=\"service-description\">{service.description}</Text>\n      \n      <View className=\"service-footer\">\n        <View className=\"service-info\">\n          <Text className=\"service-duration\">{service.duration}分钟</Text>\n          <View className=\"service-price\">\n            <Text className=\"price-current\">¥{service.discountPrice || service.price}</Text>\n            {service.discountPrice && (\n              <Text className=\"price-original\">¥{service.price}</Text>\n            )}\n          </View>\n        </View>\n        \n        <View \n          className={classNames('add-button', {\n            'in-cart': isInCart,\n            'disabled': service.availability === 'full'\n          })}\n          onClick={service.availability !== 'full' ? onAdd : undefined}\n        >\n          {service.availability === 'full' ? (\n            <Text className=\"button-text\">已满</Text>\n          ) : (\n            <Text className=\"iconfont icon-add\"></Text>\n          )}\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default SymptomServiceCard","import { View, ScrollView, Text, Image } from '@tarojs/components'\nimport SymptomServiceCard from '../SymptomServiceCard'\nimport './index.scss'\n\ninterface SymptomService {\n  id: string\n  name: string\n  description: string\n  duration: number\n  price: number\n  discountPrice?: number\n  availability: 'available' | 'busy' | 'full'\n  therapistId?: string\n}\n\ninterface Therapist {\n  id: string\n  name: string\n  avatar: string\n  rating: number\n  level?: number\n}\n\ninterface SymptomServiceListProps {\n  services: SymptomService[]\n  therapists: Therapist[]\n  onAddToCart: (service: SymptomService, therapistId: string) => void\n  cartServiceIds: string[]\n  className?: string\n}\n\nconst SymptomServiceList: React.FC<SymptomServiceListProps> = ({\n  services,\n  therapists,\n  onAddToCart,\n  cartServiceIds,\n  className\n}) => {\n  // 按推拿师分组服务\n  const groupedServices = therapists.map(therapist => {\n    const therapistServices = services.filter(service => service.therapistId === therapist.id)\n    return {\n      therapist,\n      services: therapistServices\n    }\n  }).filter(group => group.services.length > 0)\n\n  return (\n    <ScrollView \n      className={`symptom-service-list ${className || ''}`}\n      scrollY\n      showScrollbar={false}\n    >\n      <View className=\"service-list-content\">\n        {groupedServices.map((group) => (\n          <View key={group.therapist.id} className=\"therapist-group\">\n            {/* 推拿师信息头部 */}\n            <View className=\"therapist-header\">\n              <Image \n                className=\"therapist-avatar\" \n                src={group.therapist.avatar}\n                mode=\"aspectFill\"\n              />\n              <View className=\"therapist-info\">\n                <Text className=\"therapist-name\">{group.therapist.name}</Text>\n                <Text className=\"therapist-level\">LV{group.therapist.level || 1}</Text>\n              </View>\n              <View className=\"therapist-rating\">\n                <Text className=\"rating-score\">{group.therapist.rating}分</Text>\n                <Text className=\"view-details\">查看详情{'>'}</Text>\n              </View>\n            </View>\n            \n            {/* 该推拿师的服务列表 */}\n            {group.services.map((service) => (\n              <SymptomServiceCard\n                key={service.id}\n                service={service}\n                onAdd={() => onAddToCart(service, group.therapist.id)}\n                isInCart={cartServiceIds.includes(service.id)}\n              />\n            ))}\n          </View>\n        ))}\n      </View>\n    </ScrollView>\n  )\n}\n\nexport default SymptomServiceList","import React, { useState } from 'react'\nimport { View, Text, Image } from '@tarojs/components'\nimport { AtButton } from 'taro-ui'\nimport './index.scss'\n\ninterface CartItem {\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistName: string\n  therapistAvatar?: string\n}\n\ninterface ShoppingCartProps {\n  items: CartItem[]\n  onCheckout: () => void\n}\n\nconst ShoppingCart: React.FC<ShoppingCartProps> = ({ items, onCheckout }) => {\n  const [expanded, setExpanded] = useState(false)\n\n  const totalPrice = items.reduce((sum, item) => {\n    return sum + (item.discountPrice || item.price)\n  }, 0)\n\n  const totalOriginalPrice = items.reduce((sum, item) => {\n    return sum + item.price\n  }, 0)\n\n  const savedAmount = totalOriginalPrice - totalPrice\n\n  return (\n    <View className=\"shopping-cart\">\n      <View className=\"cart-summary\" onClick={() => setExpanded(!expanded)}>\n        <View className=\"cart-icon\">\n          <Text className=\"cart-badge\">{items.length}</Text>\n        </View>\n        <View className=\"price-info\">\n          <Text className=\"total-price\">¥{totalPrice}</Text>\n          {savedAmount > 0 && (\n            <Text className=\"saved-amount\">已省¥{savedAmount}</Text>\n          )}\n        </View>\n        <AtButton \n          className=\"checkout-btn\" \n          type=\"primary\" \n          size=\"small\"\n          onClick={(e) => {\n            e.stopPropagation()\n            onCheckout()\n          }}\n        >\n          去结算\n        </AtButton>\n      </View>\n\n      {expanded && (\n        <View className=\"cart-details\">\n          {items.map((item, index) => (\n            <View key={index} className=\"cart-item\">\n              <View className=\"item-info\">\n                <Text className=\"service-name\">{item.serviceName}</Text>\n                <Text className=\"therapist-name\">{item.therapistName} | {item.duration}分钟</Text>\n              </View>\n              <View className=\"item-price\">\n                {item.discountPrice ? (\n                  <>\n                    <Text className=\"discount-price\">¥{item.discountPrice}</Text>\n                    <Text className=\"original-price\">¥{item.price}</Text>\n                  </>\n                ) : (\n                  <Text className=\"discount-price\">¥{item.price}</Text>\n                )}\n              </View>\n            </View>\n          ))}\n        </View>\n      )}\n    </View>\n  )\n}\n\nexport default ShoppingCart","// 症状分类数据\nexport const symptomCategories = [\n  { id: '1', name: '颈肩腰腿痛调理', order: 1 },\n  { id: '2', name: '肝胆脾胃调理', order: 2 },\n  { id: '3', name: '失眠调理', order: 3 },\n  { id: '4', name: '宫寒痛经调理', order: 4 },\n  { id: '5', name: '腙筋根骶', order: 5 },\n  { id: '6', name: '运动拉伸', order: 6 },\n  { id: '7', name: '体态调理', order: 7 }\n]\n\n// 症状服务项目数据\nexport const symptomServices = [\n  // 颈肩腰腿痛调理\n  {\n    id: 's1',\n    categoryId: '1',\n    name: '【不满意退】颈肩腰腿痛特色调理60分钟',\n    description: '专业手法调理各类痛症',\n    duration: 60,\n    price: 298,\n    discountPrice: 258,\n    availability: 'available' as const,\n    tag: '不满意退'\n  },\n  {\n    id: 's2',\n    categoryId: '1',\n    name: '【冬季养生】肩颈腰背推拿+热疗60分钟',\n    description: '温经通络，驱寒养生',\n    duration: 60,\n    price: 268,\n    discountPrice: 238,\n    availability: 'available' as const,\n    tag: '冬季养生'\n  },\n  {\n    id: 's3',\n    categoryId: '1',\n    name: '【初次专享】肩颈疏通+肌肉放松',\n    description: '新客特惠，深度放松',\n    duration: 60,\n    price: 198,\n    discountPrice: 98,\n    availability: 'available' as const,\n    tag: '初次专享'\n  },\n\n  // 肝胆脾胃调理\n  {\n    id: 's4',\n    categoryId: '2',\n    name: '【舒肝润肺】推拿+艾灸｜养身伴侣90分钟',\n    description: '疏肝理气，润肺养阴',\n    duration: 90,\n    price: 398,\n    discountPrice: 358,\n    availability: 'available' as const,\n    tag: '热销'\n  },\n  {\n    id: 's5',\n    categoryId: '2',\n    name: '【专项调理】纤养瘦身·脾胃脏腑调理60分钟',\n    description: '调理脾胃，健康瘦身',\n    duration: 60,\n    price: 318,\n    discountPrice: 288,\n    availability: 'available' as const,\n    tag: '专项调理'\n  },\n\n  // 失眠调理\n  {\n    id: 's6',\n    categoryId: '3',\n    name: '【深度放松】全身推拿20年经典60分钟',\n    description: '经典手法，深度助眠',\n    duration: 60,\n    price: 268,\n    discountPrice: 238,\n    availability: 'available' as const,\n    tag: '经典'\n  },\n\n  // 宫寒痛经调理\n  {\n    id: 's7',\n    categoryId: '4',\n    name: '【特色养生】关元灸手工悬灸60分钟',\n    description: '温补肾阳，调理宫寒',\n    duration: 60,\n    price: 288,\n    discountPrice: 258,\n    availability: 'available' as const,\n    tag: '特色'\n  },\n  {\n    id: 's8',\n    categoryId: '4',\n    name: '【本店热销】特色铺姜关元灸60分钟',\n    description: '铺姜温灸，暖宫调经',\n    duration: 60,\n    price: 298,\n    discountPrice: 268,\n    availability: 'busy' as const,\n    tag: '热销'\n  },\n\n  // 腙筋根骶\n  {\n    id: 's9',\n    categoryId: '5',\n    name: '【体态调整】大师手法中式整脊60分钟',\n    description: '正骨整脊，调整体态',\n    duration: 60,\n    price: 398,\n    discountPrice: 368,\n    availability: 'available' as const,\n    tag: '大师手法'\n  },\n\n  // 运动拉伸\n  {\n    id: 's10',\n    categoryId: '6',\n    name: '运动恢复拉伸',\n    description: '专业运动后恢复',\n    duration: 45,\n    price: 198,\n    discountPrice: 168,\n    availability: 'available' as const\n  },\n\n  // 体态调理\n  {\n    id: 's11',\n    categoryId: '7',\n    name: '【净排寒气】拔罐/刮痧二选一',\n    description: '祛湿排寒，疏通经络',\n    duration: 30,\n    price: 128,\n    discountPrice: 98,\n    availability: 'available' as const,\n    tag: '二选一'\n  },\n  {\n    id: 's12',\n    categoryId: '7',\n    name: '【芳香滋养】沉浸式精油SPA',\n    description: '精油护理，身心放松',\n    duration: 90,\n    price: 428,\n    discountPrice: 398,\n    availability: 'available' as const,\n    tag: '精油SPA'\n  }\n]\n\n// 获取推拿师支持的症状服务\nexport const getTherapistSymptomServices = (therapistId: string) => {\n  // 模拟不同推拿师支持不同的服务项目\n  // 这里简化处理，返回所有服务\n  return symptomServices.map(service => ({\n    ...service,\n    therapistId,\n    // 模拟动态可用性\n    availability: Math.random() > 0.7 ? 'busy' : service.availability\n  }))\n}","import { symptomCategories, symptomServices, getTherapistSymptomServices } from '../mock/data/symptoms'\nimport { mockTherapists } from '../mock/data/therapists'\n\n// 模拟网络延迟\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\n\nexport const symptomService = {\n  // 获取症状分类\n  async getCategories() {\n    await sleep(100)\n    return {\n      code: 200,\n      data: symptomCategories,\n      message: 'success'\n    }\n  },\n\n  // 获取推拿师的症状服务列表\n  async getTherapistSymptomServices(therapistId: string) {\n    await sleep(200)\n    \n    if (!therapistId) {\n      throw new Error('推拿师ID不能为空')\n    }\n    \n    const services = getTherapistSymptomServices(therapistId)\n    \n    return {\n      code: 200,\n      data: services,\n      message: 'success'\n    }\n  },\n\n  // 获取门店所有推拿师的症状服务列表\n  async getStoreSymptomServices(storeId: string) {\n    await sleep(200)\n    \n    if (!storeId) {\n      throw new Error('门店ID不能为空')\n    }\n    \n    // 根据门店ID获取该门店的所有推拿师\n    const storeTherapists = mockTherapists.filter(t => t.storeId === storeId)\n    \n    // 汇总所有推拿师的服务\n    const allServices: any[] = []\n    \n    storeTherapists.forEach(therapist => {\n      const services = getTherapistSymptomServices(therapist.id)\n      services.forEach(service => {\n        allServices.push({\n          ...service,\n          therapistId: therapist.id, // 添加推拿师ID以便展示时分组\n          therapistName: therapist.name, // 添加推拿师名称\n          therapistAvatar: therapist.avatar // 添加推拿师头像\n        })\n      })\n    })\n    \n    return {\n      code: 200,\n      data: allServices,\n      message: 'success'\n    }\n  },\n\n  // 根据分类ID获取服务列表\n  async getServicesByCategory(therapistId: string, categoryId: string) {\n    await sleep(150)\n    \n    const allServices = getTherapistSymptomServices(therapistId)\n    const filteredServices = allServices.filter(service => service.categoryId === categoryId)\n    \n    return {\n      code: 200,\n      data: filteredServices,\n      message: 'success'\n    }\n  }\n}","import { useState, useEffect, useMemo } from 'react'\nimport { View, Text } from '@tarojs/components'\nimport Taro, { useRouter } from '@tarojs/taro'\nimport TherapistHeader from '../../../components/TherapistHeader'\nimport SymptomCategoryTabs from '../../../components/SymptomCategoryTabs'\nimport SymptomServiceList from '../../../components/SymptomServiceList'\nimport ShoppingCart from './components/ShoppingCart'\nimport { symptomService } from '../../../services/symptom'\nimport { therapistService } from '../../../services/therapist'\nimport './index.scss'\n\ninterface CartItem {\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistName: string\n  therapistAvatar?: string\n}\n\nconst SymptomPage = () => {\n  const router = useRouter()\n  const { storeId, storeName, selectedDate, selectedTime } = router.params\n\n  const [therapists, setTherapists] = useState<any[]>([])\n  const [categories, setCategories] = useState<any[]>([])\n  const [services, setServices] = useState<any[]>([])\n  const [activeCategoryId, setActiveCategoryId] = useState('')\n  const [cartItems, setCartItems] = useState<CartItem[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // 获取该门店的所有推拿师\n  useEffect(() => {\n    if (storeId) {\n      therapistService.getTherapistsByStore(storeId as string).then(res => {\n        setTherapists(res.list)\n      })\n    }\n  }, [storeId])\n\n  // 获取症状分类\n  useEffect(() => {\n    symptomService.getCategories().then(res => {\n      setCategories(res.data)\n      if (res.data.length > 0) {\n        setActiveCategoryId(res.data[0].id)\n      }\n    })\n  }, [])\n\n  // 获取该门店所有推拿师的服务列表\n  useEffect(() => {\n    if (storeId) {\n      setLoading(true)\n      symptomService.getStoreSymptomServices(storeId as string).then(res => {\n        setServices(res.data)\n        setLoading(false)\n      })\n    }\n  }, [storeId])\n\n  // 根据分类筛选服务\n  const filteredServices = useMemo(() => {\n    return services.filter(service => service.categoryId === activeCategoryId)\n  }, [services, activeCategoryId])\n\n  // 购物车中的服务ID列表\n  const cartServiceIds = useMemo(() => {\n    return cartItems.map(item => item.serviceId)\n  }, [cartItems])\n\n  // 添加到购物车\n  const handleAddToCart = (service: any, therapistId: string) => {\n    const therapist = therapists.find(t => t.id === therapistId)\n    if (!therapist) return\n\n    const newItem: CartItem = {\n      serviceId: service.id,\n      serviceName: service.name,\n      duration: service.duration,\n      price: service.price,\n      discountPrice: service.discountPrice,\n      date: selectedDate as string || new Date().toISOString().split('T')[0],\n      time: selectedTime as string || '待选择',\n      therapistName: therapist.name,\n      therapistAvatar: therapist.avatar\n    }\n\n    setCartItems([...cartItems, newItem])\n\n    Taro.showToast({\n      title: '已添加到购物车',\n      icon: 'none'\n    })\n  }\n\n\n  // 去结算\n  const handleCheckout = () => {\n    if (cartItems.length === 0) {\n      Taro.showToast({\n        title: '请先选择服务项目',\n        icon: 'none'\n      })\n      return\n    }\n\n    const params = {\n      items: JSON.stringify(cartItems),\n      storeId,\n      storeName,\n      from: 'symptom'\n    }\n\n    Taro.navigateTo({\n      url: `/pages/booking/confirm/index?${Object.entries(params)\n        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n        .join('&')}`\n    })\n  }\n\n  if (loading) {\n    return <View className=\"symptom-page loading\">加载中...</View>\n  }\n\n  return (\n    <View className=\"symptom-page\">\n\n      {/* 主内容区 */}\n      <View className=\"symptom-content\">\n        {/* 左侧分类标签 */}\n        <SymptomCategoryTabs\n          categories={categories}\n          activeId={activeCategoryId}\n          onChange={setActiveCategoryId}\n        />\n\n        {/* 右侧服务列表 - 按推拿师分组展示 */}\n        <SymptomServiceList\n          services={filteredServices}\n          therapists={therapists}\n          onAddToCart={handleAddToCart}\n          cartServiceIds={cartServiceIds}\n        />\n      </View>\n\n      {/* 底部购物车 */}\n      <ShoppingCart\n        items={cartItems}\n        onCheckout={handleCheckout}\n      />\n    </View>\n  )\n}\n\nexport default SymptomPage"],"names":["SymptomCategoryTabs","categories","activeId","onChange","className","jsx","ScrollView","classNames","map","category","View","id","Text","name","SymptomServiceCard","service","onAdd","isInCart","availabilityText","available","busy","full","availabilityClass","jsxs","availability","description","duration","discountPrice","price","undefined","SymptomServiceList","services","therapists","onAddToCart","cartServiceIds","groupedServices","therapist","therapistServices","filter","therapistId","group","length","Image","avatar","level","rating","includes","ShoppingCart","items","onCheckout","expanded","setExpanded","useState","totalPrice","reduce","sum","item","totalOriginalPrice","savedAmount","AtButton","e","stopPropagation","index","serviceName","therapistName","Fragment","symptomCategories","order","symptomServices","categoryId","tag","getTherapistSymptomServices","Math","random","sleep","ms","Promise","resolve","setTimeout","symptomService","getCategories","code","data","message","Error","getStoreSymptomServices","storeId","storeTherapists","mockTherapists","t","allServices","forEach","push","therapistAvatar","getServicesByCategory","filteredServices","SymptomPage","router","useRouter","storeName","selectedDate","selectedTime","params","setTherapists","setCategories","setServices","activeCategoryId","setActiveCategoryId","cartItems","setCartItems","loading","setLoading","useEffect","therapistService","getTherapistsByStore","then","res","list","useMemo","serviceId","handleAddToCart","find","newItem","date","Date","toISOString","split","time","Taro","showToast","title","icon","handleCheckout","JSON","stringify","from","navigateTo","url","Object","entries","key","value","encodeURIComponent","join"],"mappings":"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"}