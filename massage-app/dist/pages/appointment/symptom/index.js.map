{"version":3,"file":"index.js","sources":["../../../../src/components/SymptomCategoryTabs/index.tsx","../../../../src/components/SymptomServiceCard/index.tsx","../../../../src/components/SymptomServiceList/index.tsx","../../../../src/pages/appointment/symptom/index.tsx"],"sourcesContent":["import { View, Text, ScrollView } from '@tarojs/components'\nimport classNames from 'classnames'\nimport './index.scss'\n\ninterface Category {\n  id: string\n  name: string\n}\n\ninterface SymptomCategoryTabsProps {\n  categories: Category[]\n  activeId: string\n  onChange: (id: string) => void\n  className?: string\n}\n\nconst SymptomCategoryTabs: React.FC<SymptomCategoryTabsProps> = ({\n  categories,\n  activeId,\n  onChange,\n  className\n}) => {\n  return (\n    <ScrollView \n      className={classNames('symptom-category-tabs', className)}\n      scrollY\n      showScrollbar={false}\n    >\n      {categories.map((category) => (\n        <View\n          key={category.id}\n          className={classNames('category-item', {\n            'active': category.id === activeId\n          })}\n          onClick={() => onChange(category.id)}\n        >\n          <Text className=\"category-name\">{category.name}</Text>\n        </View>\n      ))}\n    </ScrollView>\n  )\n}\n\nexport default SymptomCategoryTabs","import { View, Text } from '@tarojs/components'\nimport classNames from 'classnames'\nimport './index.scss'\n\ninterface SymptomServiceCardProps {\n  service: {\n    id: string\n    name: string\n    description: string\n    duration: number\n    price: number\n    discountPrice?: number\n    availability: 'available' | 'busy' | 'full'\n  }\n  onAdd: () => void\n  isInCart?: boolean\n  className?: string\n}\n\nconst SymptomServiceCard: React.FC<SymptomServiceCardProps> = ({\n  service,\n  onAdd,\n  isInCart = false,\n  className\n}) => {\n  return (\n    <View className={classNames('symptom-service-card', className)}>\n      <View className=\"service-header\">\n        <Text className=\"service-name\">{service.name}</Text>\n      </View>\n      \n      <Text className=\"service-description\">{service.description}</Text>\n      \n      <View className=\"service-footer\">\n        <View className=\"service-info\">\n          <Text className=\"service-duration\">{service.duration}分钟</Text>\n          <View className=\"service-price\">\n            <Text className=\"price-current\">¥{service.discountPrice || service.price}</Text>\n            {service.discountPrice && (\n              <Text className=\"price-original\">¥{service.price}</Text>\n            )}\n          </View>\n        </View>\n        \n        <View \n          className={classNames('add-button', {\n            'in-cart': isInCart,\n            'disabled': service.availability === 'full'\n          })}\n          onClick={service.availability !== 'full' ? onAdd : undefined}\n        >\n          {service.availability === 'full' ? (\n            <Text className=\"button-text\">已满</Text>\n          ) : (\n            <Text className=\"iconfont icon-add\"></Text>\n          )}\n        </View>\n      </View>\n    </View>\n  )\n}\n\nexport default SymptomServiceCard","import { View, ScrollView, Text, Image } from '@tarojs/components'\nimport SymptomServiceCard from '../SymptomServiceCard'\nimport './index.scss'\n\ninterface TherapistTimeSlot {\n  time: string\n  available: boolean\n}\n\ninterface TherapistDayAvailability {\n  date: string\n  dayOfWeek: string\n  workTime: string\n  slots: TherapistTimeSlot[]\n}\n\ninterface SymptomService {\n  id: string\n  name: string\n  description: string\n  duration: number\n  price: number\n  discountPrice?: number\n  availability: 'available' | 'busy' | 'full'\n  therapistId?: string\n}\n\ninterface Therapist {\n  id: string\n  name: string\n  avatar: string\n  rating: number\n  level?: number\n  availability?: TherapistDayAvailability[]\n}\n\ninterface SymptomServiceListProps {\n  services: SymptomService[]\n  therapists: Therapist[]\n  selectedDate: string\n  selectedTime: string\n  onAddToCart: (service: SymptomService, therapistId: string) => void\n  cartServiceIds: string[]\n  className?: string\n}\n\nconst SymptomServiceList: React.FC<SymptomServiceListProps> = ({\n  services,\n  therapists,\n  selectedDate,\n  selectedTime,\n  onAddToCart,\n  cartServiceIds,\n  className\n}) => {\n  // 检查技师在指定日期/时间是否有空\n  const isTherapistAvailable = (therapist: Therapist): boolean => {\n    if (!therapist.availability || !selectedDate || !selectedTime) {\n      return true // 无排班数据时，默认可用\n    }\n\n    const dayAvailability = therapist.availability.find(a => a.date === selectedDate)\n    if (!dayAvailability) {\n      return true // 没有该日期数据，默认可用\n    }\n\n    const slot = dayAvailability.slots.find(s => s.time === selectedTime)\n    return slot?.available ?? true // 默认可用\n  }\n\n  // 按服务显示，每个服务显示所有可选推拿师\n  const servicesWithTherapists = services.map(service => {\n    return {\n      service,\n      availableTherapists: therapists // 所有推拿师都可以提供该服务\n    }\n  })\n\n  return (\n    <ScrollView\n      className={`symptom-service-list ${className || ''}`}\n      scrollY\n      showScrollbar={false}\n    >\n      <View className=\"service-list-content\">\n        {servicesWithTherapists.map((item) => (\n          <View key={item.service.id} className=\"service-item-container\">\n            {/* 服务卡片 */}\n            <SymptomServiceCard\n              service={item.service}\n              onAdd={() => {}} // 暂时禁用直接添加\n              isInCart={cartServiceIds.includes(item.service.id)}\n            />\n\n            {/* 推拿师区域 */}\n            <View className=\"therapist-options\">\n              {item.availableTherapists.map(therapist => {\n                const available = isTherapistAvailable(therapist)\n                return (\n                  <View\n                    key={therapist.id}\n                    className={`therapist-option ${available ? 'available' : 'booked'}`}\n                    onClick={() => available && onAddToCart(item.service, therapist.id)}\n                  >\n                    {/* 头像容器 */}\n                    <View className=\"therapist-avatar-wrapper\">\n                      <Image\n                        className=\"therapist-mini-avatar\"\n                        src={therapist.avatar}\n                        mode=\"aspectFill\"\n                      />\n                      {/* 已预约标签 */}\n                      {!available && (\n                        <View className=\"booked-badge\">\n                          <Text className=\"badge-text\">已预约</Text>\n                        </View>\n                      )}\n                    </View>\n                    <Text className=\"therapist-name\">{therapist.name}</Text>\n                  </View>\n                )\n              })}\n            </View>\n          </View>\n        ))}\n      </View>\n    </ScrollView>\n  )\n}\n\nexport default SymptomServiceList","import { useState, useEffect, useMemo } from 'react'\nimport { View, Text } from '@tarojs/components'\nimport Taro, { useRouter } from '@tarojs/taro'\nimport TherapistHeader from '../../../components/TherapistHeader'\nimport SymptomCategoryTabs from '../../../components/SymptomCategoryTabs'\nimport SymptomServiceList from '../../../components/SymptomServiceList'\nimport ShoppingCart from '../therapist/components/ShoppingCart'\nimport { symptomService } from '../../../services/symptom'\nimport { therapistService } from '../../../services/therapist'\nimport './index.scss'\n\ninterface CartItem {\n  id?: string  // 唯一标识符（可选，向后兼容）\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistId: string\n  therapistName: string\n  therapistAvatar?: string\n}\n\nconst SymptomPage = () => {\n  const router = useRouter()\n  const { storeId, storeName, selectedDate, selectedTime } = router.params\n\n  // 解码URL参数中的时间（处理URL编码的冒号）\n  const decodedTime = selectedTime ? decodeURIComponent(selectedTime as string) : ''\n\n  const [therapists, setTherapists] = useState<any[]>([])\n  const [categories, setCategories] = useState<any[]>([])\n  const [services, setServices] = useState<any[]>([])\n  const [activeCategoryId, setActiveCategoryId] = useState('')\n  const [cartItems, setCartItems] = useState<CartItem[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // 获取该门店的所有推拿师 + 排班信息\n  useEffect(() => {\n    if (storeId && selectedDate) {\n      const fetchTherapists = async () => {\n        try {\n          // 并行获取两个数据源\n          const [basicInfo, availabilityData] = await Promise.all([\n            therapistService.getTherapistsByStore(storeId as string),\n            therapistService.getTherapistsAvailability(\n              storeId as string,\n              selectedDate as string\n            )\n          ])\n\n          // 合并基本信息和排班数据\n          const merged = basicInfo.list.map(therapist => {\n            const availability = availabilityData.find((a: any) => a.id === therapist.id)\n            return {\n              ...therapist,\n              availability: availability?.availability || []\n            }\n          })\n\n          console.log('✅ 技师数据合并成功:', merged)\n          setTherapists(merged)\n        } catch (error) {\n          console.error('❌ 获取技师信息失败:', error)\n          // Fallback: 只使用基本信息\n          therapistService.getTherapistsByStore(storeId as string).then(res => {\n            setTherapists(res.list)\n          })\n        }\n      }\n\n      fetchTherapists()\n    }\n  }, [storeId, selectedDate])\n\n  // 获取症状分类\n  useEffect(() => {\n    symptomService.getCategories().then(res => {\n      setCategories(res.data)\n      if (res.data.length > 0) {\n        setActiveCategoryId(res.data[0].id)\n      }\n    })\n  }, [])\n\n  // 获取该门店所有推拿师的服务列表\n  useEffect(() => {\n    if (storeId) {\n      setLoading(true)\n      symptomService.getStoreSymptomServices(storeId as string).then(res => {\n        setServices(res.data)\n        setLoading(false)\n      })\n    }\n  }, [storeId])\n\n  // 根据分类筛选服务\n  const filteredServices = useMemo(() => {\n    return services.filter(service => service.categoryId === activeCategoryId)\n  }, [services, activeCategoryId])\n\n  // 购物车中的服务ID列表\n  const cartServiceIds = useMemo(() => {\n    return cartItems.map(item => item.serviceId)\n  }, [cartItems])\n\n  // 添加到购物车\n  const handleAddToCart = (service: any, therapistId: string) => {\n    console.log('🎯 添加到购物车 - therapistId:', therapistId)\n    const therapist = therapists.find(t => t.id === therapistId)\n    console.log('🎯 找到的技师:', therapist)\n\n    if (!therapist) {\n      console.error('❌ 未找到技师，therapistId:', therapistId)\n      return\n    }\n\n    const newItem: CartItem = {\n      serviceId: service.id,\n      serviceName: service.name,\n      duration: service.duration,\n      price: service.price,\n      discountPrice: service.discountPrice,\n      date: selectedDate as string || new Date().toISOString().split('T')[0],\n      time: decodedTime || '10:00',  // 使用解码后的时间，默认10:00\n      therapistId: therapist.id,\n      therapistName: therapist.name,\n      therapistAvatar: therapist.avatar\n    }\n\n    console.log('🎯 新购物车项目:', newItem)\n    console.log('🎯 新项目的therapistId:', newItem.therapistId)\n\n    setCartItems([...cartItems, newItem])\n\n    Taro.showToast({\n      title: '已添加到购物车',\n      icon: 'none'\n    })\n  }\n\n\n  // 去结算\n  // 清空购物车\n  const handleClearCart = () => {\n    setCartItems([])\n    Taro.showToast({\n      title: '购物车已清空',\n      icon: 'none'\n    })\n  }\n\n  // 删除单个商品\n  const handleRemoveItem = (index: number) => {\n    const newItems = cartItems.filter((_, i) => i !== index)\n    setCartItems(newItems)\n    Taro.showToast({\n      title: '已移除商品',\n      icon: 'none'\n    })\n  }\n\n  const handleCheckout = () => {\n    if (cartItems.length === 0) {\n      Taro.showToast({\n        title: '请先选择服务项目',\n        icon: 'none'\n      })\n      return\n    }\n\n    console.log('🔄 准备结算，购物车内容:', cartItems)\n    console.log('🔄 第一个项目:', cartItems[0])\n    console.log('🔄 第一个项目的therapistId:', cartItems[0]?.therapistId)\n\n    const params = {\n      items: JSON.stringify(cartItems),\n      storeId,\n      storeName,\n      from: 'symptom'\n    }\n\n    console.log('🔄 传递的参数:', params)\n\n    Taro.navigateTo({\n      url: `/pages/booking/confirm/index?${Object.entries(params)\n        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n        .join('&')}`\n    })\n  }\n\n  if (loading) {\n    return <View className=\"symptom-page loading\">加载中...</View>\n  }\n\n  return (\n    <View className=\"symptom-page\">\n\n      {/* 主内容区 */}\n      <View className=\"symptom-content\">\n        {/* 左侧分类标签 */}\n        <SymptomCategoryTabs\n          categories={categories}\n          activeId={activeCategoryId}\n          onChange={setActiveCategoryId}\n        />\n\n        {/* 右侧服务列表 - 按推拿师分组展示 */}\n        <SymptomServiceList\n          services={filteredServices}\n          therapists={therapists}\n          selectedDate={selectedDate as string}\n          selectedTime={decodedTime}\n          onAddToCart={handleAddToCart}\n          cartServiceIds={cartServiceIds}\n        />\n      </View>\n\n      {/* 底部购物车 */}\n      <ShoppingCart\n        items={cartItems}\n        onCheckout={handleCheckout}\n        onMaskClick={handleClearCart}\n        onRemoveItem={handleRemoveItem}\n        simpleClearMode={true}\n      />\n    </View>\n  )\n}\n\nexport default SymptomPage"],"names":["SymptomCategoryTabs","categories","activeId","onChange","className","jsx","ScrollView","classNames","map","category","View","id","Text","name","SymptomServiceCard","service","onAdd","isInCart","description","jsxs","duration","discountPrice","price","availability","undefined","SymptomServiceList","services","therapists","selectedDate","selectedTime","onAddToCart","cartServiceIds","isTherapistAvailable","therapist","dayAvailability","find","a","date","slot","slots","s","time","available","servicesWithTherapists","availableTherapists","item","includes","Image","avatar","SymptomPage","router","useRouter","storeId","storeName","params","decodedTime","decodeURIComponent","setTherapists","useState","setCategories","setServices","activeCategoryId","setActiveCategoryId","cartItems","setCartItems","loading","setLoading","useEffect","fetchTherapists","basicInfo","availabilityData","Promise","all","therapistService","getTherapistsByStore","getTherapistsAvailability","merged","list","log","error","then","res","symptomService","getCategories","data","length","getStoreSymptomServices","filteredServices","useMemo","filter","categoryId","serviceId","handleAddToCart","therapistId","t","newItem","serviceName","Date","toISOString","split","therapistName","therapistAvatar","Taro","showToast","title","icon","handleClearCart","handleRemoveItem","index","newItems","_","i","handleCheckout","console","items","JSON","stringify","from","navigateTo","url","Object","entries","key","value","encodeURIComponent","join","ShoppingCart"],"mappings":"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"}