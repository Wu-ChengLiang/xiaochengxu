{"version":3,"file":"common.js","sources":["../src/config/api.ts","../src/constants/error-codes.ts","../src/utils/request.ts","../src/config/assets.ts","../src/utils/user.ts","../src/services/gift.service.ts","../src/utils/image.ts","../src/services/store.ts","../src/services/location.ts","../src/pages/appointment/therapist/components/ShoppingCart/index.tsx","../src/mock/data/symptoms.ts","../src/services/therapist.ts","../src/services/order.ts","../src/utils/amount.ts","../src/services/payment.service.ts","../src/services/wallet.service.ts","../src/types/voucher.ts","../src/services/voucher.service.ts","../src/services/review.ts","../src/components/BookingButton/index.tsx"],"sourcesContent":["export const API_CONFIG = {\n  // 生产环境配置\n  // 注：在 WeChat 小程序中不能使用 process.env，会导致运行时错误\n  // 使用硬编码的默认值，结合 npm script 的 TARO_APP_API 环境变量完成编译时替换\n  baseURL: 'https://mingyitang1024.com/api/v2',\n  timeout: 10000,\n  retry: 3\n};\n\n/**\n * 获取API基础URL\n * @returns 完整的API基础URL\n */\nexport const getApiBaseUrl = () => {\n  return API_CONFIG.baseURL;\n};","/**\n * 错误码常量定义\n * 统一管理系统中所有的错误码，便于前后端交互和错误处理\n */\n\n// 错误码分类：\n// 1xxx - 客户端请求错误（参数错误、业务逻辑错误等）\n// 2xxx - 身份认证和授权错误\n// 3xxx - 服务器错误\n// 4xxx - 第三方服务错误（支付、短信等）\n\nexport const ERROR_CODES = {\n  // 成功\n  SUCCESS: 0,\n\n  // 1xxx - 客户端请求错误\n  PARAM_ERROR: 1001,           // 参数错误\n  INVALID_INPUT: 1002,         // 输入无效\n  NOT_FOUND: 1003,             // 资源不存在\n  DUPLICATE: 1004,             // 重复操作\n  INVALID_STATE: 1005,         // 无效的状态转换\n  OPERATION_FAILED: 1006,      // 操作失败\n  INSUFFICIENT_BALANCE: 1007,  // 余额不足\n  QUOTA_EXCEEDED: 1008,        // 配额超过\n  INVALID_PHONE: 1009,         // 无效的手机号\n  USER_NOT_FOUND: 1010,        // 用户不存在\n\n  // 2xxx - 身份认证和授权错误\n  UNAUTHORIZED: 2001,          // 未登录/无有效令牌\n  FORBIDDEN: 2002,             // 无权限访问\n  TOKEN_EXPIRED: 2003,         // 令牌已过期\n  INVALID_TOKEN: 2004,         // 无效的令牌\n  SESSION_EXPIRED: 2005,       // 会话已过期\n\n  // 3xxx - 服务器错误\n  INTERNAL_ERROR: 3001,        // 服务器内部错误\n  SERVICE_UNAVAILABLE: 3002,   // 服务不可用\n  DATABASE_ERROR: 3003,        // 数据库错误\n  EXTERNAL_API_ERROR: 3004,    // 外部API错误\n\n  // 4xxx - 第三方服务错误\n  PAYMENT_ERROR: 4001,         // 支付失败\n  PAYMENT_TIMEOUT: 4002,       // 支付超时\n  SMS_ERROR: 4003,             // 短信发送失败\n  WECHAT_ERROR: 4004,          // 微信接口错误\n} as const;\n\n/**\n * 错误码与用户友好提示的映射\n * 用于在API请求失败时向用户展示合适的提示信息\n */\nexport const ERROR_MESSAGE_MAP: Record<number, string> = {\n  [ERROR_CODES.SUCCESS]: '操作成功',\n  [ERROR_CODES.PARAM_ERROR]: '参数错误，请检查输入',\n  [ERROR_CODES.INVALID_INPUT]: '输入格式不正确',\n  [ERROR_CODES.NOT_FOUND]: '请求的资源不存在',\n  [ERROR_CODES.DUPLICATE]: '操作重复，请勿重复提交',\n  [ERROR_CODES.INVALID_STATE]: '当前状态不允许此操作',\n  [ERROR_CODES.OPERATION_FAILED]: '操作失败，请重试',\n  [ERROR_CODES.INSUFFICIENT_BALANCE]: '余额不足，请充值',\n  [ERROR_CODES.QUOTA_EXCEEDED]: '超出配额限制',\n  [ERROR_CODES.INVALID_PHONE]: '手机号格式不正确',\n  [ERROR_CODES.USER_NOT_FOUND]: '用户不存在',\n  [ERROR_CODES.UNAUTHORIZED]: '请先登录',\n  [ERROR_CODES.FORBIDDEN]: '您无权执行此操作',\n  [ERROR_CODES.TOKEN_EXPIRED]: '登录已过期，请重新登录',\n  [ERROR_CODES.INVALID_TOKEN]: '无效的登录状态',\n  [ERROR_CODES.SESSION_EXPIRED]: '会话已过期，请重新登录',\n  [ERROR_CODES.INTERNAL_ERROR]: '服务器错误，请稍后重试',\n  [ERROR_CODES.SERVICE_UNAVAILABLE]: '服务维护中，请稍后重试',\n  [ERROR_CODES.DATABASE_ERROR]: '数据库错误，请稍后重试',\n  [ERROR_CODES.EXTERNAL_API_ERROR]: '第三方服务异常，请稍后重试',\n  [ERROR_CODES.PAYMENT_ERROR]: '支付失败，请重试',\n  [ERROR_CODES.PAYMENT_TIMEOUT]: '支付超时，请重新支付',\n  [ERROR_CODES.SMS_ERROR]: '短信发送失败，请稍后重试',\n  [ERROR_CODES.WECHAT_ERROR]: '微信接口异常，请稍后重试',\n};\n\n/**\n * 获取用户友好的错误提示\n * @param code 错误码\n * @param defaultMessage 默认提示信息\n * @returns 用户友好的错误提示\n */\nexport function getErrorMessage(code: number, defaultMessage?: string): string {\n  return ERROR_MESSAGE_MAP[code] || defaultMessage || '操作失败，请稍后重试';\n}\n\n/**\n * 判断是否为认证相关错误\n */\nexport function isAuthError(code: number): boolean {\n  return [\n    ERROR_CODES.UNAUTHORIZED,\n    ERROR_CODES.TOKEN_EXPIRED,\n    ERROR_CODES.INVALID_TOKEN,\n    ERROR_CODES.SESSION_EXPIRED,\n  ].includes(code);\n}\n\n/**\n * 判断是否为服务器错误\n */\nexport function isServerError(code: number): boolean {\n  return code >= 3000 && code < 4000;\n}\n\n/**\n * 判断是否为第三方服务错误\n */\nexport function isExternalError(code: number): boolean {\n  return code >= 4000 && code < 5000;\n}\n","import Taro from '@tarojs/taro';\nimport { API_CONFIG } from '@/config/api';\nimport { ERROR_CODES, getErrorMessage, isAuthError } from '@/constants/error-codes';\n\ninterface RequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  data?: any;\n  header?: Record<string, string>;\n  showLoading?: boolean;\n  loadingTitle?: string;\n}\n\ninterface ApiResponse<T = any> {\n  code: number;\n  message: string;\n  data: T;\n}\n\n/**\n * 统一请求封装\n * @param url - API路径\n * @param options - 请求选项\n * @returns Promise<ApiResponse>\n */\nexport async function request<T = any>(\n  url: string,\n  options: RequestOptions = {}\n): Promise<ApiResponse<T>> {\n  const {\n    method = 'GET',\n    data,\n    header = {},\n    showLoading = false,\n    loadingTitle = '加载中...'\n  } = options;\n\n  // 显示加载提示\n  if (showLoading) {\n    Taro.showLoading({ title: loadingTitle, mask: true });\n  }\n\n  try {\n    const response = await Taro.request({\n      url: `${API_CONFIG.baseURL}${url}`,\n      method,\n      data,\n      header: {\n        'Content-Type': 'application/json',\n        ...header\n      },\n      timeout: API_CONFIG.timeout\n    });\n\n    // 隐藏加载提示\n    if (showLoading) {\n      Taro.hideLoading();\n    }\n\n    // 处理响应\n    const result = response.data as ApiResponse<T>;\n\n    // 业务错误处理\n    if (result.code !== ERROR_CODES.SUCCESS) {\n      console.error(`API业务错误: ${url}`, {\n        code: result.code,\n        message: result.message,\n        data: result\n      });\n\n      // 处理认证相关错误\n      if (isAuthError(result.code)) {\n        // 清除本地认证信息并跳转到登录页\n        console.warn('认证过期，跳转到登录页');\n        Taro.removeStorageSync('userInfo');\n        Taro.removeStorageSync('userToken');\n        // TODO: 导航到登录页 (根据实际应用架构调整)\n      }\n\n      const errorMessage = getErrorMessage(result.code, result.message);\n      const error: any = new Error(errorMessage);\n      error.code = result.code;\n      error.response = {\n        status: response.statusCode,\n        data: result\n      };\n      throw error;\n    }\n\n    return result;\n  } catch (error: any) {\n    // 隐藏加载提示\n    if (showLoading) {\n      Taro.hideLoading();\n    }\n\n    // 网络错误处理\n    console.error(`API网络错误: ${url}`, error);\n\n    // 抛出错误供上层处理\n    throw error;\n  }\n}\n\n/**\n * GET请求\n */\nexport const get = <T = any>(url: string, params?: any, options?: RequestOptions) => {\n  // 构建查询字符串\n  const queryString = params ?\n    '?' + Object.keys(params)\n      .filter(key => params[key] !== undefined && params[key] !== null)\n      .map(key => `${key}=${encodeURIComponent(params[key])}`)\n      .join('&') : '';\n\n  return request<T>(url + queryString, { ...options, method: 'GET' });\n};\n\n/**\n * POST请求\n */\nexport const post = <T = any>(url: string, data?: any, options?: RequestOptions) => {\n  return request<T>(url, { ...options, method: 'POST', data });\n};\n\n/**\n * PUT请求\n */\nexport const put = <T = any>(url: string, data?: any, options?: RequestOptions) => {\n  return request<T>(url, { ...options, method: 'PUT', data });\n};\n\n/**\n * DELETE请求\n */\nexport const del = <T = any>(url: string, data?: any, options?: RequestOptions) => {\n  return request<T>(url, { ...options, method: 'DELETE', data });\n};","/**\n * 资源配置文件 - 集中管理静态资源URL\n *\n * 用途：集中配置所有静态资源（图片、视频等）的访问地址\n * 优势：\n * - 后续换CDN或改图片，只需修改此文件\n * - 支持环境变量切换（生产/开发）\n * - 所有页面共用一份配置，保持一致性\n *\n * 说明：\n * - 礼卡、商品图片：由后端提供的静态CDN路径\n * - 推拿师头像：由API返回的avatar_url字段，自动转换为HTTPS\n * - 门店图片：由API返回的images字段，自动转换为HTTPS\n * - 用户头像：由API返回的avatar字段，自动转换为HTTPS\n */\n\nimport { normalizeImageUrl } from '@/utils/image'\n\n// 在 WeChat 小程序中，不能使用 process.env（编译后会导致运行时错误）\n// Taro 会将 TARO_APP_* 环境变量通过编译时替换实现\n// 采用硬编码方案，保证小程序和H5都能正常运行\nconst CDN_BASE = 'https://mingyitang1024.com/static';\n\nexport const ASSETS_CONFIG = {\n  // 资源服务器基础URL\n  baseUrl: CDN_BASE,\n\n  // 礼卡图片 - ✅ 已在服务器上验证存在 (200 OK)\n  giftCard: {\n    member: `${CDN_BASE}/card/member-card.png`,\n    electronic: `${CDN_BASE}/card/gift-card.png`\n  },\n\n  // 周边商品图片 - ✅ 已在服务器上验证存在\n  // 暖贴类 (nuantie) - 保暖贴\n  product: {\n    // 原有占位符，可继续使用或由后端API返回\n    pillow: `${CDN_BASE}/gift/product/nuantie/huxi.jpg`,     // 护息贴（原neck-pillow）\n    therapy: `${CDN_BASE}/gift/product/nuantie/xinai.jpg`,    // 新爱贴（原health-food）\n\n    // 暖贴类其他产品\n    nuantie: {\n      huxi: `${CDN_BASE}/gift/product/nuantie/huxi.jpg`,\n      xinai: `${CDN_BASE}/gift/product/nuantie/xinai.jpg`,\n      yaofu: `${CDN_BASE}/gift/product/nuantie/yaofu.jpg`\n    },\n\n    // 艾酒类产品\n    aijiu: {\n      xinaibing: `${CDN_BASE}/gift/product/aijiu/xinaibing.jpg`,\n      xinaizhu: `${CDN_BASE}/gift/product/aijiu/xinaizhu.jpg`,\n      xinaitiao: `${CDN_BASE}/gift/product/aijiu/xinaitiao.jpg`\n    }\n  },\n\n  // 推荐banner - ⚠️ 暂无\n  // 由后端通过API返回或由页面处理\n  banners: {\n    goodnight: ''\n  },\n\n  // 推拿师头像 - ✅ 已在服务器上验证存在\n  // 路径: /static/therapists/老师收集中文原版/{门店名}/{老师名}.jpg\n  therapists: {\n    baseUrl: `${CDN_BASE}/therapists/老师收集中文原版`\n  },\n\n  // 默认图片 - 用于缺失的图片URL\n  default: `${CDN_BASE}/default.png`\n};\n\n/**\n * 便捷函数：获取资源URL\n * 使用场景：当资源路径存储在数据库时，直接拼接完整URL\n *\n * @param path 资源相对路径，如 '/card/member-card.png'\n * @returns 完整的资源URL\n */\nexport const getAssetUrl = (path: string | null | undefined): string => {\n  // 如果路径为空，返回默认图片\n  if (!path) {\n    return ASSETS_CONFIG.default;\n  }\n\n  // 如果已经是完整URL，直接返回\n  if (path.startsWith('http://') || path.startsWith('https://')) {\n    return path;\n  }\n\n  // 如果是相对路径，拼接基础URL\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return `${CDN_BASE}${cleanPath}`;\n};\n","/**\n * 用户信息统一管理工具\n * 解决用户鉴权不一致问题\n */\nimport Taro from '@tarojs/taro'\nimport { get, post } from './request'\n\nexport interface UserInfo {\n  id: number\n  phone: string\n  nickname?: string\n  avatar?: string\n  openid?: string\n  username?: string\n  membershipNumber?: string\n  memberLevel?: string\n  balance?: number\n  totalSpent?: number\n  totalVisits?: number\n  discountRate?: number  // 用户折扣率，如 0.68 表示68折\n}\n\n/**\n * 获取当前用户信息\n * 统一的用户信息获取入口\n */\nexport const getCurrentUserInfo = (): UserInfo | null => {\n  try {\n    const userInfo = Taro.getStorageSync('userInfo')\n    return userInfo || null\n  } catch (error) {\n    console.error('获取用户信息失败:', error)\n    return null\n  }\n}\n\n/**\n * 获取当前用户ID\n * 所有服务统一使用此方法获取用户ID\n */\nexport const getCurrentUserId = (): number => {\n  const userInfo = getCurrentUserInfo()\n  return userInfo?.id || 1 // 默认用户ID为1（开发环境）\n}\n\n/**\n * 获取当前用户手机号\n * 所有服务统一使用此方法获取手机号\n */\nexport const getCurrentUserPhone = (): string => {\n  const userInfo = getCurrentUserInfo()\n  return userInfo?.phone || '13800138000' // 默认手机号（开发环境）\n}\n\n/**\n * 设置用户信息\n */\nexport const setUserInfo = (userInfo: UserInfo): void => {\n  try {\n    Taro.setStorageSync('userInfo', userInfo)\n  } catch (error) {\n    console.error('设置用户信息失败:', error)\n  }\n}\n\n/**\n * 清除用户信息\n */\nexport const clearUserInfo = (): void => {\n  try {\n    Taro.removeStorageSync('userInfo')\n  } catch (error) {\n    console.error('清除用户信息失败:', error)\n  }\n}\n\n/**\n * 手机号脱敏处理\n */\nexport const maskPhone = (phone: string): string => {\n  if (!phone) return '未设置'\n  return phone.replace(/(\\d{3})\\d{4}(\\d{4})/, '$1****$2')\n}\n\n/**\n * 微信登录\n */\nexport interface WechatLoginResult {\n  needBindPhone: boolean\n  openid: string\n  sessionKey: string\n  userInfo?: UserInfo\n  userStatus?: 'complete' | 'need_bind_phone' | 'need_register'\n}\n\nexport const wechatLogin = async (): Promise<WechatLoginResult> => {\n  try {\n    // 1. 获取微信code\n    const { code } = await Taro.login()\n\n    // 2. 调用后端微信登录API\n    const response = await post('/users/wechat-login', { code })\n\n    if (response.data) {\n      // 如果有完整用户信息，保存到本地\n      if (response.data.userInfo && !response.data.needBindPhone) {\n        setUserInfo(response.data.userInfo)\n      }\n\n      return response.data\n    }\n\n    throw new Error('微信登录失败：返回数据异常')\n  } catch (error) {\n    console.error('微信登录失败:', error)\n    throw error\n  }\n}\n\n/**\n * 绑定手机号（手动输入）\n */\nexport const bindPhone = async (openid: string, phone: string) => {\n  try {\n    const response = await post('/users/bind-phone', {\n      openid,\n      phone\n    })\n\n    if (response.data) {\n      // 绑定成功后，获取完整用户信息并保存\n      const userInfo = await fetchUserInfo(phone)\n      if (userInfo) {\n        setUserInfo(userInfo)\n      }\n      return response.data\n    }\n\n    throw new Error('手机号绑定失败')\n  } catch (error: any) {\n    console.error('手机号绑定失败:', error)\n\n    // 尝试提取更详细的错误信息\n    if (error?.response?.data?.error?.message) {\n      throw new Error(error.response.data.error.message)\n    } else if (error?.response?.status === 500) {\n      throw new Error('该手机号已被占用')\n    } else if (error?.message) {\n      throw error\n    } else {\n      throw new Error('手机号绑定失败，请重试')\n    }\n  }\n}\n\n/**\n * 使用微信手机号组件绑定手机号\n * @param openid 微信openid\n * @param code 微信手机号授权code\n */\nexport const bindPhoneWx = async (openid: string, code: string) => {\n  try {\n    const response = await post('/users/bind-phone-wx', {\n      openid,\n      code\n    })\n\n    if (response.data) {\n      // 绑定成功后，获取完整用户信息并保存\n      if (response.data.phone) {\n        const userInfo = await fetchUserInfo(response.data.phone)\n        if (userInfo) {\n          setUserInfo(userInfo)\n        }\n      }\n      return response.data\n    }\n\n    throw new Error('手机号绑定失败')\n  } catch (error: any) {\n    console.error('微信手机号绑定失败:', error)\n\n    if (error?.response?.data?.error?.message) {\n      throw new Error(error.response.data.error.message)\n    } else if (error?.message) {\n      throw error\n    } else {\n      throw new Error('手机号绑定失败，请重试')\n    }\n  }\n}\n\n/**\n * 使用微信手机号组件换绑手机号\n * @param userId 用户ID\n * @param oldPhone 旧手机号\n * @param code 微信手机号授权code\n */\nexport const changePhoneWx = async (userId: number, oldPhone: string, code: string) => {\n  try {\n    const response = await post('/users/change-phone-wx', {\n      userId,\n      oldPhone,\n      code\n    })\n\n    if (response.data) {\n      // 换绑成功后，更新本地用户信息\n      if (response.data.phone) {\n        const userInfo = await fetchUserInfo(response.data.phone)\n        if (userInfo) {\n          setUserInfo(userInfo)\n        }\n      }\n      return response.data\n    }\n\n    throw new Error('手机号换绑失败')\n  } catch (error: any) {\n    console.error('微信手机号换绑失败:', error)\n\n    if (error?.response?.data?.error?.message) {\n      throw new Error(error.response.data.error.message)\n    } else if (error?.message) {\n      throw error\n    } else {\n      throw new Error('手机号换绑失败，请重试')\n    }\n  }\n}\n\n/**\n * 从API获取用户信息\n */\nexport const fetchUserInfo = async (phone?: string): Promise<UserInfo | null> => {\n  try {\n    // 如果没有传手机号，尝试从本地获取\n    if (!phone) {\n      const localUserInfo = getCurrentUserInfo()\n      phone = localUserInfo?.phone\n    }\n\n    if (!phone) {\n      console.warn('无法获取用户信息：缺少手机号')\n      return null\n    }\n\n    const response = await get(`/users/info?phone=${phone}`)\n\n    if (response.data) {\n      const userInfo: UserInfo = {\n        id: response.data.id,\n        phone: response.data.phone,\n        username: response.data.username,\n        nickname: response.data.nickname,\n        avatar: response.data.avatar,\n        openid: response.data.openid,\n        membershipNumber: response.data.membershipNumber,\n        memberLevel: response.data.memberLevel,\n        balance: response.data.balance,\n        totalSpent: response.data.totalSpent,\n        totalVisits: response.data.totalVisits,\n        discountRate: response.data.discount_rate || response.data.discountRate\n      }\n\n      // 保存到本地缓存\n      setUserInfo(userInfo)\n      return userInfo\n    }\n\n    return null\n  } catch (error) {\n    console.error('获取用户信息失败:', error)\n    return null\n  }\n}\n\n/**\n * 检查登录状态并自动登录\n */\nexport const checkAndAutoLogin = async (): Promise<UserInfo | null> => {\n  try {\n    // 1. 先检查本地缓存\n    const localUserInfo = getCurrentUserInfo()\n    if (localUserInfo && localUserInfo.phone) {\n      // 尝试刷新用户信息\n      const freshUserInfo = await fetchUserInfo(localUserInfo.phone)\n      return freshUserInfo || localUserInfo\n    }\n\n    // 2. 本地没有信息，尝试微信登录\n    const loginResult = await wechatLogin()\n\n    if (!loginResult.needBindPhone && loginResult.userInfo) {\n      // 已有完整用户信息\n      return loginResult.userInfo\n    }\n\n    // 3. 需要绑定手机号，返回null让页面处理\n    return null\n\n  } catch (error) {\n    console.error('自动登录失败:', error)\n    return null\n  }\n}\n\n/**\n * 初始化默认用户信息（开发环境）\n * @deprecated 建议使用 checkAndAutoLogin 替代\n */\nexport const initDefaultUserInfo = (): void => {\n  const existingUserInfo = getCurrentUserInfo()\n  if (!existingUserInfo) {\n    console.warn('⚠️  使用开发环境默认用户信息，生产环境请调用 checkAndAutoLogin')\n    const defaultUserInfo: UserInfo = {\n      id: 1,\n      phone: '13800138000',\n      nickname: '测试用户',\n      avatar: 'https://img.yzcdn.cn/vant/cat.jpeg'\n    }\n    setUserInfo(defaultUserInfo)\n    console.log('🔧 已初始化默认用户信息:', defaultUserInfo)\n  }\n}","import {\n  GiftCard,\n  Product,\n  CreateOrderRequest,\n  OrderResponse\n} from '@/types'\nimport { post } from '@/utils/request'\nimport { ASSETS_CONFIG } from '@/config/assets'\nimport { getCurrentUserId } from '@/utils/user'\n\n// 静态礼卡数据（替代mock）\nconst GIFT_CARDS: GiftCard[] = [\n  {\n    id: 'member-card',\n    type: 'member',\n    name: '会员礼卡',\n    image: ASSETS_CONFIG.giftCard.member,\n    description: '尊享会员专属优惠',\n    features: [\n      '全门店通用',\n      '长期有效',\n      '可累计积分',\n      '享受会员价'\n    ],\n    terms: '本卡为不记名卡片，请妥善保管'\n  },\n  {\n    id: 'electronic-card',\n    type: 'electronic',\n    name: '电子礼卡',\n    image: ASSETS_CONFIG.giftCard.electronic,\n    description: '便捷的电子礼品卡',\n    features: [\n      '即买即用',\n      '可转赠好友',\n      '线上购买',\n      '扫码使用'\n    ],\n    terms: '电子卡有效期为购买之日起一年内'\n  }\n]\n\n// 暖贴产品数据\nconst NUANTIE_PRODUCTS: Product[] = [\n  {\n    id: 'nuantie-waist',\n    name: '蕲艾腰腹暖贴',\n    image: 'https://mingyitang1024.com/static/gift/product/nuantie/yaofu.jpg',\n    price: 9900,      // ¥99\n    originalPrice: 9900,\n    unit: '贴',\n    description: '自发热艾草暖护腰贴',\n    features: ['自发热艾草', '暖护腰贴', '道地蕲艾'],\n    specifications: {}\n  },\n  {\n    id: 'nuantie-knee',\n    name: '蕲艾护膝暖贴',\n    image: 'https://mingyitang1024.com/static/gift/product/nuantie/huxi.jpg',\n    price: 9900,      // ¥99\n    originalPrice: 9900,\n    unit: '贴',\n    description: '自发热艾草护膝 驱寒保暖',\n    features: ['自发热艾草', '护膝', '驱寒保暖'],\n    specifications: {}\n  },\n  {\n    id: 'nuantie-moxa',\n    name: '蕲艾灸贴',\n    image: 'https://mingyitang1024.com/static/gift/product/nuantie/xinai.jpg',\n    price: 9900,      // ¥99\n    originalPrice: 9900,\n    unit: '贴',\n    description: '自发热艾草精油穴位灸贴',\n    features: ['自发热艾草', '精油穴位灸贴', '道地蕲艾'],\n    specifications: {}\n  }\n]\n\n// 艾条产品数据\nconst AIJIU_PRODUCTS: Product[] = [\n  {\n    id: 'aijiu-stick',\n    name: '蕲艾条',\n    image: 'https://mingyitang1024.com/static/gift/product/aijiu/xinaitiao.jpg',\n    price: 9900,      // ¥99\n    originalPrice: 9900,\n    unit: '条',\n    description: '艾灸艾条 3年陈艾',\n    features: ['3年陈艾', '艾灸艾条', '道地蕲艾'],\n    specifications: {}\n  },\n  {\n    id: 'aijiu-moxa-ball',\n    name: '蕲艾饼',\n    image: 'https://mingyitang1024.com/static/gift/product/aijiu/xinaibing.jpg',\n    price: 9900,      // ¥99\n    originalPrice: 9900,\n    unit: '饼',\n    description: '道地蕲艾泡脚泡澡艾草饼',\n    features: ['泡脚泡澡', '艾草饼', '道地蕲艾'],\n    specifications: {}\n  },\n  {\n    id: 'aijiu-column',\n    name: '新艾柱',\n    image: 'https://mingyitang1024.com/static/gift/product/aijiu/xinaizhu.jpg',\n    price: 9900,      // ¥99\n    originalPrice: 9900,\n    unit: '柱',\n    description: '李时珍故里特产新艾柱',\n    features: ['新艾柱', '李时珍故里特产', '艾灸'],\n    specifications: {}\n  }\n]\n\n// 静态商品数据（替代mock）\n// ✅ 注意：price 和 originalPrice 使用整数分为单位，不使用小数\n// 例如: 299.00元 = 29900分，19900分 = 199元\nconst PRODUCTS: Product[] = [\n  ...NUANTIE_PRODUCTS,\n  ...AIJIU_PRODUCTS\n]\n\n\n/**\n * 礼卡服务\n */\nexport class GiftService {\n  /**\n   * 获取所有礼卡\n   */\n  static getAllGiftCards(): GiftCard[] {\n    return GIFT_CARDS\n  }\n\n  /**\n   * 根据ID获取礼卡详情\n   */\n  static getGiftCardById(id: string): GiftCard | undefined {\n    return GIFT_CARDS.find(card => card.id === id)\n  }\n\n  /**\n   * 获取所有商品\n   */\n  static getAllProducts(): Product[] {\n    return PRODUCTS\n  }\n\n  /**\n   * 根据ID获取商品详情\n   */\n  static getProductById(id: string): Product | undefined {\n    return PRODUCTS.find(product => product.id === id)\n  }\n\n  /**\n   * 获取暖贴产品列表\n   */\n  static getNuantieProducts(): Product[] {\n    return NUANTIE_PRODUCTS\n  }\n\n  /**\n   * 获取艾条产品列表\n   */\n  static getAijiuProducts(): Product[] {\n    return AIJIU_PRODUCTS\n  }\n\n  /**\n   * 创建礼卡购买订单\n   * @param params.cardId 礼卡ID\n   * @param params.amount 礼卡面值（分为单位）\n   */\n  static async createGiftCardOrder(params: {\n    cardId: string                      // ✅ 新增：礼卡ID\n    amount: number      // ✅ 分为单位\n    quantity: number\n    paymentMethod: 'wechat' | 'balance'\n    customMessage?: string\n  }): Promise<OrderResponse> {\n    try {\n      const userId = getCurrentUserId()\n      const orderData: CreateOrderRequest = {\n        orderType: 'product',\n        userId: userId,\n        title: `电子礼卡 ¥${(params.amount / 100).toFixed(2)}`,\n        amount: params.amount * params.quantity,  // ✅ 直接相乘，结果是分\n        paymentMethod: params.paymentMethod,\n        extraData: {\n          productType: 'gift_card',\n          productId: params.cardId,           // ✅ 按API文档使用 productId\n          productName: '电子礼卡',             // ✅ 新增：商品名称（API文档必需）\n          quantity: params.quantity,\n          cardType: 'electronic',\n          faceValue: params.amount,           // ✅ 保持分为单位\n          customMessage: params.customMessage || '世界上最好的爸爸'\n        }\n      }\n\n      // 🎁 调试日志\n      console.log('🎁 创建礼卡订单')\n      console.log('👤 当前用户ID:', userId)\n      console.log('📦 订单数据:', {\n        orderType: orderData.orderType,\n        userId: orderData.userId,\n        title: orderData.title,\n        amount: `${orderData.amount}分 (¥${(orderData.amount / 100).toFixed(2)})`,\n        paymentMethod: orderData.paymentMethod,\n        extraData: orderData.extraData\n      })\n\n      const response = await post('/orders/create', orderData, {\n        showLoading: true,\n        loadingTitle: '创建订单中...'\n      })\n\n      console.log('✅ 礼卡订单创建成功')\n      console.log('📋 订单响应:', {\n        orderNo: response.data.orderNo,\n        amount: `${response.data.amount}分 (¥${(response.data.amount / 100).toFixed(2)})`,\n        paymentStatus: response.data.paymentStatus,\n        hasWxPayParams: !!response.data.wxPayParams\n      })\n\n      return response.data\n    } catch (error: any) {\n      console.error('❌ 创建礼卡订单失败:', error)\n      throw new Error(error.message || '创建礼卡订单失败')\n    }\n  }\n\n  /**\n   * 创建商品购买订单\n   */\n  static async createProductOrder(params: {\n    productId: string\n    quantity: number\n    paymentMethod: 'wechat' | 'balance'\n  }): Promise<OrderResponse> {\n    try {\n      const product = this.getProductById(params.productId)\n      if (!product) {\n        throw new Error('商品不存在')\n      }\n\n      const orderData: CreateOrderRequest = {\n        orderType: 'product',\n        userId: getCurrentUserId(),\n        title: product.name,\n        amount: product.price * params.quantity,  // ✅ 直接相乘，结果是分（product.price已是分为单位）\n        paymentMethod: params.paymentMethod,\n        extraData: {\n          productType: 'merchandise',\n          productId: params.productId,\n          productName: product.name,              // ✅ 新增：商品名称（API文档必需）\n          quantity: params.quantity,\n          specifications: product.specifications\n        }\n      }\n\n      // 🎁 调试日志\n      console.log('📦 创建商品订单')\n      console.log('👤 当前用户ID:', getCurrentUserId())\n      console.log('📋 订单数据:', {\n        orderType: orderData.orderType,\n        userId: orderData.userId,\n        title: orderData.title,\n        amount: `${orderData.amount}分 (¥${(orderData.amount / 100).toFixed(2)})`,\n        paymentMethod: orderData.paymentMethod,\n        extraData: orderData.extraData\n      })\n\n      const response = await post('/orders/create', orderData, {\n        showLoading: true,\n        loadingTitle: '创建订单中...'\n      })\n\n      console.log('✅ 商品订单创建成功')\n      console.log('📋 订单响应:', {\n        orderNo: response.data.orderNo,\n        amount: `${response.data.amount}分 (¥${(response.data.amount / 100).toFixed(2)})`,\n        paymentStatus: response.data.paymentStatus,\n        hasWxPayParams: !!response.data.wxPayParams\n      })\n\n      return response.data\n    } catch (error: any) {\n      console.error('❌ 创建商品订单失败:', error)\n      throw new Error(error.message || '创建商品订单失败')\n    }\n  }\n\n}","/**\n * 图片URL处理工具\n *\n * 用途：\n * 1. 将HTTP URL转换为HTTPS（WeChat要求）\n * 2. 处理缺失或无效的图片URL\n * 3. 提供备用图片方案\n */\n\n/**\n * 转换图片URL为HTTPS\n * @param url 图片URL - 可能为 undefined/null\n * @returns HTTPS格式的URL，或 undefined 如果输入无效\n *\n * 🚀 改进：不对 undefined/null 返回默认值\n * 这样调用方可以区分\"无值\"和\"有值\"的情况\n */\nexport const normalizeImageUrl = (url: string | undefined | null): string | undefined => {\n  // 🚀 改进：返回 undefined 而不是默认值\n  // 这样后续逻辑可以通过 !url 来正确判断是否需要获取真实数据\n  if (!url) {\n    return undefined;\n  }\n\n  // 已经是HTTPS，直接返回\n  if (url.startsWith('https://')) {\n    return url;\n  }\n\n  // HTTP转HTTPS\n  if (url.startsWith('http://')) {\n    return url.replace('http://', 'https://');\n  }\n\n  // 相对路径，加上HTTPS前缀\n  if (url.startsWith('/')) {\n    return `https://mingyitang1024.com${url}`;\n  }\n\n  // 其他情况，当作相对路径处理\n  return `https://mingyitang1024.com/static${url.startsWith('/') ? url : '/' + url}`;\n};\n\n/**\n * 获取默认图片\n */\nexport const getDefaultImage = (): string => {\n  return 'https://mingyitang1024.com/static/default.png';\n};\n\n/**\n * 验证图片URL是否有效\n * 注：在小程序中，最好在服务层处理，而不是在渲染时\n */\nexport const isValidImageUrl = (url: string): boolean => {\n  return !!(url && (url.startsWith('https://') || url.startsWith('http://') || url.startsWith('/')));\n};\n\n/**\n * 图片URL处理工具类\n * 适用于从API返回的动态图片URL\n */\nexport class ImageUrlHelper {\n  /**\n   * 处理推拿师头像\n   * @param avatarUrl API返回的头像URL（可能是HTTP）\n   * @returns HTTPS格式的URL，或 undefined 如果输入无效\n   */\n  static normalizeTherapistAvatar(avatarUrl: string | undefined): string | undefined {\n    return normalizeImageUrl(avatarUrl);\n  }\n\n  /**\n   * 处理门店图片\n   * @param imageUrl API返回的门店图片URL\n   * @returns HTTPS格式的URL，或 undefined 如果输入无效\n   */\n  static normalizeStoreImage(imageUrl: string | undefined): string | undefined {\n    return normalizeImageUrl(imageUrl);\n  }\n\n  /**\n   * 处理用户头像\n   * @param avatarUrl API返回的用户头像\n   * @returns HTTPS格式的URL，或 undefined 如果输入无效\n   */\n  static normalizeUserAvatar(avatarUrl: string | undefined): string | undefined {\n    return normalizeImageUrl(avatarUrl);\n  }\n}\n","import { request } from '@/utils/request'\nimport type { Store, PageData } from '@/types'\nimport { normalizeImageUrl } from '@/utils/image'\n\nclass StoreService {\n  // 获取附近门店\n  async getNearbyStores(\n    latitude: number,\n    longitude: number,\n    page: number = 1,\n    pageSize: number = 10\n  ): Promise<PageData<Store>> {\n    try {\n      const data = await request('/stores/nearby', {\n        data: { latitude, longitude, page, pageSize }\n      })\n\n      console.log('✅ 门店列表API调用成功:', data)\n\n      // 规范化图片URL（HTTP→HTTPS）\n      const normalizedStores = data.data.list.map((store: Store) => ({\n        ...store,\n        image: normalizeImageUrl(store.image),\n        images: store.images?.map(img => normalizeImageUrl(img))\n      }))\n\n      return {\n        ...data.data,\n        list: normalizedStores\n      }\n    } catch (error) {\n      // ⚠️ 错误直接抛出，让调用方处理\n      console.error('❌ 门店列表API调用失败:', error)\n      throw error\n    }\n  }\n  \n  // 获取门店详情\n  async getStoreDetail(storeId: string) {\n    try {\n      const data = await request(`/stores/${storeId}`)\n      console.log('✅ 门店详情API调用成功:', data)\n\n      // 规范化图片URL（HTTP→HTTPS）\n      if (data?.data) {\n        return {\n          ...data,\n          data: {\n            ...data.data,\n            image: normalizeImageUrl(data.data.image),\n            images: data.data.images?.map((img: string) => normalizeImageUrl(img))\n          }\n        }\n      }\n      return data\n    } catch (error) {\n      console.log('⚠️ 门店详情API调用失败:', error)\n      return null\n    }\n  }\n  \n  // 搜索门店\n  async searchStores(keyword: string, page: number = 1, pageSize: number = 10): Promise<PageData<Store>> {\n    try {\n      const data = await request('/stores/search', {\n        data: { keyword, page, pageSize }\n      })\n\n      console.log('✅ 门店搜索API调用成功:', data)\n      return data.data || { list: [], total: 0, page: 1, pageSize: 10, hasMore: false }\n    } catch (error) {\n      console.log('⚠️ 门店搜索API调用失败:', error)\n      return { list: [], total: 0, page: 1, pageSize: 10, hasMore: false }\n    }\n  }\n\n  // 根据状态筛选门店\n  async getStoresByStatus(\n    status: Store['status'],\n    page: number = 1,\n    pageSize: number = 10\n  ): Promise<PageData<Store>> {\n    try {\n      const data = await request('/stores/filter', {\n        data: { status, page, pageSize }\n      })\n\n      console.log('✅ 门店筛选API调用成功:', data)\n      return data.data || { list: [], total: 0, page: 1, pageSize: 10, hasMore: false }\n    } catch (error) {\n      console.log('⚠️ 门店筛选API调用失败:', error)\n      return { list: [], total: 0, page: 1, pageSize: 10, hasMore: false }\n    }\n  }\n}\n\nexport const storeService = new StoreService()","import Taro from '@tarojs/taro'\n\nexport interface Location {\n  latitude: number\n  longitude: number\n}\n\nclass LocationService {\n  // 获取用户当前位置\n  async getCurrentLocation(): Promise<Location> {\n    try {\n      // 检查授权状态\n      const settingRes = await Taro.getSetting()\n      const authSetting = settingRes?.authSetting || {}\n\n      if (!authSetting['scope.userLocation']) {\n        // 请求授权\n        await Taro.authorize({\n          scope: 'scope.userLocation'\n        })\n      }\n      \n      // 获取位置，先尝试gcj02，失败则降级到wgs84\n      let res\n      try {\n        res = await Taro.getLocation({\n          type: 'gcj02', // 国内火星坐标系\n          isHighAccuracy: true\n        })\n      } catch (gcj02Error) {\n        console.warn('gcj02坐标系不支持，尝试wgs84:', gcj02Error)\n        // 降级到wgs84坐标系\n        res = await Taro.getLocation({\n          type: 'wgs84' // GPS原始坐标系\n        })\n      }\n\n      return {\n        latitude: res.latitude,\n        longitude: res.longitude\n      }\n    } catch (error) {\n      console.error('获取位置失败:', error)\n\n      // 如果用户拒绝授权或其他错误，使用默认位置（上海市中心）\n      const errorMsg = (error as any)?.errMsg || ''\n\n      // 只在用户明确拒绝授权时才显示弹窗\n      if (errorMsg.includes('auth deny') || errorMsg.includes('authorize:fail')) {\n        Taro.showModal({\n          title: '提示',\n          content: '需要获取您的位置信息来推荐附近门店',\n          confirmText: '去设置',\n          success: (res) => {\n            if (res.confirm) {\n              Taro.openSetting()\n            }\n          }\n        })\n      }\n\n      // 无论什么错误，都返回默认位置（上海市中心）\n      console.log('使用默认位置：上海市中心')\n      return {\n        latitude: 31.2304,\n        longitude: 121.4737\n      }\n    }\n  }\n  \n  // 计算两点之间的距离（单位：公里）\n  calculateDistance(\n    lat1: number,\n    lng1: number,\n    lat2: number,\n    lng2: number\n  ): number {\n    const rad = Math.PI / 180\n    const R = 6371 // 地球半径（公里）\n    \n    const dLat = (lat2 - lat1) * rad\n    const dLng = (lng2 - lng1) * rad\n    \n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * rad) * Math.cos(lat2 * rad) *\n      Math.sin(dLng / 2) * Math.sin(dLng / 2)\n      \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    \n    return Number((R * c).toFixed(1))\n  }\n  \n  // 格式化距离显示\n  formatDistance(distance: number): string {\n    if (distance < 1) {\n      return `${Math.round(distance * 1000)}m`\n    }\n    return `${distance}km`\n  }\n}\n\nexport const getLocationService = new LocationService()","import React, { useState, useEffect, useRef } from 'react'\nimport { View, Text, Image } from '@tarojs/components'\nimport Taro from '@tarojs/taro'\nimport './index.scss'\n\ninterface CartItem {\n  id?: string  // 唯一标识符（可选，向后兼容）\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  date: string\n  time: string\n  therapistId?: string\n  therapistName: string\n  therapistAvatar?: string\n}\n\ninterface ShoppingCartProps {\n  items: CartItem[]\n  therapist?: any\n  onCheckout: () => void\n  onMaskClick?: () => void\n  onRemoveItem?: (index: number) => void\n}\n\nconst ShoppingCart: React.FC<ShoppingCartProps> = ({\n  items,\n  therapist,\n  onCheckout,\n  onMaskClick,\n  onRemoveItem\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const [countdown, setCountdown] = useState(180) // 3分钟 = 180秒\n  const timerRef = useRef<any>(null)\n\n  // 计算总价\n  const totalOriginalPrice = items.reduce((sum, item) => sum + item.price, 0)\n  const totalDiscountPrice = items.reduce((sum, item) => sum + (item.discountPrice || item.price), 0)\n  const totalSavings = totalOriginalPrice - totalDiscountPrice\n  const hasItems = items.length > 0\n\n  // 倒计时逻辑\n  useEffect(() => {\n    if (hasItems && isExpanded) {\n      timerRef.current = setInterval(() => {\n        setCountdown((prev) => {\n          if (prev <= 1) {\n            clearInterval(timerRef.current)\n            // 时间到，可以触发重置逻辑\n            Taro.showToast({\n              title: '支付超时了呦，快快重新下单吧~',\n              icon: 'none'\n            })\n            setIsExpanded(false)\n            return 180\n          }\n          return prev - 1\n        })\n      }, 1000)\n    } else {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n      }\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n      }\n    }\n  }, [hasItems, isExpanded])\n\n  // 格式化倒计时显示\n  const formatCountdown = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n  }\n\n  // 格式化日期显示\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr)\n    const today = new Date()\n    const isToday = date.toDateString() === today.toDateString()\n    \n    if (isToday) {\n      return '今天'\n    }\n    \n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    return `${month}月${day}日`\n  }\n\n  const handleCheckoutClick = () => {\n    if (!hasItems) {\n      Taro.showToast({\n        title: '请先选择服务',\n        icon: 'none'\n      })\n      return\n    }\n    \n    setIsExpanded(true)\n  }\n\n  const handleMaskClick = () => {\n    // 点击遮罩：清空购物车并关闭弹窗\n    if (onMaskClick) {\n      onMaskClick()\n    }\n    setIsExpanded(false)\n  }\n\n  const handleConfirmCheckout = () => {\n    onCheckout()\n  }\n\n  return (\n    <>\n      {/* 半透明遮罩 */}\n      {isExpanded && (\n        <View className=\"cart-mask\" onClick={handleMaskClick} />\n      )}\n\n      {/* 底部固定栏 */}\n      <View className=\"shopping-cart\">\n        <View className=\"cart-bar\">\n          <View className=\"cart-info\">\n            {hasItems ? (\n              <>\n                <Text className=\"total-price\">¥{totalDiscountPrice}</Text>\n                {totalSavings > 0 && (\n                  <Text className=\"savings\">已优惠¥{totalSavings}</Text>\n                )}\n              </>\n            ) : (\n              <Text className=\"empty-text\">请选择服务项目</Text>\n            )}\n          </View>\n          \n          <View \n            className={`checkout-btn ${!hasItems ? 'disabled' : ''}`} \n            onClick={handleCheckoutClick}\n          >\n            去结算\n          </View>\n        </View>\n      </View>\n\n      {/* 展开的购物车详情 */}\n      {isExpanded && (\n        <View className=\"cart-expanded\">\n          <View className=\"expanded-header\">\n            <Text className=\"title\">预约详情</Text>\n          </View>\n\n          {/* 服务详情 */}\n          <View className=\"service-list\">\n            {items.map((item, index) => (\n              <View key={index} className=\"service-item\">\n                <Image\n                  className=\"therapist-avatar\"\n                  src={item.therapistAvatar || therapist?.avatar || ''}\n                />\n                <View className=\"service-info\">\n                  <View className=\"info-header\">\n                    <Text className=\"therapist-name\">{item.therapistName}</Text>\n                    <Text className=\"duration\">{item.duration}分钟</Text>\n                  </View>\n                  <View className=\"info-detail\">\n                    <Text className=\"service-name\">{item.serviceName}</Text>\n                  </View>\n                  <View className=\"info-time\">\n                    <Text className=\"time-text\">\n                      {formatDate(item.date)} {item.time} 至 {\n                        // 计算结束时间\n                        (() => {\n                          const [hour, minute] = item.time.split(':').map(Number)\n                          const endMinute = minute + item.duration\n                          const endHour = hour + Math.floor(endMinute / 60)\n                          const finalMinute = endMinute % 60\n                          return `${endHour}:${finalMinute.toString().padStart(2, '0')}`\n                        })()\n                      }\n                    </Text>\n                  </View>\n                </View>\n                <View className=\"item-actions\">\n                  <View className=\"price-info\">\n                    <Text className=\"price\">¥{item.discountPrice || item.price}</Text>\n                  </View>\n                  {onRemoveItem && (\n                    <View\n                      className=\"remove-btn\"\n                      onClick={() => onRemoveItem(index)}\n                    >\n                      ✕\n                    </View>\n                  )}\n                </View>\n              </View>\n            ))}\n          </View>\n\n          {/* 可选增值项目 */}\n          <View className=\"addon-section\">\n            <Text className=\"section-title\">可选增值项目</Text>\n            <View className=\"addon-list\">\n              <View className=\"addon-item\">\n                <View className=\"addon-info\">\n                  <Text className=\"addon-name\">刮痧20分钟</Text>\n                  <Text className=\"addon-price\">¥ 99</Text>\n                </View>\n                <View className=\"addon-action\">+</View>\n              </View>\n              <View className=\"addon-item\">\n                <View className=\"addon-info\">\n                  <Text className=\"addon-name\">加钟20分钟</Text>\n                  <Text className=\"addon-price\">¥ 99</Text>\n                </View>\n                <View className=\"addon-action\">+</View>\n              </View>\n            </View>\n          </View>\n\n          {/* 底部结算信息 */}\n          <View className=\"checkout-section\">\n            <View className=\"price-summary\">\n              <View className=\"cart-icon\">\n                <Text className=\"icon\">🛒</Text>\n                <View className=\"badge\">1</View>\n              </View>\n              <View className=\"price-detail\">\n                <Text className=\"final-price\">¥ {totalDiscountPrice}</Text>\n                {totalOriginalPrice > totalDiscountPrice && (\n                  <Text className=\"original-price\">¥ {totalOriginalPrice}</Text>\n                )}\n              </View>\n              <Text className=\"discount-tip\">已享受最大优惠减20元</Text>\n            </View>\n            \n            <View className=\"checkout-footer\">\n              <Text className=\"countdown\">支付倒计时: {formatCountdown(countdown)}</Text>\n              <View className=\"confirm-btn\" onClick={handleConfirmCheckout}>\n                去结算\n              </View>\n            </View>\n          </View>\n        </View>\n      )}\n    </>\n  )\n}\n\nexport default ShoppingCart","// 症状分类数据\nexport const symptomCategories = [\n  { id: '1', name: '颈肩腰腿痛调理', order: 1 },\n  { id: '2', name: '肝胆脾胃调理', order: 2 },\n  { id: '3', name: '失眠调理', order: 3 },\n  { id: '4', name: '宫寒痛经调理', order: 4 },\n  { id: '5', name: '腙筋根骶', order: 5 },\n  { id: '6', name: '运动拉伸', order: 6 },\n  { id: '7', name: '体态调理', order: 7 }\n]\n\n// 症状服务项目数据\nexport const symptomServices = [\n  // 颈肩腰腿痛调理\n  {\n    id: 's1',\n    categoryId: '1',\n    name: '【不满意退】颈肩腰腿痛特色调理60分钟',\n    description: '专业手法调理各类痛症',\n    duration: 60,\n    price: 298,\n    discountPrice: 258,\n    availability: 'available' as const,\n    tag: '不满意退'\n  },\n  {\n    id: 's2',\n    categoryId: '1',\n    name: '【冬季养生】肩颈腰背推拿+热疗60分钟',\n    description: '温经通络，驱寒养生',\n    duration: 60,\n    price: 268,\n    discountPrice: 238,\n    availability: 'available' as const,\n    tag: '冬季养生'\n  },\n  {\n    id: 's3',\n    categoryId: '1',\n    name: '【初次专享】肩颈疏通+肌肉放松',\n    description: '新客特惠，深度放松',\n    duration: 60,\n    price: 198,\n    discountPrice: 98,\n    availability: 'available' as const,\n    tag: '初次专享'\n  },\n\n  // 肝胆脾胃调理\n  {\n    id: 's4',\n    categoryId: '2',\n    name: '【舒肝润肺】推拿+艾灸｜养身伴侣90分钟',\n    description: '疏肝理气，润肺养阴',\n    duration: 90,\n    price: 398,\n    discountPrice: 358,\n    availability: 'available' as const,\n    tag: '热销'\n  },\n  {\n    id: 's5',\n    categoryId: '2',\n    name: '【专项调理】纤养瘦身·脾胃脏腑调理60分钟',\n    description: '调理脾胃，健康瘦身',\n    duration: 60,\n    price: 318,\n    discountPrice: 288,\n    availability: 'available' as const,\n    tag: '专项调理'\n  },\n\n  // 失眠调理\n  {\n    id: 's6',\n    categoryId: '3',\n    name: '【深度放松】全身推拿20年经典60分钟',\n    description: '经典手法，深度助眠',\n    duration: 60,\n    price: 268,\n    discountPrice: 238,\n    availability: 'available' as const,\n    tag: '经典'\n  },\n\n  // 宫寒痛经调理\n  {\n    id: 's7',\n    categoryId: '4',\n    name: '【特色养生】关元灸手工悬灸60分钟',\n    description: '温补肾阳，调理宫寒',\n    duration: 60,\n    price: 288,\n    discountPrice: 258,\n    availability: 'available' as const,\n    tag: '特色'\n  },\n  {\n    id: 's8',\n    categoryId: '4',\n    name: '【本店热销】特色铺姜关元灸60分钟',\n    description: '铺姜温灸，暖宫调经',\n    duration: 60,\n    price: 298,\n    discountPrice: 268,\n    availability: 'busy' as const,\n    tag: '热销'\n  },\n\n  // 腙筋根骶\n  {\n    id: 's9',\n    categoryId: '5',\n    name: '【体态调整】大师手法中式整脊60分钟',\n    description: '正骨整脊，调整体态',\n    duration: 60,\n    price: 398,\n    discountPrice: 368,\n    availability: 'available' as const,\n    tag: '大师手法'\n  },\n\n  // 运动拉伸\n  {\n    id: 's10',\n    categoryId: '6',\n    name: '运动恢复拉伸',\n    description: '专业运动后恢复',\n    duration: 45,\n    price: 198,\n    discountPrice: 168,\n    availability: 'available' as const\n  },\n\n  // 体态调理\n  {\n    id: 's11',\n    categoryId: '7',\n    name: '【净排寒气】拔罐/刮痧二选一',\n    description: '祛湿排寒，疏通经络',\n    duration: 30,\n    price: 128,\n    discountPrice: 98,\n    availability: 'available' as const,\n    tag: '二选一'\n  },\n  {\n    id: 's12',\n    categoryId: '7',\n    name: '【芳香滋养】沉浸式精油SPA',\n    description: '精油护理，身心放松',\n    duration: 90,\n    price: 428,\n    discountPrice: 398,\n    availability: 'available' as const,\n    tag: '精油SPA'\n  }\n]\n\n// 获取推拿师支持的症状服务\nexport const getTherapistSymptomServices = (therapistId: string) => {\n  // 模拟不同推拿师支持不同的服务项目\n  // 这里简化处理，返回所有服务\n  return symptomServices.map(service => ({\n    ...service,\n    therapistId,\n    // 模拟动态可用性\n    availability: Math.random() > 0.7 ? 'busy' : service.availability\n  }))\n}","import { request } from '@/utils/request'\nimport type { Therapist, PageData } from '@/types'\nimport { storeService } from './store'\nimport { getLocationService } from './location'\nimport { normalizeImageUrl } from '@/utils/image'\n\nclass TherapistService {\n  // 获取推荐推拿师\n  async getRecommendedTherapists(\n    page: number = 1,\n    pageSize: number = 10,\n    userLocation?: { latitude: number; longitude: number }\n  ): Promise<PageData<Therapist>> {\n    try {\n      const data = await request('/therapists/recommended', {\n        data: { page, pageSize, latitude: userLocation?.latitude, longitude: userLocation?.longitude }\n      })\n\n      console.log('✅ 推荐推拿师API调用成功:', data)\n      return data.data || { list: [], total: 0, page: 1, pageSize: 10, hasMore: false }\n    } catch (error) {\n      console.log('⚠️ 推荐推拿师API调用失败，使用mock数据:', error)\n      return { list: [], total: 0, page: 1, pageSize: 10, hasMore: false }\n    }\n  }\n\n  // 获取推荐推拿师并计算距离\n  async getRecommendedTherapistsWithDistance(\n    page: number = 1,\n    pageSize: number = 10\n  ): Promise<PageData<Therapist & { distance: number | null }>> {\n    try {\n      // 1. 获取用户位置\n      const userLocation = await getLocationService.getCurrentLocation()\n\n      // 2. 获取推拿师列表（传入用户位置）\n      const data = await request('/therapists/recommended', {\n        data: {\n          page,\n          pageSize,\n          latitude: userLocation.latitude,\n          longitude: userLocation.longitude\n        }\n      })\n\n      console.log('✅ 推荐推拿师API调用成功:', data)\n\n      const therapists = data.data?.list || []\n\n      // 3. 规范化推拿师头像URL（HTTP→HTTPS）\n      const normalizedTherapists = therapists.map((therapist: Therapist) => ({\n        ...therapist,\n        avatar: normalizeImageUrl(therapist.avatar)\n      }))\n\n      // 4. 为每个推拿师计算距离\n      const therapistsWithDistance = await Promise.all(\n        normalizedTherapists.map(async (therapist: Therapist) => {\n          try {\n            // 获取推拿师对应门店信息\n            const storeData = await storeService.getStoreDetail(therapist.storeId)\n            const store = storeData?.data || storeData\n\n            let distance: number | null = null\n\n            // 如果门店有位置信息，计算距离\n            // API返回的位置数据直接在store对象上，不是嵌套的location对象\n            if (store?.latitude && store?.longitude) {\n              distance = getLocationService.calculateDistance(\n                userLocation.latitude,\n                userLocation.longitude,\n                store.latitude,\n                store.longitude\n              )\n            }\n\n            return {\n              ...therapist,\n              distance\n            }\n          } catch (error) {\n            console.warn(`获取技师 ${therapist.id} 门店信息失败:`, error)\n            return {\n              ...therapist,\n              distance: null\n            }\n          }\n        })\n      )\n\n      // 4. 按距离排序（距离近的排在前面，null值排在后面）\n      therapistsWithDistance.sort((a, b) => {\n        if (a.distance === null && b.distance === null) return 0\n        if (a.distance === null) return 1\n        if (b.distance === null) return -1\n        return a.distance - b.distance\n      })\n\n      return {\n        list: therapistsWithDistance,\n        total: data.data?.total || therapistsWithDistance.length,\n        page: data.data?.page || page,\n        pageSize: data.data?.pageSize || pageSize,\n        hasMore: data.data?.hasMore || false\n      }\n    } catch (error) {\n      console.log('⚠️ 推荐推拿师距离计算API调用失败:', error)\n      return { list: [], total: 0, page: 1, pageSize: 10, hasMore: false }\n    }\n  }\n\n  // 根据门店获取推拿师\n  async getTherapistsByStore(\n    storeId: string,\n    page: number = 1,\n    pageSize: number = 10\n  ): Promise<PageData<Therapist>> {\n    const data = await request(`/stores/${storeId}/therapists`, {\n      data: { page, pageSize }\n    })\n\n    console.log('✅ 门店推拿师API调用成功:', data)\n\n    // API返回的data是数组，需要转换为PageData格式\n    const therapistArray = Array.isArray(data.data) ? data.data : []\n    return {\n      list: therapistArray,\n      total: therapistArray.length,\n      page: 1,\n      pageSize: therapistArray.length,\n      hasMore: false\n    }\n  }\n  \n  // 获取推拿师详情\n  async getTherapistDetail(therapistId: string) {\n    try {\n      const data = await request(`/therapists/${therapistId}`)\n      console.log('✅ 推拿师详情API调用成功:', data)\n      return data\n    } catch (error) {\n      console.log('⚠️ 推拿师详情API调用失败:', error)\n      throw error // 让上层处理错误\n    }\n  }\n  \n  // 按擅长项目筛选推拿师\n  async getTherapistsByExpertise(\n    expertise: string,\n    page: number = 1,\n    pageSize: number = 10\n  ): Promise<PageData<Therapist>> {\n    const data = await request('/therapists/search', {\n      data: { expertise, page, pageSize }\n    })\n\n    console.log('✅ 专长筛选推拿师API调用成功:', data)\n    return data.data\n  }\n  \n  // 搜索推拿师\n  async searchTherapists(\n    keyword: string,\n    page: number = 1,\n    pageSize: number = 10\n  ): Promise<PageData<Therapist>> {\n    const data = await request('/therapists/search', {\n      data: { keyword, page, pageSize }\n    })\n\n    console.log('✅ 搜索推拿师API调用成功:', data)\n    return data.data\n  }\n\n  // 获取技师可预约时段\n  async getAvailableSlots(\n    therapistId: string,\n    date: string,\n    duration: number = 60\n  ): Promise<{\n    date: string\n    slots: Array<{\n      time: string\n      available: boolean\n      status: 'available' | 'busy' | 'break'\n    }>\n    workTime: {\n      start: string\n      end: string\n    }\n  }> {\n    try {\n      const data = await request('/appointments/available-slots', {\n        data: { therapistId, date, duration }\n      })\n\n      console.log('✅ 获取可预约时段API调用成功:', data)\n      return data.data\n    } catch (error) {\n      // ⚠️ 错误直接抛出，让调用方处理\n      // 这样可以区分不同的错误场景（推拿师不存在、网络错误等）\n      console.error('❌ 获取可预约时段API调用失败:', error)\n      throw error\n    }\n  }\n}\n\nexport const therapistService = new TherapistService()","import Taro from '@tarojs/taro'\nimport { get, post } from '@/utils/request'\nimport { getCurrentUserId, getCurrentUserPhone } from '@/utils/user'\nimport { normalizeImageUrl } from '@/utils/image'  // 🚀 新增：图片URL规范化工具\n\n/**\n * 订单数据接口\n */\nexport interface OrderData {\n  orderNo: string\n  orderType: 'service' | 'product' | 'recharge'\n  userId: number\n  userPhone: string\n  title: string\n  amount: number\n  paymentMethod: 'wechat' | 'balance'\n  paymentStatus: 'pending' | 'paid' | 'cancelled' | 'refunded'\n  createdAt: string\n  paidAt?: string\n  extraData?: any\n\n  // 服务订单特有字段\n  appointmentId?: number  // 预约ID（用于评价）\n  therapistId?: string\n  therapistName?: string\n  therapistAvatar?: string\n  storeId?: string\n  storeName?: string\n  storeAddress?: string\n  serviceId?: string\n  serviceName?: string\n  duration?: number\n  appointmentDate?: string  // ✅ 预约日期 (YYYY-MM-DD)\n  startTime?: string        // ✅ 改为 startTime（与API对齐）\n  appointmentStatus?: 'pending' | 'confirmed' | 'serving' | 'completed' | 'cancelled'  // 预约状态\n\n  // 计算字段\n  // totalAmount 已弃用：应该使用 amount（分为单位），在UI层使用 formatAmount() 转换显示\n  paymentDeadline?: string\n  displayStatus?: string  // 综合显示状态\n}\n\n/**\n * 订单列表响应\n */\ninterface OrderListResponse {\n  list: OrderData[]\n  total: number\n  page: number\n  pageSize: number\n  hasMore: boolean\n}\n\n/**\n * 创建订单参数\n * ✅ 时间字段与API对齐\n */\nexport interface CreateOrderParams {\n  therapistId: string\n  storeId: string\n  serviceId: string\n  serviceName: string\n  duration: number\n  price: number\n  discountPrice?: number\n  appointmentDate: string\n  appointmentTime: string  // ✅ 保留这个字段名用于页面兼容性，service层会映射到 startTime\n  therapistName: string\n  therapistAvatar?: string\n  addons?: Array<{\n    id: string\n    name: string\n    price: number\n  }>\n}\n\n/**\n * 支付参数\n */\nexport interface PaymentParams {\n  timeStamp: string\n  nonceStr: string\n  package: string\n  signType: string\n  paySign: string\n}\n\n/**\n * 取消订单响应\n */\ninterface CancelOrderResponse {\n  orderNo: string\n  paymentStatus: string\n  refundAmount?: number\n  refundRate?: number\n  cancelledAt?: string\n}\n\n/**\n * 订单服务类\n * 生产级代码：完全使用真实API\n */\nclass OrderService {\n  /**\n   * 获取当前用户信息\n   */\n  private getUserInfo() {\n    return {\n      userId: getCurrentUserId(),\n      userPhone: getCurrentUserPhone()\n    }\n  }\n\n  /**\n   * 获取综合显示状态\n   * 结合支付状态和预约状态，返回最终的显示状态\n   */\n  private getDisplayStatus(order: OrderData): string {\n    // 支付未完成\n    if (order.paymentStatus === 'pending') {\n      return 'pending'\n    }\n\n    // 已取消或退款\n    if (order.paymentStatus === 'cancelled' || order.paymentStatus === 'refunded') {\n      return order.paymentStatus\n    }\n\n    // 已支付的服务订单，根据预约状态细分\n    if (order.paymentStatus === 'paid' && order.orderType === 'service') {\n      // 如果有预约状态，优先使用\n      if (order.appointmentStatus) {\n        switch(order.appointmentStatus) {\n          case 'completed':\n            return 'completed'  // 已完成（管理员标记）\n          case 'serving':\n            return 'serving'    // 服务中（虽然少见，但可能存在）\n          case 'cancelled':\n            return 'cancelled'  // 预约已取消\n          case 'pending':         // 待确认\n          case 'confirmed':       // 已确认\n          default:\n            return 'paid'       // 都归类为\"待服务\"\n        }\n      }\n\n      // 没有预约状态时，根据时间推断\n      if (order.appointmentDate && order.startTime) {\n        const appointmentDateTime = new Date(`${order.appointmentDate} ${order.startTime}`)\n        const endDateTime = new Date(appointmentDateTime.getTime() + (order.duration || 60) * 60000)\n        const now = new Date()\n\n        // 如果服务时间已经结束，但没有标记completed，暂时归类为待服务\n        // 等待管理员手动标记为completed\n        if (endDateTime < now) {\n          // 服务时间已过，可能已完成但未标记\n          // 保守处理：仍显示为\"待服务\"，避免误判\n          return 'paid'\n        }\n      }\n    }\n\n    // 默认返回支付状态\n    return order.paymentStatus\n  }\n\n  /**\n   * 补全订单的门店和技师信息\n   * @param order 订单对象\n   * @private\n   */\n  private async enrichOrderWithStoreAndTherapistInfo(order: OrderData): Promise<void> {\n    try {\n      const promises: Promise<any>[] = []\n\n      // 并发获取门店信息\n      if (order.storeId && !order.storeName) {\n        promises.push(\n          get(`/stores/${order.storeId}`)\n            .then(storeResponse => {\n              const store = storeResponse.data\n              order.storeName = store.name\n              order.storeAddress = store.address\n            })\n            .catch(async (error) => {\n              console.error(`获取门店信息失败 (storeId: ${order.storeId}):`, error)\n              // 尝试获取默认门店信息\n              const defaultStore = await this.getDefaultStoreInfo()\n              if (defaultStore) {\n                order.storeName = `${defaultStore.name}（替代显示）`\n                order.storeAddress = defaultStore.address\n              } else {\n                // 最后的降级方案\n                order.storeName = '门店信息暂时无法获取'\n                order.storeAddress = '请联系客服获取详情'\n              }\n            })\n        )\n      }\n\n      // 并发获取技师信息\n      if (order.therapistId && !order.therapistAvatar) {\n        promises.push(\n          get(`/therapists/${order.therapistId}`)\n            .then(therapistResponse => {\n              const therapist = therapistResponse.data\n              order.therapistAvatar = therapist.avatar\n              // 如果extraData中没有技师姓名，则使用API返回的姓名\n              if (!order.therapistName) {\n                order.therapistName = therapist.name\n              }\n            })\n            .catch(error => {\n              console.error(`获取技师信息失败 (therapistId: ${order.therapistId}):`, error)\n              // 失败时使用默认头像\n              if (!order.therapistAvatar) {\n                order.therapistAvatar = 'https://img.yzcdn.cn/vant/cat.jpeg'\n              }\n            })\n        )\n      }\n\n      // 等待所有API调用完成\n      if (promises.length > 0) {\n        await Promise.allSettled(promises)\n      }\n    } catch (error) {\n      console.error('补全订单信息失败:', error)\n      // 不抛出错误，确保订单详情仍能正常返回\n    }\n  }\n\n  /**\n   * 获取默认门店信息（当原门店不存在时使用）\n   * @private\n   */\n  private async getDefaultStoreInfo(): Promise<{ name: string; address: string } | null> {\n    try {\n      const response = await get('/stores/nearby', { page: 1, pageSize: 1 })\n      if (response.data?.list?.[0]) {\n        const store = response.data.list[0]\n        return {\n          name: store.name,\n          address: store.address\n        }\n      }\n    } catch (error) {\n      console.error('获取默认门店信息失败:', error)\n    }\n    return null\n  }\n\n  /**\n   * 批量补全订单列表的门店和技师信息，过滤无效订单\n   * @param orders 订单列表\n   * @returns 过滤后的有效订单列表\n   * @private\n   */\n  private async enrichOrderListWithStoreAndTherapistInfo(orders: OrderData[]): Promise<OrderData[]> {\n    try {\n      // 收集需要获取的门店ID和技师ID（去重）\n      const storeIds = new Set<string>()\n      const therapistIds = new Set<string>()\n\n      orders.forEach(order => {\n        if (order.storeId && !order.storeName) {\n          storeIds.add(order.storeId.toString())\n        }\n        if (order.therapistId && !order.therapistAvatar) {\n          therapistIds.add(order.therapistId.toString())\n        }\n      })\n\n      // 并发获取所有需要的门店和技师信息\n      const promises: Promise<any>[] = []\n      const storeMap = new Map<string, any>()\n      const therapistMap = new Map<string, any>()\n      const invalidStoreIds = new Set<string>()\n\n      // 批量获取门店信息\n      Array.from(storeIds).forEach(storeId => {\n        promises.push(\n          get(`/stores/${storeId}`)\n            .then(response => {\n              storeMap.set(storeId, response.data)\n            })\n            .catch(error => {\n              console.warn(`门店不存在，将过滤相关订单 (storeId: ${storeId}):`, error.message)\n              invalidStoreIds.add(storeId)\n            })\n        )\n      })\n\n      // 批量获取技师信息\n      Array.from(therapistIds).forEach(therapistId => {\n        promises.push(\n          get(`/therapists/${therapistId}`)\n            .then(response => {\n              therapistMap.set(therapistId, response.data)\n            })\n            .catch(error => {\n              console.error(`批量获取技师信息失败 (therapistId: ${therapistId}):`, error)\n            })\n        )\n      })\n\n      // 等待所有API调用完成\n      if (promises.length > 0) {\n        await Promise.allSettled(promises)\n      }\n\n      // 🚀 过滤掉门店不存在的无效订单\n      const validOrders = orders.filter(order => {\n        if (order.storeId && invalidStoreIds.has(order.storeId.toString())) {\n          console.warn(`过滤无效订单: ${order.orderNo}（门店 ${order.storeId} 不存在）`)\n          return false\n        }\n        return true\n      })\n\n      // 只对有效订单填充信息\n      validOrders.forEach(order => {\n        // 填充门店信息\n        if (order.storeId && !order.storeName) {\n          const store = storeMap.get(order.storeId.toString())\n          if (store) {\n            order.storeName = store.name\n            order.storeAddress = store.address\n          }\n        }\n\n        // 填充技师信息\n        if (order.therapistId && !order.therapistAvatar) {\n          const therapist = therapistMap.get(order.therapistId.toString())\n          if (therapist) {\n            order.therapistAvatar = therapist.avatar\n            if (!order.therapistName) {\n              order.therapistName = therapist.name\n            }\n          } else {\n            // 如果没有获取到技师信息，设置默认头像\n            order.therapistAvatar = 'https://img.yzcdn.cn/vant/cat.jpeg'\n          }\n        }\n      })\n\n      return validOrders\n    } catch (error) {\n      console.error('批量补全订单列表信息失败:', error)\n      // 发生错误时返回原始订单列表\n      return orders\n    }\n  }\n\n  /**\n   * 创建预约订单（通过预约接口）\n   * @param params 创建订单参数\n   * @returns 订单和预约信息\n   */\n  async createAppointmentOrder(params: CreateOrderParams) {\n    try {\n      const { userId, userPhone } = this.getUserInfo()\n\n      // 调试日志 - 查看原始参数\n      console.log('📝 创建订单原始参数:', params)\n      console.log('📝 therapistId类型:', typeof params.therapistId, '值:', params.therapistId)\n\n      const requestData = {\n        therapistId: Number(params.therapistId),\n        storeId: Number(params.storeId),\n        userId,\n        userPhone,\n        appointmentDate: params.appointmentDate,\n        startTime: params.appointmentTime,\n        duration: params.duration || 60,\n        serviceId: params.serviceId,\n        serviceName: params.serviceName,\n        price: params.discountPrice || params.price\n      }\n\n      // 调试日志 - 查看转换后的请求数据\n      console.log('📤 实际发送的请求数据:', requestData)\n      console.log('📤 转换后的therapistId:', requestData.therapistId, '是否为NaN:', isNaN(requestData.therapistId))\n\n      const response = await post('/appointments/create-with-order', requestData, {\n        showLoading: true,\n        loadingTitle: '创建订单中...'\n      })\n\n      // 提取订单信息\n      const orderData: OrderData = {\n        ...response.data.order,\n        therapistName: params.therapistName,\n        therapistAvatar: params.therapistAvatar,\n        serviceName: params.serviceName,\n        duration: params.duration,\n        appointmentDate: params.appointmentDate,\n        startTime: params.appointmentTime  // ✅ 映射到 startTime\n        // ✅ amount 已经从API返回，单位为分\n      }\n\n      return {\n        order: orderData,\n        appointment: response.data.appointment\n      }\n    } catch (error: any) {\n      console.error('创建订单失败:', error)\n      throw new Error(error.message || '创建订单失败')\n    }\n  }\n\n  /**\n   * 获取支付参数\n   * @param orderNo 订单号\n   * @returns 支付参数\n   */\n  async getPaymentParams(orderNo: string): Promise<PaymentParams> {\n    try {\n      const response = await post('/orders/pay', {\n        orderNo,\n        paymentMethod: 'wechat'\n      })\n\n      // 返回微信支付参数\n      if (response.data.wxPayParams) {\n        return response.data.wxPayParams\n      }\n\n      // 模拟支付参数（开发环境）\n      return {\n        timeStamp: String(Math.floor(Date.now() / 1000)),\n        nonceStr: Math.random().toString(36).substr(2, 15),\n        package: `prepay_id=${Math.random().toString(36).substr(2, 15)}`,\n        signType: 'MD5',\n        paySign: Math.random().toString(36).substr(2, 32)\n      }\n    } catch (error: any) {\n      console.error('获取支付参数失败:', error)\n      throw new Error('获取支付参数失败')\n    }\n  }\n\n  /**\n   * 更新订单状态（余额支付）\n   * @param orderNo 订单号\n   * @param status 订单状态\n   * @returns 更新后的订单\n   */\n  async updateOrderStatus(orderNo: string, status: OrderData['paymentStatus']): Promise<OrderData> {\n    try {\n      // 使用余额支付接口\n      const response = await post('/orders/pay', {\n        orderNo,\n        paymentMethod: 'balance'\n      })\n\n      return {\n        orderNo,\n        paymentStatus: 'paid',\n        paidAt: response.data.paidAt || new Date().toISOString()\n      } as OrderData\n    } catch (error: any) {\n      console.error('更新订单状态失败:', error)\n      throw new Error(error.message || '支付失败')\n    }\n  }\n\n  /**\n   * 获取订单详情\n   * @param orderNo 订单号\n   * @returns 订单详情\n   */\n  async getOrderDetail(orderNo: string): Promise<OrderData> {\n    try {\n      // 使用RESTful风格的API路径\n      const response = await get(`/orders/${orderNo}`)\n\n      // ✅ API返回的amount已经是分为单位，保持分为单位返回\n      const order = response.data\n      // amount 保持分为单位，由UI层使用 formatAmount() 转换显示\n\n      // 从extraData中提取预约信息\n      if (order.extraData) {\n        order.appointmentId = order.extraData.appointmentId\n        order.therapistId = order.extraData.therapistId\n        order.therapistName = order.extraData.therapistName\n        // 🚀 新增：规范化技师头像URL为HTTPS\n        order.therapistAvatar = normalizeImageUrl(order.extraData.therapistAvatar)\n        order.storeId = order.extraData.storeId\n        order.appointmentDate = order.extraData.appointmentDate\n        order.startTime = order.extraData.startTime  // ✅ 改为 startTime\n        order.duration = order.extraData.duration\n        order.serviceName = order.extraData.serviceName || order.title\n\n        // 🚀 读取预约状态（后端新增字段）\n        order.appointmentStatus = order.extraData.appointmentStatus\n\n        // 🚀 自动获取完整的门店和技师信息\n        await this.enrichOrderWithStoreAndTherapistInfo(order)\n      }\n\n      // 计算综合显示状态\n      order.displayStatus = this.getDisplayStatus(order)\n\n      return order\n    } catch (error: any) {\n      console.error('获取订单详情失败:', error)\n      throw new Error('订单不存在或已删除')\n    }\n  }\n\n  /**\n   * 获取订单列表\n   * @param status 订单状态（可选）\n   * @param orderType 订单类型（可选）\n   * @param page 页码\n   * @param pageSize 每页数量\n   * @returns 订单列表\n   */\n  async getOrderList(\n    status?: OrderData['paymentStatus'],\n    orderType?: OrderData['orderType'],\n    page: number = 1,\n    pageSize: number = 20\n  ): Promise<OrderData[]> {\n    try {\n      const { userId } = this.getUserInfo()\n\n      const params: any = { userId, page, pageSize }\n      if (status) params.status = status\n      if (orderType) params.orderType = orderType\n\n      const response = await get<OrderListResponse>('/orders', params)\n\n      // 处理订单数据\n      const orders = response.data.list.map(order => {\n        // ✅ API返回的amount已经是分为单位，保持分为单位返回\n        // amount 保持分为单位，由UI层使用 formatAmount() 转换显示\n\n        // 从extraData中提取信息\n        if (order.extraData) {\n          order.appointmentId = order.extraData.appointmentId\n          order.therapistId = order.extraData.therapistId\n          order.therapistName = order.extraData.therapistName\n          // 🚀 新增：正确提取技师头像URL并规范化为HTTPS\n          order.therapistAvatar = normalizeImageUrl(order.extraData.therapistAvatar)\n          order.storeId = order.extraData.storeId\n          order.storeName = order.extraData.storeName // 移除硬编码默认值\n          order.storeAddress = order.extraData.storeAddress // 移除硬编码默认值\n          order.appointmentDate = order.extraData.appointmentDate\n          order.startTime = order.extraData.startTime  // ✅ 改为 startTime\n          order.duration = order.extraData.duration\n          order.serviceName = order.extraData.serviceName || order.title\n\n          // 🚀 读取预约状态（后端新增字段）\n          order.appointmentStatus = order.extraData.appointmentStatus\n        }\n\n        // 计算综合显示状态\n        order.displayStatus = this.getDisplayStatus(order)\n\n        return order\n      })\n\n      // 🚀 批量补全门店和技师信息，并过滤无效订单\n      const validOrders = await this.enrichOrderListWithStoreAndTherapistInfo(orders)\n\n      return validOrders\n    } catch (error: any) {\n      console.error('获取订单列表失败:', error)\n      return []\n    }\n  }\n\n  /**\n   * 取消订单\n   * @param orderNo 订单号\n   * @param reason 取消原因\n   * @returns 取消结果\n   */\n  async cancelOrder(orderNo: string, reason: string = '用户取消'): Promise<CancelOrderResponse> {\n    try {\n      const { userId } = this.getUserInfo()\n\n      const response = await post<CancelOrderResponse>('/orders/cancel', {\n        orderNo,\n        userId,\n        reason\n      }, {\n        showLoading: true,\n        loadingTitle: '取消中...'\n      })\n\n      return response.data\n    } catch (error: any) {\n      console.error('取消订单失败:', error)\n      throw new Error(error.message || '取消订单失败')\n    }\n  }\n\n  /**\n   * 申请退款（通过订单API）\n   * @param orderNo 订单号\n   * @param reason 退款原因（可选）\n   * @returns 退款单信息\n   */\n  async requestRefund(orderNo: string, reason?: string): Promise<any> {\n    try {\n      const { userId } = this.getUserInfo()\n\n      const response = await post(`/orders/${orderNo}/refund`, {\n        userId,\n        reason: reason || '用户申请退款'\n      }, {\n        showLoading: true,\n        loadingTitle: '申请退款中...'\n      })\n\n      return response.data\n    } catch (error: any) {\n      console.error('申请退款失败:', error)\n      throw new Error(error.message || '申请退款失败')\n    }\n  }\n\n  /**\n   * 查询退款详情\n   * @param refundId 退款单号\n   * @returns 退款详情\n   */\n  async getRefundDetail(refundId: string): Promise<any> {\n    try {\n      const response = await get(`/refunds/${refundId}`)\n      return response.data\n    } catch (error: any) {\n      console.error('获取退款详情失败:', error)\n      throw new Error('退款单不存在或已删除')\n    }\n  }\n\n  /**\n   * 重新预约（基于已有订单）\n   * @param orderNo 原订单号\n   * @returns 是否成功\n   */\n  async rebookOrder(orderNo: string): Promise<boolean> {\n    try {\n      // 获取原订单信息\n      const originalOrder = await this.getOrderDetail(orderNo)\n\n      // 保存到临时存储，供预约页面使用\n      Taro.setStorageSync('rebookOrderInfo', {\n        therapistId: originalOrder.therapistId,\n        therapistName: originalOrder.therapistName,\n        storeId: originalOrder.storeId,\n        storeName: originalOrder.storeName,\n        serviceId: originalOrder.serviceId,\n        serviceName: originalOrder.serviceName,\n        duration: originalOrder.duration\n      })\n\n      return true\n    } catch (error) {\n      console.error('重新预约失败:', error)\n      return false\n    }\n  }\n\n  /**\n   * 获取订单统计\n   * @returns 订单统计信息\n   */\n  async getOrderStatistics() {\n    try {\n      const { userId } = this.getUserInfo()\n      const response = await get('/orders', { userId, page: 1, pageSize: 100 })\n\n      const orders = response.data.list\n\n      return {\n        total: orders.length,\n        pendingPayment: orders.filter((o: OrderData) => o.paymentStatus === 'pending').length,\n        paid: orders.filter((o: OrderData) => o.paymentStatus === 'paid').length,\n        completed: orders.filter((o: OrderData) => o.paymentStatus === 'paid' &&\n          new Date(o.appointmentDate + ' ' + o.startTime) < new Date()).length,  // ✅ 改为 startTime\n        cancelled: orders.filter((o: OrderData) => o.paymentStatus === 'cancelled').length\n      }\n    } catch (error) {\n      console.error('获取订单统计失败:', error)\n      return {\n        total: 0,\n        pendingPayment: 0,\n        paid: 0,\n        completed: 0,\n        cancelled: 0\n      }\n    }\n  }\n}\n\n// 导出单例实例\nexport const orderService = new OrderService()","/**\n * 金额单位统一处理工具库\n *\n * 金额单位规范：\n * - API返回：分（fen）- 整数，无精度问题\n * - 服务层返回：分（fen）- 保持API返回的原始单位，供上层调用\n * - UI展示：元（yuan）- 调用转换函数在组件中转换\n *\n * 这样做的好处：\n * 1. 服务层逻辑清晰，直接从API获取分为单位的数据，无需转换\n * 2. 组件层负责显示，转换逻辑集中在UI层\n * 3. 避免中间层多次转换导致的精度问题\n */\n\n/**\n * 将分转换为元（四舍五入）\n * @param amountInCents 金额（分）\n * @returns 金额（元）\n */\nexport function centsToYuan(amountInCents: number | undefined | null): number {\n  if (!amountInCents && amountInCents !== 0) return 0\n  return Math.round(amountInCents) / 100\n}\n\n/**\n * 将元转换为分（避免浮点数精度问题）\n * @param amountInYuan 金额（元）\n * @returns 金额（分）\n */\nexport function yuanToCents(amountInYuan: number | undefined | null): number {\n  if (!amountInYuan && amountInYuan !== 0) return 0\n  return Math.round(amountInYuan * 100)\n}\n\n/**\n * 格式化金额为显示字符串（元）\n * @param amountInCents 金额（分）\n * @param options 选项\n * @returns 格式化后的字符串，如 \"99.99元\"\n */\nexport function formatAmount(\n  amountInCents: number | undefined | null,\n  options?: {\n    symbol?: string  // 货币符号，默认\"￥\"\n    suffix?: string  // 后缀，默认\"元\"\n    precision?: number  // 小数位数，默认2\n  }\n): string {\n  const {\n    symbol = '￥',\n    suffix = '元',\n    precision = 2\n  } = options || {}\n\n  // 🚀 改进：更清晰的容错处理，避免NaN\n  if (amountInCents === undefined || amountInCents === null) {\n    return `${symbol}0.00${suffix}`\n  }\n\n  // 验证是否为有效数字\n  if (typeof amountInCents !== 'number' || isNaN(amountInCents)) {\n    console.warn('⚠️ formatAmount: 无效的金额输入', { amountInCents, type: typeof amountInCents })\n    return `${symbol}0.00${suffix}`\n  }\n\n  const yuan = centsToYuan(amountInCents)\n\n  // 防御性检查：确保结果不是NaN\n  if (isNaN(yuan)) {\n    console.error('❌ formatAmount: 金额转换结果为NaN', { amountInCents, yuan })\n    return `${symbol}0.00${suffix}`\n  }\n\n  return `${symbol}${yuan.toFixed(precision)}${suffix}`\n}\n\n/**\n * 获取节省金额的显示文本\n * @param originalPrice 原价（分）\n * @param discountPrice 折扣价（分）\n * @returns 如 \"节省￥10.00\"\n */\nexport function getSavingsText(\n  originalPrice: number | undefined,\n  discountPrice: number | undefined\n): string {\n  if (!originalPrice || !discountPrice || originalPrice <= discountPrice) {\n    return ''\n  }\n\n  const savings = originalPrice - discountPrice\n  return `节省${formatAmount(savings)}`\n}\n\n/**\n * 计算折扣率百分比\n * @param originalPrice 原价（分）\n * @param discountPrice 折扣价（分）\n * @returns 折扣率，如0.8表示8折\n */\nexport function getDiscountRate(\n  originalPrice: number | undefined,\n  discountPrice: number | undefined\n): number {\n  if (!originalPrice || originalPrice === 0) return 1\n  if (!discountPrice) return 0\n\n  return Math.round((discountPrice / originalPrice) * 10) / 10\n}\n\n/**\n * 判断金额是否有效（大于0）\n */\nexport function isValidAmount(amount: number | undefined | null): boolean {\n  return Boolean(amount) && amount! > 0\n}\n","/**\n * 支付服务\n * 支持模拟支付和余额支付（个人小程序可用）\n */\nimport Taro from '@tarojs/taro'\nimport { post } from '@/utils/request'\n\ninterface PaymentConfig {\n  useMockPayment: boolean\n  enableBalancePayment: boolean\n  enableWechatPayment: boolean\n}\n\ninterface PaymentOptions {\n  orderNo: string\n  amount: number\n  paymentMethod: 'wechat' | 'balance' | 'mock'\n  title?: string\n}\n\nclass PaymentService {\n  private config: PaymentConfig = {\n    // 企业小程序真实支付配置\n    useMockPayment: false,  // 关闭模拟支付\n    enableBalancePayment: true,\n    enableWechatPayment: true  // 启用真实微信支付\n  }\n\n  /**\n   * 统一支付入口\n   */\n  async pay(options: PaymentOptions): Promise<boolean> {\n    const { paymentMethod } = options\n\n    // 开发环境或个人小程序使用模拟支付\n    if (this.config.useMockPayment && paymentMethod === 'wechat') {\n      return this.mockWechatPayment(options)\n    }\n\n    // 余额支付\n    if (paymentMethod === 'balance') {\n      return this.payWithBalance(options)\n    }\n\n    // 真实微信支付（需要企业认证）\n    if (paymentMethod === 'wechat' && this.config.enableWechatPayment) {\n      return this.payWithWechat(options)\n    }\n\n    throw new Error('不支持的支付方式')\n  }\n\n  /**\n   * 模拟微信支付（个人小程序测试用）\n   * 使用真实的支付接口 /api/v2/orders/pay\n   */\n  private async mockWechatPayment(options: PaymentOptions): Promise<boolean> {\n    try {\n      // 显示模拟支付界面\n      const { confirm } = await Taro.showModal({\n        title: '模拟支付',\n        content: `订单金额：¥${(options.amount / 100).toFixed(2)}\\n${options.title || ''}`,\n        confirmText: '确认支付',\n        cancelText: '取消支付',\n        confirmColor: '#07c160'\n      })\n\n      if (confirm) {\n        // 显示加载动画\n        Taro.showLoading({ title: '支付中...' })\n\n        // 模拟网络延迟\n        await this.delay(1500)\n\n        console.log('💳 模拟微信支付请求参数:', {\n          orderNo: options.orderNo,\n          paymentMethod: 'wechat'\n        })\n\n        // 调用真实的支付接口\n        const response = await post('/orders/pay', {\n          orderNo: options.orderNo,\n          paymentMethod: 'wechat'\n        })\n\n        console.log('💳 模拟微信支付响应:', response)\n\n        Taro.hideLoading()\n\n        if (response.code === 0) {\n          Taro.showToast({\n            title: '支付成功',\n            icon: 'success'\n          })\n          return true\n        } else {\n          throw new Error(response.message || '支付失败')\n        }\n      } else {\n        console.log('用户取消模拟支付')\n        return false\n      }\n    } catch (error: any) {\n      console.error('💳 模拟微信支付失败:', error)\n      Taro.hideLoading()\n      Taro.showToast({\n        title: error.message || '支付失败',\n        icon: 'none'\n      })\n      throw error\n    }\n  }\n\n  /**\n   * 余额支付\n   */\n  private async payWithBalance(options: PaymentOptions): Promise<boolean> {\n    try {\n      Taro.showLoading({ title: '支付中...' })\n\n      console.log('💰 余额支付请求参数:', {\n        orderNo: options.orderNo,\n        paymentMethod: 'balance'\n      })\n\n      // 调用余额支付接口\n      const response = await post('/orders/pay', {\n        orderNo: options.orderNo,\n        paymentMethod: 'balance'\n      })\n\n      console.log('💰 余额支付响应:', response)\n\n      Taro.hideLoading()\n\n      if (response.code === 0) {\n        // 显示新余额\n        // ✅ API返回的balance已经是分为单位，需要转为元显示\n        const balanceInYuan = (response.data.balance || 0) / 100\n        Taro.showToast({\n          title: `支付成功\\n余额：¥${balanceInYuan.toFixed(2)}`,\n          icon: 'success',\n          duration: 2000\n        })\n        return true\n      } else {\n        throw new Error(response.message || '余额不足')\n      }\n    } catch (error: any) {\n      console.error('💰 余额支付失败:', error)\n      console.error('💰 错误详情:', error.response || error.message)\n      Taro.hideLoading()\n      Taro.showToast({\n        title: error.message || '支付失败',\n        icon: 'none'\n      })\n      return false\n    }\n  }\n\n  /**\n   * 真实微信支付（需要企业认证）\n   * 注意：wxPayParams 已经在创建订单时由后端返回\n   */\n  private async payWithWechat(options: PaymentOptions): Promise<boolean> {\n    try {\n      console.log('💳 开始真实微信支付，订单号:', options.orderNo)\n\n      // ⚠️ 重要：wxPayParams 应该由创建订单接口返回，而不是单独获取\n      // 如果没有传入支付参数，需要从订单服务获取\n      // 这里假设调用方已经在options中附带了wxPayParams\n      const wxPayParams = (options as any).wxPayParams\n\n      if (!wxPayParams) {\n        throw new Error('缺少微信支付参数，请先创建订单')\n      }\n\n      // ✅ 验证支付参数完整性\n      const requiredFields = ['timeStamp', 'nonceStr', 'package', 'signType', 'paySign']\n      const missingFields = requiredFields.filter(field => !wxPayParams[field])\n\n      if (missingFields.length > 0) {\n        console.error('❌ 微信支付参数不完整，缺少字段:', missingFields)\n        throw new Error(`微信支付参数缺失: ${missingFields.join(', ')}`)\n      }\n\n      console.log('💳 微信支付参数:', {\n        timeStamp: wxPayParams.timeStamp,\n        nonceStr: wxPayParams.nonceStr?.substring(0, 8) + '...',\n        package: wxPayParams.package,\n        signType: wxPayParams.signType,\n        paySign: wxPayParams.paySign?.substring(0, 16) + '...'\n      })\n\n      // 调起微信支付SDK\n      await Taro.requestPayment({\n        timeStamp: wxPayParams.timeStamp,\n        nonceStr: wxPayParams.nonceStr,\n        package: wxPayParams.package,\n        signType: wxPayParams.signType as any,\n        paySign: wxPayParams.paySign\n      })\n\n      console.log('💳 用户完成支付，等待微信回调后端更新订单状态')\n\n      Taro.showToast({\n        title: '支付成功',\n        icon: 'success'\n      })\n\n      return true\n    } catch (error: any) {\n      if (error.errMsg === 'requestPayment:fail cancel') {\n        console.log('💳 用户取消支付')\n        return false\n      }\n\n      console.error('💳 微信支付失败:', error)\n      console.error('💳 错误详情:', {\n        errMsg: error.errMsg,\n        errCode: error.errCode,\n        message: error.message\n      })\n\n      Taro.showToast({\n        title: error.errMsg || error.message || '支付失败',\n        icon: 'none',\n        duration: 3000\n      })\n      throw error\n    }\n  }\n\n  /**\n   * 检查支付环境\n   */\n  async checkPaymentEnvironment(): Promise<{\n    canUseWechatPay: boolean\n    canUseBalance: boolean\n    canUseMockPay: boolean\n    message: string\n  }> {\n    // 获取小程序账号信息\n    const accountInfo = Taro.getAccountInfoSync()\n    const { miniProgram } = accountInfo\n\n    // 个人小程序的AppID通常以wx开头的个人类型\n    const isPersonalApp = !this.config.enableWechatPayment\n\n    return {\n      canUseWechatPay: !isPersonalApp && this.config.enableWechatPayment,\n      canUseBalance: this.config.enableBalancePayment,\n      canUseMockPay: this.config.useMockPayment,\n      message: isPersonalApp\n        ? '当前为个人小程序，使用模拟支付和余额支付'\n        : '企业小程序，支持完整支付功能'\n    }\n  }\n\n  /**\n   * 生成充值码（线下充值）\n   */\n  async generateRechargeCode(amount: number): Promise<{\n    code: string\n    qrcode: string\n    expireTime: string\n  }> {\n    const response = await post('/recharge/generate-code', { amount })\n    return response.data\n  }\n\n  /**\n   * 辅助方法：延迟\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n}\n\n// 导出单例\nexport const paymentService = new PaymentService()\n\n// 导出支付方式枚举\nexport enum PaymentMethod {\n  WECHAT = 'wechat',\n  BALANCE = 'balance',\n  MOCK = 'mock'\n}","import { get, post } from '@/utils/request'\nimport Taro from '@tarojs/taro'\nimport { getCurrentUserId, getCurrentUserPhone } from '@/utils/user'\n\n/**\n * 交易记录类型\n */\nexport interface Transaction {\n  id: string\n  type: 'recharge' | 'consume' | 'refund'\n  amount: number      // 正数为增加，负数为减少\n  balance: number     // 交易后余额\n  description: string\n  orderId?: string    // 关联的订单号\n  createdAt: string\n}\n\n/**\n * 充值选项配置\n * ✅ 所有金额字段都是分为单位（整数）\n */\nexport interface RechargeOption {\n  id: number\n  amount: number      // 充值金额（分）✅ 分为单位\n  bonus: number       // 赠送金额（分）✅ 分为单位\n  label: string       // 显示标签（用于UI显示，如\"100元\"）\n  sortOrder?: number\n  isActive?: boolean\n  description?: string\n  promotionTag?: string\n  isRecommended?: boolean\n}\n\n/**\n * 余额响应数据\n */\ninterface BalanceResponse {\n  balance: number     // 余额（分）- API返回的原始单位\n  totalSpent: number  // 总消费（分）\n  totalVisits: number // 总访问次数\n}\n\n/**\n * 交易记录响应\n */\ninterface TransactionsResponse {\n  list: Transaction[]\n  total: number\n  page: number\n  pageSize: number\n  hasMore: boolean\n}\n\n/**\n * 钱包服务类\n * 生产级代码：完全使用真实API\n */\nclass WalletService {\n  /**\n   * 获取当前用户ID\n   * @returns 用户ID\n   */\n  private getCurrentUserId(): number {\n    return getCurrentUserId()\n  }\n\n  /**\n   * 获取钱包余额\n   * ✅ 返回分为单位，由页面层使用 formatAmount() 转换为元显示\n   * @returns 余额信息（分为单位）\n   */\n  async getBalance(): Promise<number> {\n    try {\n      const userId = this.getCurrentUserId()\n      const response = await get<BalanceResponse>('/users/wallet/balance', { userId })\n\n      // ✅ 直接返回API数据（分为单位）\n      const balanceInCents = response.data.balance || 0\n      console.log('💰 余额查询:', {\n        分: balanceInCents,\n        元: (balanceInCents / 100).toFixed(2)\n      })\n      return balanceInCents\n    } catch (error) {\n      console.error('获取余额失败:', error)\n      throw new Error('获取余额失败，请重试')\n    }\n  }\n\n  /**\n   * 获取余额详情（包含统计信息）\n   * ✅ 返回分为单位，由页面层负责转换为元显示\n   * @returns 余额详情（分为单位）\n   */\n  async getBalanceDetails(): Promise<BalanceResponse> {\n    try {\n      const userId = this.getCurrentUserId()\n      const response = await get<BalanceResponse>('/users/wallet/balance', { userId })\n      // ✅ 直接返回API数据（分为单位），不转换\n      return response.data\n    } catch (error) {\n      console.error('获取余额详情失败:', error)\n      throw new Error('获取余额详情失败，请重试')\n    }\n  }\n\n  /**\n   * 获取充值配置选项\n   * ✅ 返回分为单位，页面层用 formatAmount() 转换为元显示\n   * @returns 充值配置列表（分为单位）\n   */\n  async getRechargeOptions(): Promise<RechargeOption[]> {\n    try {\n      const response = await get<RechargeOption[]>('/recharge/configs')\n\n      // ✅ 直接返回API数据（分为单位）\n      return response.data\n    } catch (error) {\n      console.error('获取充值配置失败:', error)\n      // 返回默认配置作为降级方案\n      return this.getDefaultRechargeOptions()\n    }\n  }\n\n  /**\n   * 获取默认充值配置（降级方案）\n   * ✅ 返回分为单位\n   * @private\n   */\n  private getDefaultRechargeOptions(): RechargeOption[] {\n    return [\n      { id: 1, amount: 10000, bonus: 0, label: '100元', sortOrder: 1 },              // 100元 = 10000分\n      { id: 2, amount: 20000, bonus: 0, label: '200元', sortOrder: 2 },              // 200元 = 20000分\n      { id: 3, amount: 50000, bonus: 5000, label: '500元', sortOrder: 3, promotionTag: '赠50元' },    // 500元 = 50000分\n      { id: 4, amount: 100000, bonus: 10000, label: '1000元', sortOrder: 4, promotionTag: '赠100元' }, // 1000元 = 100000分\n      { id: 5, amount: 200000, bonus: 30000, label: '2000元', sortOrder: 5, promotionTag: '赠300元' }, // 2000元 = 200000分\n      { id: 6, amount: 500000, bonus: 100000, label: '5000元', sortOrder: 6, promotionTag: '赠1000元', isRecommended: true } // 5000元 = 500000分\n    ]\n  }\n\n  /**\n   * 创建充值订单\n   * @param amount 充值金额（元）\n   * @param bonus 赠送金额（元）\n   * @returns 订单信息\n   */\n  async createRechargeOrder(amount: number, bonus: number = 0) {\n    try {\n      const userId = this.getCurrentUserId()\n      const userPhone = getCurrentUserPhone()\n\n      const orderData = {\n        orderType: 'recharge',\n        userId: userId,\n        userPhone: userPhone,\n        title: bonus > 0 ? `充值${amount}元，赠送${bonus}元` : `充值${amount}元`,\n        amount: amount * 100, // 转换为分\n        paymentMethod: 'wechat',\n        extraData: {\n          rechargeAmount: amount * 100,        // ✅ 按API文档使用 rechargeAmount\n          bonus: bonus * 100,                  // 转换为分\n          actualAmount: (amount + bonus) * 100 // ✅ 按API文档使用 actualAmount\n        }\n      }\n\n      // 💰 调试日志\n      console.log('💰 创建充值订单')\n      console.log('👤 当前用户ID:', userId)\n      console.log('📞 用户手机号:', userPhone)\n      console.log('📦 订单数据:', {\n        orderType: orderData.orderType,\n        userId: orderData.userId,\n        title: orderData.title,\n        amount: `${orderData.amount}分 (¥${(orderData.amount / 100).toFixed(2)})`,\n        paymentMethod: orderData.paymentMethod,\n        extraData: orderData.extraData\n      })\n\n      const response = await post('/orders/create', orderData, {\n        showLoading: true,\n        loadingTitle: '创建订单中...'\n      })\n\n      console.log('✅ 充值订单创建成功')\n      console.log('📋 订单响应:', {\n        orderNo: response.data.orderNo,\n        amount: `${response.data.amount}分 (¥${(response.data.amount / 100).toFixed(2)})`,\n        paymentStatus: response.data.paymentStatus,\n        hasWxPayParams: !!response.data.wxPayParams\n      })\n\n      return response.data\n    } catch (error: any) {\n      console.error('❌ 创建充值订单失败:', error)\n      throw new Error(error.message || '创建充值订单失败')\n    }\n  }\n\n  /**\n   * 获取交易记录\n   * ✅ 返回分为单位\n   * @param page 页码\n   * @param pageSize 每页数量\n   * @param type 交易类型（可选）\n   * @returns 交易记录列表（金额为分为单位）\n   */\n  async getTransactions(\n    page: number = 1,\n    pageSize: number = 20,\n    type?: 'recharge' | 'consume' | 'refund'\n  ): Promise<Transaction[]> {\n    try {\n      const userId = this.getCurrentUserId()\n      const params: any = { userId, page, pageSize }\n      if (type) params.type = type\n\n      const response = await get<TransactionsResponse>('/users/wallet/transactions', params)\n\n      // ✅ 直接返回API数据（分为单位）\n      return response.data.list\n    } catch (error) {\n      console.error('获取交易记录失败:', error)\n      return []\n    }\n  }\n\n  /**\n   * 使用余额支付\n   * @param orderNo 订单号\n   * @param amount 支付金额（分）\n   * @returns 支付结果（balance为分为单位）\n   */\n  async payWithBalance(orderNo: string, amount: number) {\n    try {\n      const response = await post('/orders/pay', {\n        orderNo,\n        paymentMethod: 'balance'\n      }, {\n        showLoading: true,\n        loadingTitle: '支付中...'\n      })\n\n      return {\n        success: true,\n        balance: response.data.balance,  // ✅ 返回分为单位\n        message: '支付成功'\n      }\n    } catch (error: any) {\n      console.error('余额支付失败:', error)\n      throw new Error(error.message || '余额不足或支付失败')\n    }\n  }\n\n  /**\n   * 退款到余额\n   * @param orderNo 订单号\n   * @param amount 退款金额（分）\n   * @param reason 退款原因\n   * @returns 退款结果（balance为分为单位）\n   */\n  async refundToBalance(orderNo: string, amount: number, reason: string = '订单退款') {\n    try {\n      const response = await post('/users/wallet/refund', {\n        phone: getCurrentUserPhone(),\n        amount: amount,  // ✅ 已经是分为单位，直接发送\n        orderNo: orderNo,\n        description: reason\n      }, {\n        showLoading: true,\n        loadingTitle: '退款中...'\n      })\n\n      return {\n        success: true,\n        balance: response.data.balance,  // ✅ 返回分为单位\n        transactionId: response.data.transactionId,\n        message: '退款成功'\n      }\n    } catch (error: any) {\n      console.error('退款失败:', error)\n      throw new Error(error.message || '退款失败')\n    }\n  }\n\n  /**\n   * 清空本地缓存\n   */\n  clearCache(): void {\n    try {\n      Taro.removeStorageSync('userInfo')\n      Taro.removeStorageSync('walletCache')\n      console.log('钱包缓存已清空')\n    } catch (error) {\n      console.error('清空缓存失败:', error)\n    }\n  }\n}\n\n// 导出单例实例\nexport const walletService = new WalletService()","/**\n * 礼券相关类型定义\n */\n\nexport interface Voucher {\n  id: string\n  userId: string\n  type: 'discount' | 'cash' | 'gift'  // 折扣券、现金券、礼品券\n  name: string                        // 券名称\n  description: string                 // 描述\n  discountRate?: number              // 折扣率：如 0.68 表示68折\n  discountPercentage?: number        // 折扣百分比：如 32 表示32%优惠\n  cashValue?: number                 // 现金面值（分）\n  minAmount?: number                 // 最低消费金额（分）\n  validFrom: string                  // 生效时间\n  validTo: string                    // 过期时间\n  status: 'unused' | 'used' | 'expired' // 券状态\n  usedAt?: string                    // 使用时间\n  orderNo?: string                   // 关联订单号\n  isAutoApply?: boolean              // 是否自动应用\n}\n\n/**\n * 根据折扣率生成虚拟优惠券\n */\nexport function generateVoucherFromDiscountRate(discountRate: number, userId: string): Voucher | null {\n  if (!discountRate || discountRate >= 1) {\n    return null // 无折扣或折扣率无效\n  }\n\n  const discountPercentage = Math.round((1 - discountRate) * 100)\n  const now = new Date()\n  const oneYearLater = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000)\n\n  return {\n    id: `virtual_${userId}_discount`,\n    userId: userId.toString(),\n    type: 'discount',\n    name: discountPercentage >= 30 ? '新人专享券' : '会员折扣券',\n    description: `全场服务${Math.round(discountRate * 100)}折`,\n    discountRate: discountRate,\n    discountPercentage: discountPercentage,\n    validFrom: now.toISOString(),\n    validTo: oneYearLater.toISOString(),\n    status: 'unused',\n    isAutoApply: true\n  }\n}\n\n/**\n * 计算折扣后的价格\n */\nexport function calculateDiscountPrice(originalPrice: number, discountRate: number): {\n  originalPrice: number\n  finalPrice: number\n  savedAmount: number\n  discountDisplay: string\n} {\n  const finalPrice = Math.round(originalPrice * discountRate)\n  const savedAmount = originalPrice - finalPrice\n  const discountPercentage = Math.round(discountRate * 100)\n\n  return {\n    originalPrice,\n    finalPrice,\n    savedAmount,\n    discountDisplay: `${discountPercentage}折`\n  }\n}","/**\n * 礼券服务\n */\nimport { Voucher, generateVoucherFromDiscountRate } from '@/types/voucher'\nimport { getCurrentUserInfo } from '@/utils/user'\nimport Taro from '@tarojs/taro'\n\nclass VoucherService {\n  private vouchers: Voucher[] = []\n  private currentVoucher: Voucher | null = null\n\n  /**\n   * 获取当前用户的礼券列表\n   */\n  async getMyVouchers(): Promise<Voucher[]> {\n    const userInfo = getCurrentUserInfo()\n    if (!userInfo) {\n      return []\n    }\n\n    // 根据用户折扣率生成虚拟券\n    if (userInfo.discountRate && userInfo.discountRate < 1) {\n      const voucher = generateVoucherFromDiscountRate(userInfo.discountRate, userInfo.id.toString())\n      if (voucher) {\n        this.vouchers = [voucher]\n        return [voucher]\n      }\n    }\n\n    return []\n  }\n\n  /**\n   * 获取可用礼券列表\n   */\n  async getAvailableVouchers(orderAmount: number): Promise<Voucher[]> {\n    const allVouchers = await this.getMyVouchers()\n    const now = new Date()\n\n    return allVouchers.filter(voucher => {\n      // 检查状态\n      if (voucher.status !== 'unused') return false\n\n      // 检查有效期\n      const validFrom = new Date(voucher.validFrom)\n      const validTo = new Date(voucher.validTo)\n      if (now < validFrom || now > validTo) return false\n\n      // 检查最低消费金额\n      if (voucher.minAmount && orderAmount < voucher.minAmount) return false\n\n      return true\n    })\n  }\n\n  /**\n   * 设置当前选中的礼券\n   */\n  setCurrentVoucher(voucher: Voucher | null) {\n    this.currentVoucher = voucher\n    // 存储到本地，方便订单页面使用\n    if (voucher) {\n      Taro.setStorageSync('selectedVoucher', voucher)\n    } else {\n      Taro.removeStorageSync('selectedVoucher')\n    }\n  }\n\n  /**\n   * 获取当前选中的礼券\n   */\n  getCurrentVoucher(): Voucher | null {\n    if (!this.currentVoucher) {\n      // 尝试从本地存储恢复\n      try {\n        this.currentVoucher = Taro.getStorageSync('selectedVoucher')\n      } catch (e) {\n        console.error('获取选中礼券失败:', e)\n      }\n    }\n    return this.currentVoucher\n  }\n\n  /**\n   * 标记礼券为已使用\n   */\n  markVoucherAsUsed(voucherId: string, orderNo: string) {\n    const voucher = this.vouchers.find(v => v.id === voucherId)\n    if (voucher) {\n      voucher.status = 'used'\n      voucher.usedAt = new Date().toISOString()\n      voucher.orderNo = orderNo\n    }\n    // 清除选中的券\n    this.setCurrentVoucher(null)\n  }\n\n  /**\n   * 检查是否为新用户（有新人券）\n   */\n  isNewUser(): boolean {\n    const userInfo = getCurrentUserInfo()\n    if (!userInfo || !userInfo.discountRate) return false\n\n    // 32%及以上的优惠认为是新用户\n    const discountPercentage = Math.round((1 - userInfo.discountRate) * 100)\n    return discountPercentage >= 30\n  }\n\n  /**\n   * 获取新人礼券信息（用于弹窗展示）\n   */\n  getNewUserVoucherInfo(): {\n    hasVoucher: boolean\n    discountPercentage?: number\n    description?: string\n  } {\n    const userInfo = getCurrentUserInfo()\n    if (!userInfo || !userInfo.discountRate || userInfo.discountRate >= 1) {\n      return { hasVoucher: false }\n    }\n\n    const discountPercentage = Math.round((1 - userInfo.discountRate) * 100)\n    return {\n      hasVoucher: true,\n      discountPercentage,\n      description: `恭喜获得新人专享${discountPercentage}%优惠券！`\n    }\n  }\n}\n\nexport const voucherService = new VoucherService()","import { post, get } from '@/utils/request'\nimport Taro from '@tarojs/taro'\nimport { API_CONFIG } from '@/config/api'\n\n/**\n * 评价数据接口\n */\nexport interface ReviewData {\n  reviewId: number | string\n  appointmentId: number\n  userId?: number\n  userName?: string\n  userAvatar?: string\n  therapistId?: string | number\n  therapistName?: string\n  therapistAvatar?: string\n  storeId?: string | number\n  storeName?: string\n  rating: number\n  content: string\n  tags?: string[]\n  appointmentDate?: string\n  serviceType?: string\n  createdAt: string\n  updatedAt?: string\n}\n\n/**\n * 创建评价参数\n */\nexport interface CreateReviewParams {\n  appointmentId: number\n  therapistId?: string\n  rating: number\n  content: string\n  tags?: string[]\n}\n\n/**\n * 评价列表响应\n */\nexport interface ReviewListResponse {\n  list: ReviewData[]\n  total: number\n  page: number\n  pageSize: number\n  hasMore: boolean\n}\n\n/**\n * 评价统计数据\n */\nexport interface ReviewStats {\n  totalCount: number\n  averageRating: number\n  ratingBreakdown: {\n    '1': number\n    '2': number\n    '3': number\n    '4': number\n    '5': number\n  }\n}\n\n/**\n * 评价服务类\n */\nclass ReviewService {\n  /**\n   * 创建评价\n   * @param params 评价参数\n   * @returns 评价结果\n   */\n  async createReview(params: CreateReviewParams): Promise<ReviewData> {\n    // 参数验证\n    if (params.content.length < 1) {\n      throw new Error('评价内容不能为空')\n    }\n\n    if (params.content.length > 500) {\n      throw new Error('评价内容不能超过500字')\n    }\n\n    if (params.rating < 1 || params.rating > 5) {\n      throw new Error('评分必须在1-5之间')\n    }\n\n    try {\n      const response = await post('/reviews', params, {\n        showLoading: true,\n        loadingTitle: '提交评价中...'\n      })\n\n      // 触发评价成功事件（可用于更新缓存）\n      Taro.eventCenter.trigger('review:created', response.data)\n\n      return response.data\n    } catch (error: any) {\n      console.error('创建评价失败:', error)\n      throw new Error(error.message || '创建评价失败')\n    }\n  }\n\n  /**\n   * 获取推拿师评价列表\n   * @param therapistId 推拿师ID\n   * @param page 页码\n   * @param pageSize 每页数量\n   * @param rating 评分筛选\n   * @returns 评价列表\n   */\n  async getTherapistReviews(\n    therapistId: string | number,\n    page: number = 1,\n    pageSize: number = 10,\n    rating?: number\n  ): Promise<ReviewListResponse> {\n    try {\n      const params: any = { page, pageSize }\n      if (rating) {\n        params.rating = rating\n      }\n\n      const response = await get(`/therapists/${therapistId}/reviews`, params)\n      return response.data\n    } catch (error: any) {\n      console.error('获取推拿师评价失败:', error)\n      return {\n        list: [],\n        total: 0,\n        page,\n        pageSize,\n        hasMore: false\n      }\n    }\n  }\n\n  /**\n   * 获取用户评价历史\n   * @param userId 用户ID\n   * @param page 页码\n   * @param pageSize 每页数量\n   * @returns 评价列表\n   */\n  async getUserReviews(\n    userId: number,\n    page: number = 1,\n    pageSize: number = 10\n  ): Promise<ReviewListResponse> {\n    try {\n      const response = await get(`/users/${userId}/reviews`, {\n        page,\n        pageSize\n      })\n      return response.data\n    } catch (error: any) {\n      console.error('获取用户评价失败:', error)\n      return {\n        list: [],\n        total: 0,\n        page,\n        pageSize,\n        hasMore: false\n      }\n    }\n  }\n\n  /**\n   * 获取评价详情\n   * @param reviewId 评价ID\n   * @returns 评价详情\n   */\n  async getReviewDetail(reviewId: string | number): Promise<ReviewData> {\n    try {\n      const response = await get(`/reviews/${reviewId}`)\n      return response.data\n    } catch (error: any) {\n      console.error('获取评价详情失败:', error)\n      throw new Error(error.message || '评价不存在')\n    }\n  }\n\n  /**\n   * 获取推拿师评价统计\n   * @param therapistId 推拿师ID\n   * @returns 评价统计\n   */\n  async getReviewStats(therapistId: string | number): Promise<ReviewStats> {\n    try {\n      const response = await get(`/therapists/${therapistId}/review-stats`)\n      return response.data\n    } catch (error: any) {\n      console.error('获取评价统计失败:', error)\n      // 返回默认统计数据\n      return {\n        totalCount: 0,\n        averageRating: 0,\n        ratingBreakdown: {\n          '1': 0,\n          '2': 0,\n          '3': 0,\n          '4': 0,\n          '5': 0\n        }\n      }\n    }\n  }\n\n  /**\n   * 检查是否可以评价\n   * @param appointmentId 预约ID\n   * @returns 是否可以评价\n   */\n  async checkCanReview(appointmentId: number): Promise<boolean> {\n    try {\n      // 直接使用Taro.request来避免request.ts的错误日志\n      const response = await Taro.request({\n        url: `${API_CONFIG.baseURL}/reviews/${appointmentId}`,\n        method: 'GET',\n        header: {\n          'Content-Type': 'application/json'\n        },\n        timeout: API_CONFIG.timeout\n      })\n\n      const result = response.data as any\n\n      // 如果返回code 1002（评价不存在），说明可以评价\n      if (result.code === 1002) {\n        console.log('评价不存在，可以创建评价')\n        return true\n      }\n\n      // 如果返回code 0且有数据，说明已评价\n      if (result.code === 0 && result.data?.reviewId) {\n        console.log('评价已存在，不能再评价')\n        return false\n      }\n\n      // 其他情况默认可以评价\n      return true\n    } catch (error: any) {\n      // 网络错误等情况，默认允许评价\n      console.warn('检查评价状态时发生错误，默认允许评价')\n      return true\n    }\n  }\n\n  /**\n   * 批量获取评价状态\n   * @param appointmentIds 预约ID列表\n   * @returns 评价状态映射\n   */\n  async batchCheckReviewStatus(\n    appointmentIds: number[]\n  ): Promise<Record<number, boolean>> {\n    const result: Record<number, boolean> = {}\n\n    // 并发检查所有预约的评价状态\n    const promises = appointmentIds.map(async (id) => {\n      const canReview = await this.checkCanReview(id)\n      result[id] = canReview\n    })\n\n    await Promise.allSettled(promises)\n    return result\n  }\n\n  /**\n   * 清除缓存\n   */\n  clearCache() {\n    try {\n      // 清除本地存储的评价相关缓存\n      const keys = Taro.getStorageInfoSync().keys\n      keys.forEach(key => {\n        if (key.startsWith('review_cache_')) {\n          Taro.removeStorageSync(key)\n        }\n      })\n    } catch (error) {\n      console.error('清除评价缓存失败:', error)\n    }\n  }\n}\n\n// 导出单例实例\nexport const reviewService = new ReviewService()","import React from 'react'\nimport Taro from '@tarojs/taro'\nimport { View, Text } from '@tarojs/components'\nimport './index.scss'\n\ninterface BookingButtonProps {\n  size?: 'small' | 'medium' | 'large'\n  text?: string\n}\n\nconst BookingButton: React.FC<BookingButtonProps> = ({\n  size = 'medium',\n  text = '预约'\n}) => {\n  return (\n    <View \n      className={`booking-button booking-button-${size}`}\n    >\n      <Text className=\"button-text\">{text}</Text>\n    </View>\n  )\n}\n\nexport default BookingButton"],"names":["API_CONFIG","baseURL","timeout","retry","ERROR_CODES","SUCCESS","PARAM_ERROR","INVALID_INPUT","NOT_FOUND","DUPLICATE","INVALID_STATE","OPERATION_FAILED","INSUFFICIENT_BALANCE","QUOTA_EXCEEDED","INVALID_PHONE","USER_NOT_FOUND","UNAUTHORIZED","FORBIDDEN","TOKEN_EXPIRED","INVALID_TOKEN","SESSION_EXPIRED","INTERNAL_ERROR","SERVICE_UNAVAILABLE","DATABASE_ERROR","EXTERNAL_API_ERROR","PAYMENT_ERROR","PAYMENT_TIMEOUT","SMS_ERROR","WECHAT_ERROR","ERROR_MESSAGE_MAP","getErrorMessage","code","defaultMessage","isAuthError","includes","request","url","options","method","data","header","showLoading","loadingTitle","Taro","title","mask","response","hideLoading","result","error","message","console","warn","removeStorageSync","errorMessage","Error","status","statusCode","get","params","queryString","Object","keys","filter","key","undefined","map","encodeURIComponent","join","post","CDN_BASE","ASSETS_CONFIG","baseUrl","giftCard","member","electronic","product","pillow","therapy","nuantie","huxi","xinai","yaofu","aijiu","xinaibing","xinaizhu","xinaitiao","banners","goodnight","therapists","default","getCurrentUserInfo","userInfo","getStorageSync","getCurrentUserId","id","getCurrentUserPhone","phone","setUserInfo","setStorageSync","maskPhone","replace","wechatLogin","login","needBindPhone","fetchUserInfo","localUserInfo","username","nickname","avatar","openid","membershipNumber","memberLevel","balance","totalSpent","totalVisits","discountRate","discount_rate","checkAndAutoLogin","freshUserInfo","loginResult","GIFT_CARDS","type","name","image","description","features","terms","NUANTIE_PRODUCTS","price","originalPrice","unit","specifications","AIJIU_PRODUCTS","PRODUCTS","GiftService","getAllGiftCards","getGiftCardById","find","card","getAllProducts","getProductById","getNuantieProducts","getAijiuProducts","createGiftCardOrder","userId","orderData","orderType","amount","toFixed","quantity","paymentMethod","extraData","productType","productId","cardId","productName","cardType","faceValue","customMessage","log","orderNo","paymentStatus","hasWxPayParams","wxPayParams","createProductOrder","normalizeImageUrl","startsWith","StoreService","getNearbyStores","latitude","longitude","page","pageSize","normalizedStores","list","store","images","img","getStoreDetail","storeId","searchStores","keyword","total","hasMore","getStoresByStatus","storeService","LocationService","getCurrentLocation","settingRes","getSetting","authSetting","authorize","scope","res","getLocation","isHighAccuracy","gcj02Error","errorMsg","errMsg","showModal","content","confirmText","success","confirm","openSetting","calculateDistance","lat1","lng1","lat2","lng2","rad","Math","PI","R","dLat","dLng","a","sin","cos","c","atan2","sqrt","Number","formatDistance","distance","round","getLocationService","ShoppingCart","items","therapist","onCheckout","onMaskClick","onRemoveItem","isExpanded","setIsExpanded","useState","countdown","setCountdown","timerRef","useRef","totalOriginalPrice","reduce","sum","item","totalDiscountPrice","discountPrice","totalSavings","hasItems","length","useEffect","current","setInterval","prev","clearInterval","showToast","icon","formatCountdown","seconds","mins","floor","secs","toString","padStart","formatDate","dateStr","date","Date","today","isToday","toDateString","month","getMonth","day","getDate","handleCheckoutClick","handleMaskClick","handleConfirmCheckout","jsx","View","jsxs","Fragment","Text","index","Image","therapistAvatar","therapistName","duration","serviceName","time","hour","minute","split","endMinute","endHour","finalMinute","symptomCategories","order","symptomServices","categoryId","availability","tag","TherapistService","getRecommendedTherapists","userLocation","getRecommendedTherapistsWithDistance","normalizedTherapists","therapistsWithDistance","Promise","all","storeData","sort","b","getTherapistsByStore","therapistArray","Array","isArray","getTherapistDetail","therapistId","getTherapistsByExpertise","expertise","searchTherapists","getAvailableSlots","therapistService","OrderService","getUserInfo","userPhone","getDisplayStatus","appointmentStatus","appointmentDate","startTime","appointmentDateTime","endDateTime","getTime","now","enrichOrderWithStoreAndTherapistInfo","promises","storeName","push","then","storeResponse","storeAddress","address","catch","defaultStore","getDefaultStoreInfo","therapistResponse","allSettled","enrichOrderListWithStoreAndTherapistInfo","orders","storeIds","Set","therapistIds","forEach","add","storeMap","Map","therapistMap","invalidStoreIds","from","set","validOrders","has","createAppointmentOrder","requestData","appointmentTime","serviceId","isNaN","appointment","getPaymentParams","timeStamp","String","nonceStr","random","substr","package","signType","paySign","updateOrderStatus","paidAt","toISOString","getOrderDetail","appointmentId","displayStatus","getOrderList","cancelOrder","reason","requestRefund","getRefundDetail","refundId","rebookOrder","originalOrder","getOrderStatistics","pendingPayment","o","paid","completed","cancelled","orderService","centsToYuan","amountInCents","formatAmount","symbol","suffix","precision","yuan","PaymentService","constructor","config","useMockPayment","enableBalancePayment","enableWechatPayment","pay","mockWechatPayment","payWithBalance","payWithWechat","cancelText","confirmColor","delay","balanceInYuan","requiredFields","missingFields","field","substring","requestPayment","errCode","checkPaymentEnvironment","getAccountInfoSync","isPersonalApp","canUseWechatPay","canUseBalance","canUseMockPay","generateRechargeCode","ms","resolve","setTimeout","paymentService","WalletService","getBalance","balanceInCents","分","元","getBalanceDetails","getRechargeOptions","getDefaultRechargeOptions","bonus","label","sortOrder","promotionTag","isRecommended","createRechargeOrder","rechargeAmount","actualAmount","getTransactions","refundToBalance","transactionId","clearCache","walletService","generateVoucherFromDiscountRate","discountPercentage","oneYearLater","validFrom","validTo","isAutoApply","calculateDiscountPrice","finalPrice","savedAmount","discountDisplay","VoucherService","vouchers","currentVoucher","getMyVouchers","voucher","getAvailableVouchers","orderAmount","allVouchers","minAmount","setCurrentVoucher","getCurrentVoucher","e","markVoucherAsUsed","voucherId","v","usedAt","isNewUser","getNewUserVoucherInfo","hasVoucher","voucherService","ReviewService","createReview","rating","eventCenter","trigger","getTherapistReviews","getUserReviews","getReviewDetail","reviewId","getReviewStats","totalCount","averageRating","ratingBreakdown","checkCanReview","batchCheckReviewStatus","appointmentIds","canReview","getStorageInfoSync","reviewService","BookingButton","size","text"],"mappings":"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"}